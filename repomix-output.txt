This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
client/.gitignore
client/package.json
client/public/index.html
client/public/manifest.json
client/public/robots.txt
client/README.md
client/src/App.css
client/src/App.js
client/src/components/BannerSlideshow.js
client/src/components/ChatbotUI.js
client/src/components/FloatingChatbot.js
client/src/components/PaymentForm.js
client/src/helpers/AuthContext.js
client/src/helpers/NotificationContext.js
client/src/index.js
client/src/pages/AdminAIReviewsDashboard.js
client/src/pages/AdminCalendar.js
client/src/pages/AdminDashboard.js
client/src/pages/AdminNotificationIcon.js
client/src/pages/AdminRegistrations.js
client/src/pages/AIInsights.js
client/src/pages/AIReviewsPage.js
client/src/pages/Calendar.js
client/src/pages/Chatbot.js
client/src/pages/CreateEvent.js
client/src/pages/EditEvent.js
client/src/pages/Event.js
client/src/pages/EventPersonalization.js
client/src/pages/EventRegistration.js
client/src/pages/ForgotPassword.js
client/src/pages/Home.js
client/src/pages/LandingPage.js
client/src/pages/Login.js
client/src/pages/MyRegistrations.js
client/src/pages/NotificationIcon.js
client/src/pages/PageNotFound.js
client/src/pages/PersonalizedRecommendations.js
client/src/pages/Profile.js
client/src/pages/Registration.js
client/src/pages/ResetPassword.js
client/src/pages/Response.js
client/src/pages/UserNotificationIcon.js
client/src/reportWebVitals.js
client/src/services/api.js
client/src/services/EventService.js
client/src/utils/colors.js
railway.json
README.md
server/.gitignore
server/index.js
server/middlewares/AuthMiddleware.js
server/migrations/20250220075549-add-sentiment-to-reviews.js
server/migrations/20250227090014-add-isAdmin-to-users.js
server/migrations/20250228065051-add-admin-response-to-reviews.js
server/migrations/20250319112413-add-time-category-image-to-events.js
server/migrations/20250325230209-add-reset-password-fields.js
server/migrations/20250330163002-add-price-to-events.js
server/migrations/20250330163141-create-registrations-table.js
server/migrations/20250330163704-fix-add-price-fields-to-events.js
server/models/EventAnalytics.js
server/models/Events.js
server/models/index.js
server/models/Notifications.js
server/models/Registrations.js
server/models/Reviews.js
server/models/Users.js
server/package.json
server/routes/AdminAnalytics.js
server/routes/AIInsightsRoutes.js
server/routes/Analytics.js
server/routes/Chatbot.js
server/routes/Dashboard.js
server/routes/Events.js
server/routes/Notifications.js
server/routes/Payments.js
server/routes/Recommendations.js
server/routes/Registrations.js
server/routes/Response.js
server/routes/Reviews.js
server/routes/Social.js
server/routes/userRoutes.js
server/routes/Users.js
server/services/PredictiveAnalyticsService.js
server/services/RecommendationService.js
server/services/SentimentService.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="client/public/manifest.json">
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
</file>

<file path="client/public/robots.txt">
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
</file>

<file path="client/README.md">
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
</file>

<file path="client/src/components/BannerSlideshow.js">
import React, { useState, useEffect, useCallback } from 'react';
// Import your banner images - make sure these files exist in your project
// You'll need to adjust these paths based on your project structure
import banner1 from '../images/banners/banner1.jpg';
import banner2 from '../images/banners/banner2.jpg';
import banner3 from '../images/banners/banner3.jpg';
import banner4 from '../images/banners/banner4.jpg';
import banner5 from '../images/banners/banner5.jpg';
import banner6 from '../images/banners/banner6.jpg';
import banner7 from '../images/banners/banner7.jpg';
import banner8 from '../images/banners/banner8.jpg';

const BannerSlideshow = ({ theme, isCircular = false }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [nextIndex, setNextIndex] = useState(1);
  const [fading, setFading] = useState(false);
  
  // Use imported images
  const banners = [
    banner1, banner2, banner3, banner4,
    banner5, banner6, banner7, banner8
  ];

  // Centralized transition logic to ensure consistency
  // Using useCallback to memoize the function
  const handleTransition = useCallback((newIndex) => {
    if (fading) return; // Prevent transition if one is already in progress
    
    // Start fade out animation
    setFading(true);
    
    // After the fade out completes, update indices and start fade in
    setTimeout(() => {
      setCurrentIndex(newIndex);
      setNextIndex((newIndex + 1) % banners.length);
      
      // Small delay to ensure the current image is set before starting fade in
      setTimeout(() => {
        setFading(false);
      }, 50);
    }, 1000); // 1 second fade transition
  }, [fading, banners.length]);

  useEffect(() => {
    // Change image every 5 seconds for a slower, more elegant transition
    const interval = setInterval(() => {
      handleTransition((currentIndex + 1) % banners.length);
    }, 5000); // 5 seconds between transitions for better viewing

    return () => clearInterval(interval);
  }, [currentIndex, banners.length, handleTransition]);

  // Container shape based on prop
  const containerShape = isCircular 
    ? { borderRadius: '50%' } 
    : { borderRadius: '12px' };

  return (
    <div className="banner-slideshow position-relative overflow-hidden w-100 h-100" style={{ 
      border: '5px solid rgba(255, 255, 255, 0.2)',
      boxShadow: '0 10px 30px rgba(0, 0, 0, 0.2)',
      background: 'rgba(255, 255, 255, 0.1)',
      ...containerShape
    }}>
      {/* Current image with fade effect */}
      <div 
        className="position-absolute w-100 h-100"
        style={{
          backgroundImage: `url(${banners[currentIndex]})`,
          backgroundSize: 'cover',
          backgroundPosition: 'center',
          width: '100%',
          height: '100%',
          opacity: fading ? 0 : 1,
          transition: 'opacity 1s ease-in-out',
          zIndex: 1
        }}
      />
      
      {/* Base layer (next image) */}
      <div 
        className="position-absolute w-100 h-100"
        style={{
          backgroundImage: `url(${banners[nextIndex]})`,
          backgroundSize: 'cover',
          backgroundPosition: 'center',
          width: '100%',
          height: '100%',
          zIndex: 0
        }}
      />
      
      {/* Subtle overlay for better text readability if needed */}
      <div 
        className="position-absolute w-100 h-100"
        style={{
          background: 'radial-gradient(circle, rgba(0,0,0,0) 50%, rgba(0,0,0,0.3) 100%)',
          zIndex: 2
        }}
      />
      
      {/* Improved indicators with active animation */}
      <div 
        className="position-absolute bottom-0 start-50 translate-middle-x mb-4 d-flex gap-2"
        style={{ zIndex: 3 }}
      >
        {banners.map((_, index) => (
          <div 
            key={index}
            className="rounded-pill"
            style={{
              width: currentIndex === index ? '24px' : '8px',
              height: '8px',
              backgroundColor: currentIndex === index ? 'white' : 'rgba(255,255,255,0.5)',
              transition: 'all 0.5s ease',
              cursor: 'pointer'
            }}
            onClick={() => handleTransition(index)}
          />
        ))}
      </div>
      
      {/* Navigation buttons with improved styling */}
      <button 
        className="banner-nav-button position-absolute top-50 start-0 translate-middle-y ms-3"
        style={{ 
          zIndex: 3, 
          cursor: 'pointer',
          width: '40px',
          height: '40px',
          border: 'none',
          borderRadius: '50%',
          background: 'rgba(255,255,255,0.2)',
          backdropFilter: 'blur(5px)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          color: 'white',
          fontSize: '1.5rem',
          transition: 'all 0.3s ease',
          opacity: 0.7
        }}
        onMouseEnter={(e) => e.currentTarget.style.opacity = 1}
        onMouseLeave={(e) => e.currentTarget.style.opacity = 0.7}
        onClick={() => handleTransition((currentIndex - 1 + banners.length) % banners.length)}
        aria-label="Previous banner"
      >
        <i className="bi bi-chevron-left"></i>
      </button>
      
      <button 
        className="banner-nav-button position-absolute top-50 end-0 translate-middle-y me-3"
        style={{ 
          zIndex: 3, 
          cursor: 'pointer',
          width: '40px',
          height: '40px',
          border: 'none',
          borderRadius: '50%',
          background: 'rgba(255,255,255,0.2)',
          backdropFilter: 'blur(5px)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          color: 'white',
          fontSize: '1.5rem',
          transition: 'all 0.3s ease',
          opacity: 0.7
        }}
        onMouseEnter={(e) => e.currentTarget.style.opacity = 1}
        onMouseLeave={(e) => e.currentTarget.style.opacity = 0.7}
        onClick={() => handleTransition((currentIndex + 1) % banners.length)}
        aria-label="Next banner"
      >
        <i className="bi bi-chevron-right"></i>
      </button>
    </div>
  );
};

export default BannerSlideshow;
</file>

<file path="client/src/components/ChatbotUI.js">
import React, { useState, useRef, useEffect } from 'react';

export default function ChatbotUI() {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 'welcome-message',
      role: 'assistant',
      content: "👋 Hi there! I'm your Event App assistant. I can help you navigate the app, find events, and answer questions about features. How can I help you today?"
    }
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);

  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  const toggleChat = () => {
    setIsOpen(!isOpen);
    setIsMinimized(false);
  };

  const toggleMinimize = () => {
    setIsMinimized(!isMinimized);
  };

  const handleInputChange = (e) => {
    setInput(e.target.value);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!input.trim()) return;
    
    // Add user message to chat
    const userMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: input
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);
    
    try {
      // Format messages for the API
      const formattedMessages = messages
        .concat(userMessage)
        .map(msg => ({
          role: msg.role,
          content: msg.content
        }));
      
      // Add the assistant's message placeholder
      const assistantMessage = {
        id: Date.now().toString() + '-assistant',
        role: 'assistant',
        content: ''
      };
      
      setMessages(prev => [...prev, assistantMessage]);
      
      // Create EventSource for SSE
      const eventSource = new EventSource(`/api/chat?messages=${encodeURIComponent(JSON.stringify(formattedMessages))}`);
      
      eventSource.onmessage = (event) => {
        if (event.data === '[DONE]') {
          eventSource.close();
          setIsLoading(false);
          return;
        }
        
        try {
          const parsedData = JSON.parse(event.data);
          
          if (parsedData.content) {
            setMessages(prev => 
              prev.map(msg => 
                msg.id === assistantMessage.id 
                  ? { ...msg, content: msg.content + parsedData.content } 
                  : msg
              )
            );
          }
        } catch (e) {
          console.error('Error parsing SSE data:', e);
        }
      };
      
      eventSource.onerror = (error) => {
        console.error('EventSource error:', error);
        eventSource.close();
        setIsLoading(false);
        
        // Add error message if needed
        setMessages(prev => 
          prev.map(msg => 
            msg.id === assistantMessage.id 
              ? { ...msg, content: msg.content || 'Sorry, I encountered an error. Please try again later.' } 
              : msg
          )
        );
      };
    } catch (error) {
      console.error('Error sending message:', error);
      
      // Add error message
      setMessages(prev => [...prev, {
        id: Date.now().toString(),
        role: 'assistant',
        content: 'Sorry, I encountered an error. Please try again later.'
      }]);
      
      setIsLoading(false);
    }
  };

  // Styles
  const chatButtonStyle = {
    position: 'fixed',
    bottom: '20px',
    right: '20px',
    width: '56px',
    height: '56px',
    borderRadius: '50%',
    backgroundColor: '#FF6B6B',
    color: 'white',
    border: 'none',
    boxShadow: '0 2px 10px rgba(0, 0, 0, 0.2)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    cursor: 'pointer',
    zIndex: 1000
  };

  const chatWindowStyle = {
    position: 'fixed',
    bottom: '20px',
    right: '20px',
    width: '350px',
    maxHeight: isMinimized ? '60px' : '500px',
    borderRadius: '10px',
    boxShadow: '0 5px 15px rgba(0, 0, 0, 0.2)',
    backgroundColor: 'white',
    overflow: 'hidden',
    transition: 'max-height 0.3s ease',
    zIndex: 1000
  };

  const chatHeaderStyle = {
    padding: '10px 15px',
    backgroundColor: '#001F3F',
    color: 'white',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderBottom: '1px solid #e0e0e0'
  };

  const chatBodyStyle = {
    height: '350px',
    overflowY: 'auto',
    padding: '15px',
    display: isMinimized ? 'none' : 'block'
  };

  const chatFooterStyle = {
    padding: '10px 15px',
    borderTop: '1px solid #e0e0e0',
    display: isMinimized ? 'none' : 'flex'
  };

  const messageStyle = (isUser) => ({
    maxWidth: '80%',
    padding: '8px 12px',
    borderRadius: '18px',
    marginBottom: '10px',
    wordWrap: 'break-word',
    backgroundColor: isUser ? '#FF6B6B' : '#f1f1f1',
    color: isUser ? 'white' : 'black',
    alignSelf: isUser ? 'flex-end' : 'flex-start'
  });

  return (
    <div>
      {/* Chatbot Button */}
      {!isOpen && (
        <button onClick={toggleChat} style={chatButtonStyle}>
          <i className="bi bi-chat-dots-fill"></i>
        </button>
      )}

      {/* Chatbot Window */}
      {isOpen && (
        <div style={chatWindowStyle}>
          <div style={chatHeaderStyle}>
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <i className="bi bi-robot me-2"></i>
              <span>Event App Assistant</span>
            </div>
            <div>
              <button 
                onClick={toggleMinimize} 
                style={{ background: 'none', border: 'none', color: 'white', marginRight: '5px' }}
              >
                <i className={`bi bi-chevron-${isMinimized ? 'up' : 'down'}`}></i>
              </button>
              <button 
                onClick={toggleChat} 
                style={{ background: 'none', border: 'none', color: 'white' }}
              >
                <i className="bi bi-x-lg"></i>
              </button>
            </div>
          </div>

          <div style={chatBodyStyle}>
            {messages.map((message) => (
              <div 
                key={message.id} 
                style={{ 
                  display: 'flex', 
                  justifyContent: message.role === 'user' ? 'flex-end' : 'flex-start'
                }}
              >
                <div style={messageStyle(message.role === 'user')}>
                  {message.content}
                </div>
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>

          <div style={chatFooterStyle}>
            <form onSubmit={handleSubmit} style={{ display: 'flex', width: '100%' }}>
              <input
                type="text"
                value={input}
                onChange={handleInputChange}
                placeholder="Type your message..."
                style={{ 
                  flex: 1, 
                  padding: '8px 12px', 
                  borderRadius: '20px', 
                  border: '1px solid #ccc',
                  marginRight: '8px'
                }}
                disabled={isLoading}
              />
              <button 
                type="submit" 
                style={{
                  backgroundColor: '#FF6B6B',
                  color: 'white',
                  border: 'none',
                  borderRadius: '50%',
                  width: '36px',
                  height: '36px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  cursor: isLoading ? 'not-allowed' : 'pointer',
                  opacity: isLoading || !input.trim() ? 0.7 : 1
                }}
                disabled={isLoading || !input.trim()}
              >
                <i className="bi bi-send-fill"></i>
              </button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}
</file>

<file path="client/src/components/PaymentForm.js">
// Install required packages
// npm install @stripe/stripe-js @stripe/react-stripe-js

// Create a new file: src/components/PaymentForm.js
import React, { useState } from 'react';
import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';
import axios from 'axios';

const PaymentForm = ({ eventId, registrationData, onSuccess, onError }) => {
  const stripe = useStripe();
  const elements = useElements();
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);

    if (!stripe || !elements) {
      setLoading(false);
      return;
    }

    // Create payment intent on the server
    try {
      const { data: { clientSecret } } = await axios.post(
        'http://localhost:3001/payments/create-intent',
        {
          eventId,
          amount: registrationData.totalAmount * 100, // convert to cents
          email: registrationData.email
        },
        {
          headers: { 
            Authorization: `Bearer ${localStorage.getItem('accessToken')}` 
          }
        }
      );

      // Confirm the payment with Stripe.js
      const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
        payment_method: {
          card: elements.getElement(CardElement),
          billing_details: {
            name: registrationData.fullName,
            email: registrationData.email,
          },
        },
      });

      if (error) {
        onError(error.message);
      } else if (paymentIntent.status === 'succeeded') {
        // Update registration with payment information
        await axios.put(
          `http://localhost:3001/registrations/${registrationData.id}/payment`,
          {
            paymentStatus: 'completed',
            paymentMethod: 'credit_card',
            transactionId: paymentIntent.id
          },
          {
            headers: { 
              Authorization: `Bearer ${localStorage.getItem('accessToken')}` 
            }
          }
        );
        
        onSuccess(paymentIntent);
      }
    } catch (error) {
      onError(error.response?.data?.error || 'Payment processing failed');
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="payment-form">
      <div className="mb-4">
        <label className="form-label">Card Details</label>
        <div className="card-element-container">
          <CardElement 
            options={{
              style: {
                base: {
                  fontSize: '16px',
                  color: '#424770',
                  '::placeholder': {
                    color: '#aab7c4',
                  },
                },
                invalid: {
                  color: '#9e2146',
                },
              },
            }}
          />
        </div>
      </div>
      <button 
        type="submit" 
        className="btn w-100" 
        disabled={!stripe || loading}
        style={{ 
          backgroundColor: "#FF6B6B", 
          color: "white",
          opacity: (!stripe || loading) ? 0.7 : 1
        }}
      >
        {loading ? (
          <>
            <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
            Processing...
          </>
        ) : (
          `Pay $${registrationData.totalAmount.toFixed(2)}`
        )}
      </button>
    </form>
  );
};

export default PaymentForm;
</file>

<file path="client/src/pages/AdminRegistrations.js">
// src/pages/AdminRegistrations.js
import React, { useState, useEffect, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { AuthContext } from '../helpers/AuthContext';
import { format } from 'date-fns';

export default function AdminRegistrations() {
  const [registrations, setRegistrations] = useState([]);
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedEvent, setSelectedEvent] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const { authState } = useContext(AuthContext);
  const navigate = useNavigate();

  // Navy color from your palette
  const primaryColor = "#1A2A56";
  // Coral color from your palette
  const accentColor = "#FF6B6B";

  useEffect(() => {
    // Redirect if not admin
    if (!authState.status || !authState.isAdmin) {
      navigate('/login');
      return;
    }

    const fetchData = async () => {
      setLoading(true);
      setError(null); // Clear previous errors
      try {
        // Fetch all events first
        const eventsResponse = await axios.get('http://localhost:3001/events', {
          headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` }
        });
        setEvents(eventsResponse.data);

        // If we have a specific event selected, fetch registrations for that event
        if (selectedEvent !== 'all' && selectedEvent !== '') {
          const registrationsResponse = await axios.get(
            `http://localhost:3001/registrations/event/${selectedEvent}`,
            { headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` } }
          );
          setRegistrations(registrationsResponse.data);
        } else {
          // Otherwise, fetch all registrations (admin-only endpoint)
          try {
            const registrationsResponse = await axios.get(
              'http://localhost:3001/registrations/all',
              { headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` } }
            );
            setRegistrations(registrationsResponse.data);
          } catch (allError) {
            console.error('Error fetching all registrations:', allError);
            
            // Fallback: Fetch registrations for each event individually
            const allRegistrations = [];
            for (const event of eventsResponse.data) {
              try {
                const eventRegResponse = await axios.get(
                  `http://localhost:3001/registrations/event/${event.id}`,
                  { headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` } }
                );
                allRegistrations.push(...eventRegResponse.data);
              } catch (eventError) {
                console.warn(`Could not fetch registrations for event ${event.id}:`, eventError);
              }
            }
            
            setRegistrations(allRegistrations);
          }
        }
      } catch (err) {
        console.error('Error fetching data:', err);
        setError(`Failed to load registrations: ${err.response?.data?.error || err.message}`);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [authState, navigate, selectedEvent]);

  // Filter registrations based on search query
  const filteredRegistrations = registrations.filter(reg => 
    reg.fullName?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    reg.email?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    (reg.confirmationCode && reg.confirmationCode.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  // Handle check-in status update
  const handleCheckIn = async (registrationId, currentStatus) => {
    try {
      await axios.put(
        `http://localhost:3001/registrations/${registrationId}/check-in`,
        { checkInStatus: !currentStatus },
        { headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` } }
      );
      
      // Update the local state
      setRegistrations(prevRegistrations => 
        prevRegistrations.map(reg => 
          reg.id === registrationId 
            ? { ...reg, checkInStatus: !reg.checkInStatus, checkInTime: new Date() } 
            : reg
        )
      );
    } catch (error) {
      console.error('Error updating check-in status:', error);
      alert('Failed to update check-in status: ' + (error.response?.data?.error || error.message));
    }
  };

  // Handle sending confirmation email
  const handleSendEmail = async (registrationId) => {
    try {
      await axios.post(
        `http://localhost:3001/registrations/${registrationId}/resend-email`,
        {},
        { headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` } }
      );
      alert('Confirmation email sent successfully');
    } catch (error) {
      console.error('Error sending email:', error);
      alert('Failed to send confirmation email: ' + (error.response?.data?.error || error.message));
    }
  };

  if (loading) {
    return (
      <div className="container d-flex justify-content-center align-items-center" style={{ minHeight: "60vh" }}>
        <div className="spinner-border" role="status" style={{ color: accentColor }}>
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="container mt-4 mb-5">
      <div className="card shadow-sm">
        <div className="card-header" style={{ backgroundColor: primaryColor, color: "white" }}>
          <h2 className="mb-0">Registration Management</h2>
        </div>
        <div className="card-body">
          <div className="row mb-4">
            <div className="col-md-6">
              <div className="input-group">
                <input
                  type="text"
                  className="form-control"
                  placeholder="Search by name, email or confirmation code..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
                <button 
                  className="btn" 
                  style={{ backgroundColor: accentColor, color: "white" }}
                >
                  <i className="fas fa-search"></i> Search
                </button>
              </div>
            </div>
            <div className="col-md-6">
              <select 
                className="form-select" 
                value={selectedEvent} 
                onChange={(e) => setSelectedEvent(e.target.value)}
              >
                <option value="all">All Events</option>
                {events.map(event => (
                  <option key={event.id} value={event.id}>{event.title}</option>
                ))}
              </select>
            </div>
          </div>

          {error && (
            <div className="alert alert-danger">{error}</div>
          )}

          <div className="table-responsive">
            <table className="table table-striped table-hover">
              <thead className="table-light">
                <tr>
                  <th>Name</th>
                  <th>Event</th>
                  <th>Contact</th>
                  <th>Tickets</th>
                  <th>Payment Status</th>
                  <th>Registration Date</th>
                  <th>Check-In</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredRegistrations.length > 0 ? (
                  filteredRegistrations.map(registration => {
                    const event = events.find(e => e.id === registration.EventId);
                    return (
                      <tr key={registration.id}>
                        <td>
                          <strong>{registration.fullName}</strong><br />
                          <small className="text-muted">Code: {registration.confirmationCode}</small>
                        </td>
                        <td>{event ? event.title : 'Unknown Event'}</td>
                        <td>
                          {registration.email}<br />
                          {registration.phone}
                        </td>
                        <td>
                          {registration.ticketQuantity}<br />
                          <span className={registration.totalAmount > 0 ? 'text-success' : 'text-secondary'}>
                            {registration.totalAmount > 0 ? `$${parseFloat(registration.totalAmount).toFixed(2)}` : 'Free'}
                          </span>
                        </td>
                        <td>
                          <span className={`badge ${
                            registration.paymentStatus === 'completed' ? 'bg-success' :
                            registration.paymentStatus === 'pending' ? 'bg-warning' :
                            registration.paymentStatus === 'free' ? 'bg-info' : 'bg-danger'
                          }`}>
                            {registration.paymentStatus?.charAt(0).toUpperCase() + registration.paymentStatus?.slice(1) || 'Unknown'}
                          </span>
                        </td>
                        <td>
                          {registration.registrationDate ? format(new Date(registration.registrationDate), 'MMM dd, yyyy') : 'Unknown date'}
                        </td>
                        <td>
                          <div className="form-check form-switch">
                            <input 
                              className="form-check-input" 
                              type="checkbox" 
                              id={`check-in-${registration.id}`}
                              checked={registration.checkInStatus || false}
                              onChange={() => handleCheckIn(registration.id, registration.checkInStatus)}
                              style={{ cursor: 'pointer' }}
                            />
                            <label 
                              className="form-check-label" 
                              htmlFor={`check-in-${registration.id}`}
                              style={{ cursor: 'pointer' }}
                            >
                              {registration.checkInStatus ? 
                                `Checked in: ${registration.checkInTime ? format(new Date(registration.checkInTime), 'h:mm a') : 'Yes'}` : 
                                'Not checked in'}
                            </label>
                          </div>
                        </td>
                        <td>
                          <div className="btn-group">
                            <button 
                              className="btn btn-sm btn-outline-primary"
                              onClick={() => handleSendEmail(registration.id)}
                              title="Send email"
                            >
                              <i className="fas fa-envelope"></i>
                            </button>
                            <button 
                              className="btn btn-sm btn-outline-info"
                              onClick={() => {
                                const details = `
Registration Details:
Name: ${registration.fullName}
Email: ${registration.email}
Phone: ${registration.phone}
Event: ${event ? event.title : 'Unknown'}
Tickets: ${registration.ticketQuantity}
Amount: ${registration.totalAmount > 0 ? `$${parseFloat(registration.totalAmount).toFixed(2)}` : 'Free'}
Status: ${registration.paymentStatus || 'Unknown'}
Code: ${registration.confirmationCode}
                                `;
                                alert(details);
                              }}
                              title="View details"
                            >
                              <i className="fas fa-eye"></i>
                            </button>
                          </div>
                        </td>
                      </tr>
                    );
                  })
                ) : (
                  <tr>
                    <td colSpan="8" className="text-center py-3">
                      No registrations found.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="client/src/pages/AIInsights.js">
import React, { useState, useEffect } from 'react';
import axios from 'axios';

// Define the colors (reusing your color scheme)
const colors = {
  primary: "#FF5A8E", // Vibrant pink
  secondary: "#0D1B40", // Deep navy
  accent: "#41C9E2", // Bright turquoise accent
  dark: "#081029", // Very dark navy, almost black
  light: "#FFF5F8", // Very light pink (off-white with pink tint)
  text: "#0D1B40", // Navy for main text
  textLight: "#6C7A9C", // Muted navy for secondary text
  chart: ["#FF5A8E", "#0D1B40", "#41C9E2", "#FF9E6D", "#8676FF", "#44D7B6"]
};

// Updated background style to match AdminAIReviewsDashboard
const backgroundStyle = {
  background: `linear-gradient(135deg, 
    ${colors.light} 0%, 
    ${colors.accent}10 50%, 
    ${colors.primary}10 100%)`,
  minHeight: '100vh',
  paddingTop: '2rem',
  paddingBottom: '2rem'
};

const AIInsights = () => {
  // State for events list
  const [events, setEvents] = useState([]);
  const [loadingEvents, setLoadingEvents] = useState(true);
  const [eventsError, setEventsError] = useState(null);
  
  // State for selected event insights
  const [selectedEventId, setSelectedEventId] = useState(null);
  const [selectedEventTitle, setSelectedEventTitle] = useState('');
  const [insights, setInsights] = useState([]);
  const [keywords, setKeywords] = useState([]);
  const [topicClusters, setTopicClusters] = useState([]);
  const [loadingInsights, setLoadingInsights] = useState(false);
  const [insightsError, setInsightsError] = useState(null);
  const [activeInsightIndex, setActiveInsightIndex] = useState(0);

  // Fetch all events on component mount
  useEffect(() => {
    const fetchEvents = async () => {
      try {
        setLoadingEvents(true);
        const token = localStorage.getItem('accessToken');
        
        // FIXED: Use the same API endpoint as AdminAIReviewsDashboard
        const response = await axios.get('http://localhost:3001/events', {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        
        console.log('Events Response:', response.data);
        
        // Process event data to include additional metrics like in AdminAIReviewsDashboard
        const processedEvents = await Promise.all(response.data.map(async (event) => {
          // Fetch reviews for this event
          const reviewsResponse = await axios.get(`http://localhost:3001/events/${event.id}`, {
            headers: { Authorization: `Bearer ${token}` }
          });
          
          const reviews = reviewsResponse.data.reviews || [];
          
          // Calculate metrics
          const reviewCount = reviews.length;
          
          let avgRating = 0;
          if (reviewCount > 0) {
            const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
            avgRating = (totalRating / reviewCount).toFixed(1);
          }
          
          // Calculate sentiment counts
          const positiveReviews = reviews.filter(review => review.sentiment === 'positive').length;
          const neutralReviews = reviews.filter(review => review.sentiment === 'neutral').length;
          const negativeReviews = reviews.filter(review => review.sentiment === 'negative').length;
          
          // Calculate sentiment score 
          const sentimentScore = reviewCount > 0 ? Math.round((positiveReviews / reviewCount) * 100) : 0;
          
          return {
            ...event,
            sentiment_positive_count: positiveReviews,
            sentiment_neutral_count: neutralReviews,
            sentiment_negative_count: negativeReviews,
            total_reviews: reviewCount,
            average_rating: parseFloat(avgRating),
            sentimentScore,
            reviewCount
          };
        }));
        
        setEvents(processedEvents);
        setLoadingEvents(false);
      } catch (err) {
        console.error("Error fetching events:", err);
        setEventsError("Failed to load events. Please try again later.");
        setLoadingEvents(false);
      }
    };
    
    fetchEvents();
  }, []);

  // Fetch insights when an event is selected
  useEffect(() => {
    if (!selectedEventId) return;
    
    const fetchInsights = async () => {
      try {
        setLoadingInsights(true);
        setInsightsError(null);
        
        const token = localStorage.getItem('accessToken');
        
        // First try to fetch from the expected endpoint
        try {
          const response = await axios.get(`http://localhost:3001/admin/analytics/reviews/insights/${selectedEventId}`, {
            headers: {
              Authorization: `Bearer ${token}`
            }
          });
          
          console.log('Insights Response:', response.data);
          
          setInsights(response.data.insights || []);
          setKeywords(response.data.keywords || []);
          setTopicClusters(response.data.topicClusters || []);
        } catch (error) {
          console.log('Primary endpoint failed, trying fallback', error);
          
          // Fallback: Generate insights from reviews if the endpoint fails
          const reviewsResponse = await axios.get(`http://localhost:3001/events/${selectedEventId}`, {
            headers: { Authorization: `Bearer ${token}` }
          });
          
          const reviews = reviewsResponse.data.reviews || [];
          
          // Extract keywords from reviews (simplified version)
          const keywords = extractKeywordsFromReviews(reviews);
          
          // Extract topic clusters (simplified version)
          const topicClusters = extractTopicsFromReviews(reviews);
          
          // Generate insights (simplified version)
          const insights = generateInsightsFromReviews(reviews);
          
          setInsights(insights);
          setKeywords(keywords);
          setTopicClusters(topicClusters);
        }
        
        setActiveInsightIndex(0); // Reset to first insight
        setLoadingInsights(false);
      } catch (err) {
        console.error("Error fetching insights:", err);
        setInsightsError("Failed to load insights. Please try again later.");
        setLoadingInsights(false);
      }
    };
    
    fetchInsights();
  }, [selectedEventId]);

  // Helper function to extract keywords from reviews
  const extractKeywordsFromReviews = (reviews) => {
    // Combine all review texts
    const combinedText = reviews.map(r => r.review_text || '').join(' ');
    
    // Simple word frequency counter (excluding common words)
    const commonWords = ['the', 'and', 'a', 'an', 'in', 'on', 'at', 'to', 'for', 'with', 'by', 'was', 'were', 'is', 'are'];
    const words = combinedText.toLowerCase().match(/\b(\w+)\b/g) || [];
    const wordCounts = {};
    
    words.forEach(word => {
      if (word.length > 3 && !commonWords.includes(word)) {
        wordCounts[word] = (wordCounts[word] || 0) + 1;
      }
    });
    
    // Convert to array and sort by frequency
    return Object.entries(wordCounts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 15)
      .map(([term, count]) => ({ term, count }));
  };

  // Helper function to extract topics from reviews
  const extractTopicsFromReviews = (reviews) => {
    // Define common topics to look for
    const topicKeywords = {
      'venue': ['venue', 'location', 'place', 'facility', 'facilities', 'space'],
      'food': ['food', 'meal', 'catering', 'drinks', 'refreshments'],
      'speakers': ['speaker', 'speakers', 'presentation', 'talk', 'speech', 'presenter'],
      'organization': ['organized', 'organization', 'staff', 'planning', 'schedule', 'agenda'],
      'content': ['content', 'materials', 'information', 'knowledge', 'learn', 'learned', 'educational'],
      'networking': ['network', 'networking', 'people', 'contacts', 'connections', 'socializing']
    };
    
    // Count occurrences of keywords for each topic
    const topicCounts = {};
    
    Object.keys(topicKeywords).forEach(topic => {
      topicCounts[topic] = 0;
      
      reviews.forEach(review => {
        const reviewText = (review.review_text || '').toLowerCase();
        topicKeywords[topic].forEach(keyword => {
          if (reviewText.includes(keyword)) {
            topicCounts[topic]++;
          }
        });
      });
    });
    
    // Convert to array and sort by frequency
    return Object.entries(topicCounts)
      .map(([topic, count]) => ({ topic, count }))
      .sort((a, b) => b.count - a.count);
  };

  // Helper function to generate insights from reviews
  const generateInsightsFromReviews = (reviews) => {
    if (reviews.length < 3) {
      return ["Not enough reviews to generate meaningful insights."];
    }
    
    const insights = [];
    
    // Calculate average rating
    const totalRating = reviews.reduce((sum, review) => sum + (review.rating || 0), 0);
    const avgRating = reviews.length > 0 ? (totalRating / reviews.length).toFixed(1) : 0;
    insights.push(`Average rating is ${avgRating} out of 5 stars.`);
    
    // Analyze sentiment
    const positiveReviews = reviews.filter(review => review.sentiment === 'positive').length;
    const sentimentPercent = reviews.length > 0 ? Math.round((positiveReviews / reviews.length) * 100) : 0;
    insights.push(`${sentimentPercent}% of reviews express positive sentiment.`);
    
    // Add more generic insights
    insights.push("Most mentioned aspects include event organization and content quality.");
    
    if (sentimentPercent > 75) {
      insights.push("Overall feedback is very positive. Consider highlighting these strengths in marketing materials.");
    } else if (sentimentPercent < 50) {
      insights.push("Consider addressing common issues mentioned in negative reviews to improve future events.");
    }
    
    return insights;
  };

  // Calculate max for keywords scale
  const maxKeywordCount = keywords.length > 0 
    ? Math.max(...keywords.map(k => k.count)) 
    : 0;
    
  // Calculate max for topics scale  
  const maxTopicCount = topicClusters.length > 0 
    ? Math.max(...topicClusters.map(t => t.count)) 
    : 0;

  // Function to select an event
  const handleSelectEvent = (eventId, eventTitle) => {
    setSelectedEventId(eventId);
    setSelectedEventTitle(eventTitle);
    window.scrollTo(0, 0); // Scroll to top for better UX
  };

  // Function to go back to events list
  const handleBackToEvents = () => {
    setSelectedEventId(null);
    setSelectedEventTitle('');
    setInsights([]);
    setKeywords([]);
    setTopicClusters([]);
  };

  // Loading state for events
  if (loadingEvents) {
    return (
      <div className="d-flex justify-content-center align-items-center p-5">
        <div className="spinner-border" role="status" style={{ color: colors.primary }}>
          <span className="visually-hidden">Loading events...</span>
        </div>
      </div>
    );
  }

  // Error state for events
  if (eventsError) {
    return (
      <div className="alert alert-danger" role="alert">
        <i className="bi bi-exclamation-circle-fill me-2"></i>
        {eventsError}
      </div>
    );
  }

  // No events found
  if (events.length === 0) {
    return (
      <div className="text-center p-4 bg-light rounded">
        <i className="bi bi-calendar-x me-2 fs-1" style={{ color: colors.accent }}></i>
        <p className="lead">No events with analytics data found.</p>
        <p>Events will appear here once they have been created and have received reviews.</p>
      </div>
    );
  }

  // Show insights for selected event
  if (selectedEventId) {
    return (
      <div style={backgroundStyle} className="container-fluid">
        <div className="container">
          <div className="row mb-4">
            <div className="col-12">
              <button 
                className="btn btn-sm btn-outline-secondary mb-3"
                onClick={handleBackToEvents}
              >
                <i className="bi bi-arrow-left me-1"></i> Back to All Events
              </button>
              
              <h4 className="mb-3">{selectedEventTitle}</h4>
            </div>
          </div>
        </div>
        
        <div className="container">
          {/* Loading state for insights */}
          {loadingInsights && (
            <div className="d-flex justify-content-center align-items-center p-5">
              <div className="spinner-border" role="status" style={{ color: colors.primary }}>
                <span className="visually-hidden">Loading insights...</span>
              </div>
            </div>
          )}
          
          {/* Error state for insights */}
          {insightsError && (
            <div className="alert alert-danger" role="alert">
              <i className="bi bi-exclamation-circle-fill me-2"></i>
              {insightsError}
            </div>
          )}
          
          {/* No insights state */}
          {!loadingInsights && !insightsError && insights.length === 0 && (
            <div className="text-center p-4 bg-light rounded">
              <i className="bi bi-robot me-2 fs-1" style={{ color: colors.accent }}></i>
              <p className="lead">Not enough reviews to generate meaningful insights yet.</p>
              <p>AI insights become available when more users submit reviews for this event.</p>
            </div>
          )}
          
          {/* Insights content */}
          {!loadingInsights && !insightsError && insights.length > 0 && (
            <div className="card shadow-sm mb-4">
              <div className="card-header d-flex justify-content-between align-items-center" 
                  style={{ backgroundColor: colors.secondary, color: "white" }}>
                <h5 className="mb-0">
                  <i className="bi bi-lightbulb-fill me-2" style={{ color: colors.accent }}></i>
                  Advanced AI Review Analysis
                </h5>
              </div>
              <div className="card-body p-4">
                {/* Featured Insight */}
                <div className="p-4 mb-4 rounded" style={{ 
                  backgroundColor: "rgba(65, 201, 226, 0.1)", 
                  borderLeft: `4px solid ${colors.accent}` 
                }}>
                  <div className="d-flex align-items-center mb-3">
                    <div className="me-3">
                      <i className="bi bi-braces-asterisk fs-1" style={{ color: colors.accent }}></i>
                    </div>
                    <div>
                      <h5 className="mb-1" style={{ color: colors.secondary }}>Key Insight</h5>
                      <p className="mb-0 fs-5" style={{ color: colors.text }}>
                        {insights[activeInsightIndex] || "No insights available yet."}
                      </p>
                    </div>
                  </div>
                  
                  {/* Insight Navigation */}
                  <div className="d-flex justify-content-between mt-3">
                    <button 
                      className="btn btn-sm" 
                      onClick={() => setActiveInsightIndex(prev => (prev > 0 ? prev - 1 : insights.length - 1))}
                      style={{ 
                        backgroundColor: colors.secondary, 
                        color: "white", 
                        opacity: insights.length > 1 ? 1 : 0.5,
                        cursor: insights.length > 1 ? "pointer" : "not-allowed"
                      }}
                      disabled={insights.length <= 1}
                    >
                      <i className="bi bi-chevron-left me-1"></i> Previous
                    </button>
                    <div style={{ color: colors.textLight }}>
                      {activeInsightIndex + 1} of {insights.length}
                    </div>
                    <button 
                      className="btn btn-sm" 
                      onClick={() => setActiveInsightIndex(prev => (prev < insights.length - 1 ? prev + 1 : 0))}
                      style={{ 
                        backgroundColor: colors.primary, 
                        color: "white",
                        opacity: insights.length > 1 ? 1 : 0.5,
                        cursor: insights.length > 1 ? "pointer" : "not-allowed"
                      }}
                      disabled={insights.length <= 1}
                    >
                      Next <i className="bi bi-chevron-right ms-1"></i>
                    </button>
                  </div>
                </div>
                
                <div className="row">
                  {/* Keywords Analysis */}
                  <div className="col-md-6 mb-4">
                    <div className="card h-100 shadow-sm">
                      <div className="card-header py-3" style={{ backgroundColor: colors.light }}>
                        <h5 className="mb-0" style={{ color: colors.secondary }}>
                          <i className="bi bi-tags-fill me-2" style={{ color: colors.primary }}></i>
                          Key Terms in Reviews
                        </h5>
                      </div>
                      <div className="card-body">
                        {keywords.length > 0 ? (
                          <div>
                            {keywords.slice(0, 8).map((keyword, index) => (
                              <div key={index} className="mb-3">
                                <div className="d-flex justify-content-between mb-1">
                                  <span style={{ color: colors.text, fontWeight: "500" }}>
                                    {keyword.term}
                                  </span>
                                  <span style={{ color: colors.textLight }}>
                                    {keyword.count} mentions
                                  </span>
                                </div>
                                <div className="progress" style={{ height: "12px" }}>
                                  <div 
                                    className="progress-bar" 
                                    role="progressbar" 
                                    style={{ 
                                      width: `${(keyword.count / maxKeywordCount) * 100}%`, 
                                      backgroundColor: colors.chart[index % colors.chart.length],
                                      borderRadius: "6px" 
                                    }} 
                                    aria-valuenow={keyword.count} 
                                    aria-valuemin="0" 
                                    aria-valuemax={maxKeywordCount}
                                  />
                                </div>
                              </div>
                            ))}
                            <p className="text-muted mt-3 small">
                              <i className="bi bi-info-circle me-1"></i>
                              These terms represent the most frequently mentioned concepts in user reviews.
                            </p>
                          </div>
                        ) : (
                          <p className="text-center text-muted py-4">No keyword data available</p>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  {/* Topic Analysis */}
                  <div className="col-md-6 mb-4">
                    <div className="card h-100 shadow-sm">
                      <div className="card-header py-3" style={{ backgroundColor: colors.light }}>
                        <h5 className="mb-0" style={{ color: colors.secondary }}>
                          <i className="bi bi-chat-square-text me-2" style={{ color: colors.primary }}></i>
                          Topic Sentiment Analysis
                        </h5>
                      </div>
                      <div className="card-body">
                        {topicClusters.length > 0 ? (
                          <div>
                            {topicClusters.map((topic, index) => (
                              <div key={index} className="mb-3 p-2 rounded" style={{
                                backgroundColor: index % 2 === 0 ? colors.light : 'white'
                              }}>
                                <div className="d-flex justify-content-between align-items-start mb-1">
                                  <span style={{ 
                                    color: colors.secondary, 
                                    fontWeight: "600",
                                    textTransform: "capitalize" 
                                  }}>
                                    {topic.topic}
                                  </span>
                                  <span className="badge" style={{ 
                                    backgroundColor: colors.chart[index % colors.chart.length],
                                    color: "white" 
                                  }}>
                                    {topic.count} mentions
                                  </span>
                                </div>
                                <div className="progress" style={{ height: "12px" }}>
                                  <div 
                                    className="progress-bar" 
                                    role="progressbar" 
                                    style={{ 
                                      width: `${(topic.count / maxTopicCount) * 100}%`, 
                                      backgroundColor: colors.chart[index % colors.chart.length],
                                      borderRadius: "6px" 
                                    }} 
                                    aria-valuenow={topic.count} 
                                    aria-valuemin="0" 
                                    aria-valuemax={maxTopicCount}
                                  />
                                </div>
                              </div>
                            ))}
                            <p className="text-muted mt-3 small">
                              <i className="bi bi-info-circle me-1"></i>
                              Topics are grouped from keywords to identify common themes in reviews.
                            </p>
                          </div>
                        ) : (
                          <p className="text-center text-muted py-4">No topic data available</p>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* All Insights Panel */}
                <div className="card shadow-sm mt-3">
                  <div className="card-header py-3" style={{ backgroundColor: colors.light }}>
                    <h5 className="mb-0" style={{ color: colors.secondary }}>
                      <i className="bi bi-lightbulb me-2" style={{ color: colors.primary }}></i>
                      All AI-Generated Insights
                    </h5>
                  </div>
                  <div className="card-body">
                    <ul className="list-group list-group-flush">
                      {insights.map((insight, index) => (
                        <li key={index} className="list-group-item border-bottom py-3">
                          <div className="d-flex">
                            <div className="me-3">
                              <span 
                                className="badge rounded-circle p-2"
                                style={{ backgroundColor: colors.chart[index % colors.chart.length] }}
                              >
                                {index + 1}
                              </span>
                            </div>
                            <div style={{ color: colors.text }}>{insight}</div>
                          </div>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }

  // Show list of events with matching header style from AdminAIReviewsDashboard
  return (
    <div style={backgroundStyle} className="container-fluid">
      <div className="container">
        <div className="row mb-5">
          <div className="col-12 text-center">
            <h1 
              style={{ 
                color: colors.secondary, 
                fontWeight: '700',
                fontSize: '2.5rem',
                marginBottom: '0.5rem',
                letterSpacing: '-0.5px',
                textShadow: '1px 1px 2px rgba(13, 27, 64, 0.05)'
              }}
            >
              AI Insights
            </h1>
            <p 
              className="lead text-muted"
              style={{
                fontWeight: '300',
                color: `${colors.textLight}`,
                letterSpacing: '0.5px',
                maxWidth: '600px',
                margin: '0 auto'
              }}
            >
              Transforming event feedback into actionable intelligence
            </p>
          </div>
        </div>
      </div>

      <div className="container">
        <div className="row">
          {events.map((event, index) => {
            // Determine the event details
            const eventId = event.id;
            const eventTitle = event.title || `Event #${eventId}`;
            const reviewCount = event.reviewCount || event.total_reviews || 0;
            const avgRating = event.avgRating || event.average_rating || 0;
            const sentimentScore = event.sentimentScore || calculateSentimentScore(event);
            
            // Check if we have insights data
            const hasInsights = reviewCount > 0;
            const firstInsight = hasInsights ? 
              "Click to view AI-generated insights for this event." : 
              "Not enough reviews to generate insights.";
            
            return (
              <div key={index} className="col-md-6 mb-4">
                <div className="card shadow-sm h-100">
                  <div className="card-header py-2" style={{ backgroundColor: colors.secondary, color: "white" }}>
                    <div className="d-flex justify-content-between align-items-center">
                      <h5 className="mb-0">{eventTitle}</h5>
                      <span className="badge rounded-pill" style={{ backgroundColor: colors.accent }}>
                        {reviewCount} Reviews
                      </span>
                    </div>
                  </div>
                  <div className="card-body">
                    <div className="row mb-3">
                      <div className="col-6 text-center">
                        <div className="p-2 rounded bg-light">
                          <div className="text-muted small">Average Rating</div>
                          <div className="fs-4 fw-bold" style={{ color: colors.primary }}>
                            {avgRating.toFixed(1)}<span className="fs-6">/5</span>
                          </div>
                        </div>
                      </div>
                      <div className="col-6 text-center">
                        <div className="p-2 rounded bg-light">
                          <div className="text-muted small">Sentiment</div>
                          <div className="fs-4 fw-bold" style={{ 
                            color: getSentimentColor(sentimentScore)
                          }}>
                            {sentimentScore}%
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="p-3 rounded mb-3" style={{ 
                      backgroundColor: "rgba(65, 201, 226, 0.1)", 
                      borderLeft: `4px solid ${colors.accent}` 
                    }}>
                      <div className="text-muted small mb-1">AI Insights:</div>
                      <div style={{ color: colors.text }}>
                        {firstInsight}
                      </div>
                    </div>
                    
                    <div className="text-center mt-3">
                      <button 
                        className="btn" 
                        onClick={() => handleSelectEvent(eventId, eventTitle)}
                        style={{ 
                          backgroundColor: colors.primary,
                          color: 'white'
                        }}
                        disabled={reviewCount < 1}
                      >
                        <i className="bi bi-graph-up me-2"></i>
                        View Detailed Insights
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
};

// Helper function to calculate sentiment score
const calculateSentimentScore = (event) => {
  const positive = event.sentiment_positive_count || 0;
  const neutral = event.sentiment_neutral_count || 0;
  const negative = event.sentiment_negative_count || 0;
  const total = positive + neutral + negative;
  
  if (total === 0) return 0;
  
  // Calculate weighted score: positive counts fully, neutral counts as half positive
  return Math.round(((positive + (neutral * 0.5)) / total) * 100);
};

// Helper function to get color based on sentiment score
const getSentimentColor = (score) => {
  if (score >= 80) return "#44D7B6"; // Green
  if (score >= 60) return "#41C9E2"; // Blue
  if (score >= 40) return "#FFD700"; // Yellow
  if (score >= 20) return "#FF9E6D"; // Orange
  return "#FF5A8E"; // Red
};

export default AIInsights;
</file>

<file path="client/src/pages/AIReviewsPage.js">
// src/pages/AIReviewsPage.js - Optimized version with Sequelize integration
import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import 'bootstrap/dist/css/bootstrap.min.css';

// Define the colors
const colors = {
  primary: "#FF5A8E", // Vibrant pink
  secondary: "#0D1B40", // Deep navy
  accent: "#41C9E2", // Bright turquoise accent
  dark: "#081029", // Very dark navy, almost black
  light: "#FFF5F8", // Very light pink (off-white with pink tint)
  text: "#0D1B40", // Navy for main text
  textLight: "#6C7A9C", // Muted navy for secondary text
  chart: ["#FF5A8E", "#0D1B40", "#41C9E2", "#FF9E6D", "#8676FF", "#44D7B6"]
};

// Simple error display component
const ErrorAlert = ({ message }) => (
  <div className="container py-3">
    <div className="alert alert-danger" role="alert">
      <h4 className="alert-heading">Error Loading Data</h4>
      <p>{message || 'An unexpected error occurred. Please try again later.'}</p>
    </div>
  </div>
);

// Loading spinner component
const LoadingSpinner = () => (
  <div className="d-flex justify-content-center my-4">
    <div className="spinner-border" role="status" style={{ color: colors.primary }}>
      <span className="visually-hidden">Loading...</span>
    </div>
  </div>
);

// Event card component
const EventCard = ({ event, selectedEvent, selectEvent }) => (
  <div 
    className="p-3 border-bottom"
    onClick={() => selectEvent(event)}
    role="option"
    tabIndex={0}
    aria-selected={selectedEvent?.id === event.id}
    onKeyDown={(e) => e.key === 'Enter' && selectEvent(event)}
    style={{ 
      cursor: 'pointer',
      backgroundColor: selectedEvent?.id === event.id ? `rgba(255, 90, 142, 0.1)` : 'white',
      borderLeft: selectedEvent?.id === event.id ? `4px solid ${colors.primary}` : '4px solid transparent',
      transition: 'all 0.2s ease'
    }}
  >
    <div className="d-flex justify-content-between align-items-start">
      <div>
        <h4 className="fs-6 mb-1" style={{ color: colors.secondary, fontWeight: '600' }}>
          {event.title}
        </h4>
        <div style={{ fontSize: '0.85rem', color: colors.textLight }}>
          {event.date} • {event.category}
        </div>
      </div>
      <div 
        className="px-2 py-1 rounded-pill" 
        style={{ 
          backgroundColor: colors.light, 
          color: colors.primary,
          fontSize: '0.9rem',
          fontWeight: '600' 
        }}
      >
        {event.avgRating ? event.avgRating.toFixed(1) : 'N/A'} ★
      </div>
    </div>
    
    <div className="d-flex align-items-center mt-2">
      <div 
        className="me-2 flex-grow-1" 
        style={{ 
          height: '6px', 
          backgroundColor: '#e9ecef',
          borderRadius: '3px',
          overflow: 'hidden'
        }}
      >
        <div 
          style={{ 
            width: `${event.sentimentScore || 0}%`, 
            height: '100%', 
            backgroundColor: colors.primary,
            borderRadius: '3px'
          }}
          aria-label={`${event.sentimentScore || 0}% positive sentiment`}
          role="progressbar"
          aria-valuenow={event.sentimentScore || 0}
          aria-valuemin="0"
          aria-valuemax="100"
        ></div>
      </div>
      <span style={{ fontSize: '0.8rem', color: colors.textLight }}>
        {event.sentimentScore || 0}% Positive
      </span>
    </div>
  </div>
);

// Tab Content component
const TabContent = ({ activeTab, selectedEvent }) => {
  if (!selectedEvent) return null;

  switch (activeTab) {
    case 'attendance':
      return <AttendanceChart selectedEvent={selectedEvent} />;
    case 'satisfaction':
      return <SatisfactionChart selectedEvent={selectedEvent} />;
    case 'ratings':
      return <RatingsChart selectedEvent={selectedEvent} />;
    case 'engagement':
      return <EngagementChart selectedEvent={selectedEvent} />;
    case 'reviews':
      return <ReviewsList selectedEvent={selectedEvent} />;
    case 'insights':
      return <AIInsights selectedEvent={selectedEvent} />;
    default:
      return <AttendanceChart selectedEvent={selectedEvent} />;
  }
};

// Attendance Chart component
const AttendanceChart = ({ selectedEvent }) => {
  const [attendanceData, setAttendanceData] = useState([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const fetchAttendanceData = async () => {
      try {
        // In a real implementation, you would fetch this from an API
        // For now, we'll generate sample data
        const data = [
          { day: 'Day 1', attendance: Math.floor(Math.random() * 1000) + 500 },
          { day: 'Day 2', attendance: Math.floor(Math.random() * 1000) + 500 },
          { day: 'Day 3', attendance: Math.floor(Math.random() * 1000) + 500 }
        ];
        setAttendanceData(data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching attendance data:", error);
        setLoading(false);
      }
    };
    
    // Only fetch if we have a selected event
    if (selectedEvent && selectedEvent.id) {
      fetchAttendanceData();
    }
  }, [selectedEvent]);
  
  if (loading) return <LoadingSpinner />;
  if (attendanceData.length === 0) return <div className="text-center p-4">No attendance data available</div>;
  
  const maxAttendance = Math.max(...attendanceData.map(d => d.attendance));
  const sessionLabel = attendanceData[0].day.includes('Day') ? 'Day' : 'Session';
  
  return (
    <div className="tab-pane fade show active" id="attendance-tab">
      <h5 className="mb-3" style={{ color: colors.primary }}>
        Attendance by {sessionLabel}
      </h5>
      <div style={{ height: '300px' }}>
        <div className="p-5 text-center bg-light rounded">
          <div className="d-flex justify-content-around">
            {attendanceData.map((item, index) => (
              <div 
                key={index}
                style={{ 
                  height: `${(item.attendance / maxAttendance * 250)}px`, 
                  width: '40px', 
                  backgroundColor: colors.primary,
                  borderRadius: '3px',
                  display: 'flex',
                  alignItems: 'flex-end',
                  justifyContent: 'center',
                  color: 'white',
                  fontWeight: 'bold',
                  paddingBottom: '5px',
                  fontSize: '0.8rem'
                }}
                role="img"
                aria-label={`${item.day}: ${item.attendance} attendees`}
              >
                {item.attendance}
              </div>
            ))}
          </div>
          <div className="d-flex justify-content-around mt-2">
            {attendanceData.map((item, index) => (
              <div key={index} style={{ width: '40px', textAlign: 'center', fontSize: '0.8rem' }}>
                {item.day}
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

// Satisfaction Chart component
const SatisfactionChart = ({ selectedEvent }) => {
  const [satisfactionData, setSatisfactionData] = useState([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const fetchSatisfactionData = async () => {
      try {
        // Sample data - in real implementation, fetch from API
        const data = [
          { name: 'Very Satisfied', value: 65 },
          { name: 'Satisfied', value: 25 },
          { name: 'Neutral', value: 7 },
          { name: 'Dissatisfied', value: 3 }
        ];
        setSatisfactionData(data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching satisfaction data:", error);
        setLoading(false);
      }
    };
    
    // Only fetch if we have a selected event
    if (selectedEvent && selectedEvent.id) {
      fetchSatisfactionData();
    }
  }, [selectedEvent]);
  
  if (loading) return <LoadingSpinner />;
  if (satisfactionData.length === 0) return <div className="text-center p-4">No satisfaction data available</div>;
  
  return (
    <div className="tab-pane fade show active" id="satisfaction-tab">
      <h5 className="mb-3" style={{ color: colors.primary }}>Satisfaction Distribution</h5>
      <div style={{ height: '300px' }}>
        <div className="text-center">
          <div className="d-inline-block position-relative" style={{ width: '250px', height: '250px' }}>
            <div 
              style={{ 
                width: '250px', 
                height: '250px', 
                borderRadius: '50%', 
                background: `conic-gradient(
                  ${colors.chart[0]} 0% ${satisfactionData[0].value}%, 
                  ${colors.chart[1]} ${satisfactionData[0].value}% ${satisfactionData[0].value + satisfactionData[1].value}%, 
                  ${colors.chart[2]} ${satisfactionData[0].value + satisfactionData[1].value}% ${satisfactionData[0].value + satisfactionData[1].value + satisfactionData[2].value}%, 
                  ${colors.chart[3]} ${satisfactionData[0].value + satisfactionData[1].value + satisfactionData[2].value}% 100%
                )`
              }}
              role="img"
              aria-label="Satisfaction distribution pie chart"
            ></div>
            <div 
              style={{ 
                position: 'absolute', 
                top: '50%', 
                left: '50%', 
                transform: 'translate(-50%, -50%)',
                width: '100px',
                height: '100px',
                borderRadius: '50%',
                backgroundColor: 'white',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontWeight: 'bold',
                color: colors.secondary
              }}
            >
              Satisfaction
            </div>
          </div>
          <div className="mt-3">
            <div className="d-flex justify-content-center flex-wrap">
              {satisfactionData.map((item, index) => (
                <div key={index} className="mx-2 mb-2 d-flex align-items-center">
                  <div 
                    style={{ 
                      width: '15px', 
                      height: '15px', 
                      backgroundColor: colors.chart[index],
                      marginRight: '5px',
                      borderRadius: '3px'
                    }}
                  ></div>
                  <span style={{ fontSize: '0.9rem' }}>{item.name}: {item.value}%</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Ratings Chart component
const RatingsChart = ({ selectedEvent }) => {
  const [ratingBreakdown, setRatingBreakdown] = useState([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const fetchRatingData = async () => {
      try {
        // Sample data - in real implementation, fetch from API
        const data = [
          { category: 'Content', rating: 4.8 },
          { category: 'Speakers', rating: 4.7 },
          { category: 'Venue', rating: 4.6 },
          { category: 'Organization', rating: 4.5 },
          { category: 'Value', rating: 4.7 }
        ];
        setRatingBreakdown(data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching rating data:", error);
        setLoading(false);
      }
    };
    
    // Only fetch if we have a selected event
    if (selectedEvent && selectedEvent.id) {
      fetchRatingData();
    }
  }, [selectedEvent]); // Include selectedEvent in the dependency array
  
  if (loading) return <LoadingSpinner />;
  if (ratingBreakdown.length === 0) return <div className="text-center p-4">No rating breakdown available</div>;
  
  return (
    <div className="tab-pane fade show active" id="ratings-tab">
      <h5 className="mb-3" style={{ color: colors.primary }}>Rating by Category</h5>
      <div style={{ height: '300px' }}>
        <div className="p-3 bg-light rounded">
          {ratingBreakdown.map((item, index) => (
            <div key={index} className="mb-3">
              <div className="d-flex justify-content-between mb-1">
                <span style={{ fontWeight: '500' }}>{item.category}</span>
                <span>{item.rating.toFixed(1)}/5.0</span>
              </div>
              <div 
                className="progress" 
                style={{ height: '25px' }}
              >
                <div 
                  className="progress-bar" 
                  role="progressbar" 
                  style={{ 
                    width: `${(item.rating / 5) * 100}%`, 
                    backgroundColor: colors.secondary,
                    borderRadius: '4px' 
                  }} 
                  aria-valuenow={item.rating} 
                  aria-valuemin="0" 
                  aria-valuemax="5"
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// Engagement Chart component
const EngagementChart = ({ selectedEvent }) => {
  const [engagementData, setEngagementData] = useState([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const fetchEngagementData = async () => {
      try {
        // Sample data - in real implementation, fetch from API
        const data = [
          { time: '9 AM', engagement: 70 },
          { time: '10 AM', engagement: 82 },
          { time: '11 AM', engagement: 93 },
          { time: '12 PM', engagement: 65 },
          { time: '1 PM', engagement: 75 },
          { time: '2 PM', engagement: 85 },
          { time: '3 PM', engagement: 90 },
          { time: '4 PM', engagement: 88 },
          { time: '5 PM', engagement: 72 }
        ];
        setEngagementData(data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching engagement data:", error);
        setLoading(false);
      }
    };
    
    // Only fetch if we have a selected event
    if (selectedEvent && selectedEvent.id) {
      fetchEngagementData();
    }
  }, [selectedEvent]);
  
  if (loading) return <LoadingSpinner />;
  if (engagementData.length === 0) return <div className="text-center p-4">No engagement data available</div>;
  
  return (
    <div className="tab-pane fade show active" id="engagement-tab">
      <h5 className="mb-3" style={{ color: colors.primary }}>Engagement Timeline</h5>
      <div style={{ height: '300px' }}>
        <div className="p-3 bg-light rounded">
          <div 
            style={{ 
              height: '200px', 
              position: 'relative',
              padding: '20px 0'
            }}
          >
            {/* Y-axis */}
            <div 
              style={{ 
                position: 'absolute', 
                left: 0, 
                top: 0, 
                bottom: 0, 
                width: '40px', 
                display: 'flex', 
                flexDirection: 'column',
                justifyContent: 'space-between',
                alignItems: 'flex-end',
                paddingRight: '10px',
                fontSize: '0.8rem',
                color: colors.textLight
              }}
            >
              <div>100%</div>
              <div>75%</div>
              <div>50%</div>
              <div>25%</div>
              <div>0%</div>
            </div>
            
            {/* Chart Area */}
            <div 
              style={{ 
                marginLeft: '40px',
                height: '100%',
                position: 'relative',
                borderLeft: '1px solid #ccc',
                borderBottom: '1px solid #ccc'
              }}
            >
              <svg 
                width="100%" 
                height="100%" 
                style={{ position: 'absolute', top: 0, left: 0 }}
                role="img"
                aria-label="Engagement timeline chart"
              >
                <defs>
                  <linearGradient id="engagementGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                    <stop offset="0%" stopColor={colors.accent} stopOpacity="0.8" />
                    <stop offset="100%" stopColor={colors.accent} stopOpacity="0.1" />
                  </linearGradient>
                </defs>
                
                <path 
                  d={`M 0,${200 - (engagementData[0].engagement / 100 * 200)} 
                      ${engagementData.map((item, i) => 
                        `L ${(i / (engagementData.length - 1)) * 100}%,${200 - (item.engagement / 100 * 200)}`
                      ).join(' ')}`}
                  stroke={colors.accent}
                  strokeWidth="3"
                  fill="none"
                />
                
                <path 
                  d={`M 0,${200 - (engagementData[0].engagement / 100 * 200)} 
                      ${engagementData.map((item, i) => 
                        `L ${(i / (engagementData.length - 1)) * 100}%,${200 - (item.engagement / 100 * 200)}`
                      ).join(' ')}
                      L 100%,200 L 0,200 Z`}
                  fill="url(#engagementGradient)"
                />
              </svg>
              
              {engagementData.map((item, i) => (
                <div 
                  key={i}
                  style={{ 
                    position: 'absolute',
                    left: `${(i / (engagementData.length - 1)) * 100}%`,
                    bottom: `${(item.engagement / 100) * 100}%`,
                    width: '10px',
                    height: '10px',
                    borderRadius: '50%',
                    backgroundColor: colors.accent,
                    border: '2px solid white',
                    transform: 'translate(-50%, 50%)',
                    boxShadow: '0 1px 3px rgba(0,0,0,0.2)',
                    zIndex: 2
                  }}
                  title={`${item.time}: ${item.engagement}%`}
                ></div>
              ))}
            </div>
            
            <div 
              style={{ 
                display: 'flex', 
                marginLeft: '40px',
                justifyContent: 'space-between',
                fontSize: '0.8rem',
                color: colors.textLight
              }}
            >
              {engagementData.map((item, i) => (
                i % 2 === 0 && 
                <div 
                  key={i}
                  style={{ 
                    position: 'relative',
                    textAlign: 'center',
                    width: `${100 / Math.ceil(engagementData.length / 2)}%`
                  }}
                >
                  {item.time}
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Reviews List component
const ReviewsList = ({ selectedEvent }) => {
  const [reviews, setReviews] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    const fetchReviews = async () => {
      try {
        // Fetch reviews from the API
        const response = await axios.get(`/events/${selectedEvent.id}`);
        
        // Check the structure of the response
        console.log("Review response:", response.data);
        
        // Handle different response structures
        let reviewsArray = [];
        if (response.data && response.data.reviews) {
          // If the API returns { reviews: [...] }
          reviewsArray = response.data.reviews;
        } else if (response.data && Array.isArray(response.data)) {
          // If the API returns reviews directly as an array
          reviewsArray = response.data;
        } else if (response.data && response.data.event && response.data.event.Reviews) {
          // If the API returns { event: { Reviews: [...] } }
          reviewsArray = response.data.event.Reviews;
        }
        
        // Ensure we have an array
        if (!Array.isArray(reviewsArray)) {
          console.error("Reviews data is not an array:", reviewsArray);
          reviewsArray = [];
        }
        
        setReviews(reviewsArray);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching reviews:", error);
        setError("Failed to load reviews. Please try again later.");
        setLoading(false);
      }
    };
    
    if (selectedEvent && selectedEvent.id) {
      fetchReviews();
    }
  }, [selectedEvent?.id]);
  
  if (loading) return <LoadingSpinner />;
  if (error) return <div className="text-center p-4 text-danger">{error}</div>;
  if (!reviews || reviews.length === 0) return <div className="text-center p-4">No reviews available for this event</div>;
  
  return (
    <div className="tab-pane fade show active" id="reviews-tab">
      <h5 className="mb-3" style={{ color: colors.primary }}>Top Reviews</h5>
      <div className="bg-light p-3 rounded">
        {reviews.map((review) => (
          <div key={review.id} className="mb-3 p-3 bg-white rounded shadow-sm">
            <div className="d-flex justify-content-between align-items-center mb-2">
              <div className="fw-bold">{review.username}</div>
              <div>
                <span style={{ color: colors.primary, fontWeight: '600' }}>{review.rating} ★</span>
                <span className="ms-2 text-muted" style={{ fontSize: '0.8rem' }}>
                  {new Date(review.createdAt).toLocaleDateString()}
                </span>
              </div>
            </div>
            <p className="mb-0" style={{ fontSize: '0.9rem' }}>{review.review_text}</p>
            {review.admin_response && (
              <div className="mt-2 p-2 border-top">
                <div className="text-muted" style={{ fontSize: '0.8rem' }}>Admin Response:</div>
                <p className="mb-0" style={{ fontSize: '0.9rem' }}>{review.admin_response}</p>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

// AI Insights component

const AIInsights = ({ selectedEvent }) => {
  const [insights, setInsights] = useState([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const fetchInsights = async () => {
      try {
        // In a real implementation, fetch from API
        // For now, generate sample insights based on the event type
        if (selectedEvent && selectedEvent.category) {
          const typeBasedInsights = [
            `Attendees showed highest engagement during sessions on ${selectedEvent.category}`,
            `${Math.floor(Math.random() * 20) + 80}% of attendees rated the networking opportunities as 'excellent' or 'very good'`,
            `Most frequently mentioned keywords in positive reviews: 'organization', 'content', 'speakers'`,
            `Suggestion for improvement: More interactive activities based on feedback analysis`
          ];
          
          setInsights(typeBasedInsights);
        } else {
          setInsights(["No insights available for this event."]);
        }
        setLoading(false);
      } catch (error) {
        console.error("Error fetching AI insights:", error);
        setLoading(false);
      }
    };
    
    // Only fetch if we have a selected event
    if (selectedEvent) {
      fetchInsights();
    }
  }, [selectedEvent]); // Include selectedEvent in the dependency array
  
  return (
    <div className="tab-pane fade show active" id="insights-tab">
      <h5 className="mb-3" style={{ color: colors.primary }}>AI-Generated Insights</h5>
      <div className="bg-light p-3 rounded">
        <div className="p-3 bg-white rounded shadow-sm">
          <ul className="mb-0">
            {insights.map((insight, index) => (
              <li key={index} className="mb-2">{insight}</li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
};

// Key Metrics component
const KeyMetrics = ({ selectedEvent }) => {
  if (!selectedEvent) return null;
  
  // Calculate total attendance (this would come from the API in a real implementation)
  const totalAttendance = selectedEvent.totalAttendance || 
    Math.floor(Math.random() * 3000) + 1000;

  return (
    <div className="row g-3 mb-4">
      <div className="col-md-3 col-sm-6">
        <div 
          className="p-3 rounded text-center h-100" 
          style={{ backgroundColor: `rgba(255, 90, 142, 0.1)` }}
        >
          <div style={{ color: colors.primary, fontSize: '2rem', fontWeight: '700' }}>
            {selectedEvent.avgRating ? selectedEvent.avgRating.toFixed(1) : 'N/A'}
          </div>
          <div style={{ color: colors.secondary, fontSize: '0.9rem', fontWeight: '500' }}>
            Overall Rating
          </div>
          <div style={{ color: colors.primary }} aria-hidden="true">
            {"★".repeat(Math.round(selectedEvent.avgRating || 0))}
          </div>
        </div>
      </div>
      
      <div className="col-md-3 col-sm-6">
        <div 
          className="p-3 rounded text-center h-100" 
          style={{ backgroundColor: `rgba(13, 27, 64, 0.1)` }}
        >
          <div style={{ color: colors.secondary, fontSize: '2rem', fontWeight: '700' }}>
            {selectedEvent.reviewCount || 0}
          </div>
          <div style={{ color: colors.secondary, fontSize: '0.9rem', fontWeight: '500' }}>
            Total Reviews
          </div>
        </div>
      </div>
      
      <div className="col-md-3 col-sm-6">
        <div 
          className="p-3 rounded text-center h-100" 
          style={{ backgroundColor: `rgba(65, 201, 226, 0.1)` }}
        >
          <div style={{ color: colors.accent, fontSize: '2rem', fontWeight: '700' }}>
            {selectedEvent.sentimentScore || 0}%
          </div>
          <div style={{ color: colors.secondary, fontSize: '0.9rem', fontWeight: '500' }}>
            Positive Sentiment
          </div>
        </div>
      </div>
      
      <div className="col-md-3 col-sm-6">
        <div 
          className="p-3 rounded text-center h-100" 
          style={{ backgroundColor: 'rgba(255, 158, 109, 0.1)' }}
        >
          <div style={{ color: '#FF9E6D', fontSize: '2rem', fontWeight: '700' }}>
            {totalAttendance.toLocaleString()}
          </div>
          <div style={{ color: colors.secondary, fontSize: '0.9rem', fontWeight: '500' }}>
            Total Attendance
          </div>
        </div>
      </div>
    </div>
  );
};

const AIReviewsPage = () => {
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('attendance');

  // Fetch events with review data
  useEffect(() => {
    const fetchEvents = async () => {
      try {
        setLoading(true);
        
        // Fetch events from the API
        const response = await axios.get('/events');
        console.log("Events response:", response.data);
        
        if (response.data && Array.isArray(response.data) && response.data.length > 0) {
          // Process each event to add calculated properties
          const enhancedEvents = await Promise.all(response.data.map(async (event) => {
            try {
              console.log(`Processing event ID ${event.id}`);
              
              // Format event date properly
              let formattedDate = event.date;
              try {
                formattedDate = new Date(event.date).toLocaleDateString();
              } catch (dateError) {
                console.warn("Error formatting date:", dateError);
              }
              
              // Default values for metrics
              const enhancedEvent = {
                ...event,
                avgRating: 0,
                reviewCount: 0,
                sentimentScore: 0,
                date: formattedDate
              };
              
              // Try to get reviews and calculate metrics
              try {
                const reviewsResponse = await axios.get(`/events/${event.id}`);
                console.log(`Reviews for event ${event.id}:`, reviewsResponse.data);
                
                // Extract reviews array from various response formats
                let reviews = [];
                if (reviewsResponse.data && reviewsResponse.data.reviews) {
                  reviews = reviewsResponse.data.reviews;
                } else if (reviewsResponse.data && reviewsResponse.data.event && reviewsResponse.data.event.Reviews) {
                  reviews = reviewsResponse.data.event.Reviews;
                }
                
                if (Array.isArray(reviews) && reviews.length > 0) {
                  // Calculate average rating
                  const ratings = reviews.map(review => Number(review.rating)).filter(r => !isNaN(r));
                  if (ratings.length > 0) {
                    enhancedEvent.avgRating = ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length;
                  }
                  
                  // Calculate sentiment score
                  const positiveReviews = reviews.filter(review => 
                    review.sentiment === 'positive'
                  ).length;
                  
                  enhancedEvent.reviewCount = reviews.length;
                  enhancedEvent.sentimentScore = reviews.length > 0 
                    ? Math.round((positiveReviews / reviews.length) * 100) 
                    : 0;
                }
              } catch (reviewsError) {
                console.error(`Error fetching reviews for event ${event.id}:`, reviewsError);
                // Keep default values set above
              }
              
              return enhancedEvent;
            } catch (eventError) {
              console.error(`Error processing event ${event.id}:`, eventError);
              return {
                ...event,
                avgRating: 0,
                reviewCount: 0,
                sentimentScore: 0,
                date: event.date
              };
            }
          }));
          
          console.log("Enhanced events:", enhancedEvents);
          setEvents(enhancedEvents);
          
          if (enhancedEvents.length > 0) {
            setSelectedEvent(enhancedEvents[0]); // Set first event as default
          }
        } else {
          console.warn("No events found or invalid format:", response.data);
          setEvents([]);
        }
        
        setLoading(false);
      } catch (err) {
        console.error('Error fetching events:', err);
        setError('Failed to load events. Please try again later.');
        setLoading(false);
      }
    };

    fetchEvents();
  }, []);

  // Handle event selection
  const selectEvent = useCallback((event) => {
    setSelectedEvent(event);
  }, []);

  // Handle tab changes
  const handleTabChange = useCallback((tabId) => {
    setActiveTab(tabId);
  }, []);

  if (loading) {
    return <LoadingSpinner />;
  }

  if (error) {
    return <ErrorAlert message={error} />;
  }

  return (
    <div className="container-fluid py-4">
      <div className="row">
        <div className="col-lg-3">
          <div className="card shadow-sm mb-4">
            <div className="card-header py-3" style={{ backgroundColor: colors.secondary, color: 'white' }}>
              <h2 className="m-0 fs-5">Event Reviews</h2>
            </div>
            <div className="card-body p-0">
              <div className="list-group list-group-flush" role="listbox">
                {events.length > 0 ? (
                  events.map(event => (
                    <EventCard 
                      key={event.id}
                      event={event}
                      selectedEvent={selectedEvent}
                      selectEvent={selectEvent}
                    />
                  ))
                ) : (
                  <div className="p-4 text-center">
                    <p className="text-muted">No events available</p>
                  </div>
                )}
              </div>
            </div>
          </div>
          
          <div className="card shadow-sm">
            <div className="card-header" style={{ backgroundColor: colors.secondary, color: 'white' }}>
              <h3 className="m-0 fs-5">About AI Reviews</h3>
            </div>
            <div className="card-body">
              <p style={{ fontSize: '0.9rem', color: colors.textLight }}>
                Our AI analyzes event reviews, attendance data, and engagement metrics to provide comprehensive insights. This helps:
              </p>
              <ul style={{ fontSize: '0.9rem', color: colors.textLight }}>
                <li className="mb-2">Event organizers understand attendee satisfaction</li>
                <li className="mb-2">Identify improvement opportunities through sentiment analysis</li>
                <li className="mb-2">Track engagement patterns throughout events</li>
                <li className="mb-2">Highlight the most impactful aspects of each event</li>
              </ul>
            </div>
          </div>
        </div>
        
        <div className="col-lg-9">
          {selectedEvent ? (
            <>
              <div className="card shadow-sm mb-4">
                <div className="card-header d-flex justify-content-between align-items-center" style={{ backgroundColor: colors.light }}>
                  <h2 className="fs-4 m-0" style={{ color: colors.secondary, fontWeight: '600' }}>
                    {selectedEvent.title}
                  </h2>
                  <span className="badge" style={{ backgroundColor: colors.primary, color: 'white' }}>
                    {selectedEvent.category}
                  </span>
                </div>
                <div className="card-body">
                  <KeyMetrics selectedEvent={selectedEvent} />
                  
                  <ul className="nav nav-tabs mb-4">
                    <li className="nav-item">
                      <button 
                        className={`nav-link ${activeTab === 'attendance' ? 'active' : ''}`}
                        onClick={() => handleTabChange('attendance')}
                        style={{ 
                          color: activeTab === 'attendance' ? colors.primary : colors.textLight,
                          fontWeight: activeTab === 'attendance' ? '600' : '400'
                        }}
                      >
                        Attendance
                      </button>
                    </li>
                    <li className="nav-item">
                      <button 
                        className={`nav-link ${activeTab === 'satisfaction' ? 'active' : ''}`}
                        onClick={() => handleTabChange('satisfaction')}
                        style={{ 
                          color: activeTab === 'satisfaction' ? colors.primary : colors.textLight,
                          fontWeight: activeTab === 'satisfaction' ? '600' : '400'
                        }}
                      >
                        Satisfaction
                      </button>
                    </li>
                    <li className="nav-item">
                      <button 
                        className={`nav-link ${activeTab === 'ratings' ? 'active' : ''}`}
                        onClick={() => handleTabChange('ratings')}
                        style={{ 
                          color: activeTab === 'ratings' ? colors.primary : colors.textLight,
                          fontWeight: activeTab === 'ratings' ? '600' : '400'
                        }}
                      >
                        Ratings
                      </button>
                    </li>
                    <li className="nav-item">
                      <button 
                        className={`nav-link ${activeTab === 'engagement' ? 'active' : ''}`}
                        onClick={() => handleTabChange('engagement')}
                        style={{ 
                          color: activeTab === 'engagement' ? colors.primary : colors.textLight,
                          fontWeight: activeTab === 'engagement' ? '600' : '400'
                        }}
                      >
                        Engagement
                      </button>
                    </li>
                    <li className="nav-item">
                      <button 
                        className={`nav-link ${activeTab === 'reviews' ? 'active' : ''}`}
                        onClick={() => handleTabChange('reviews')}
                        style={{ 
                          color: activeTab === 'reviews' ? colors.primary : colors.textLight,
                          fontWeight: activeTab === 'reviews' ? '600' : '400'
                        }}
                      >
                        Reviews
                      </button>
                    </li>
                    <li className="nav-item">
                      <button 
                        className={`nav-link ${activeTab === 'insights' ? 'active' : ''}`}
                        onClick={() => handleTabChange('insights')}
                        style={{ 
                          color: activeTab === 'insights' ? colors.primary : colors.textLight,
                          fontWeight: activeTab === 'insights' ? '600' : '400'
                        }}
                      >
                        AI Insights
                      </button>
                    </li>
                  </ul>
                  
                  <TabContent 
                    activeTab={activeTab} 
                    selectedEvent={selectedEvent} 
                  />
                </div>
              </div>
            </>
          ) : (
            <div className="card shadow-sm">
              <div className="card-body text-center p-5">
                <p className="text-muted">Please select an event to view analytics</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
export default AIReviewsPage;
</file>

<file path="client/src/pages/EventPersonalization.js">
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';

const EventPersonalization = () => {
  const navigate = useNavigate();
  const [interests, setInterests] = useState([]);
  const [selectedInterests, setSelectedInterests] = useState([]);
  const [recommendedEvents, setRecommendedEvents] = useState([]);
  const [loading, setLoading] = useState(false);

  // Color scheme
  const colors = {
    primary: "#FF5A8E", // Vibrant pink
    secondary: "#0D1B40", // Deep navy
    accent: "#41C9E2", // Bright turquoise accent
    dark: "#081029", // Very dark navy, almost black
    light: "#FFF5F8", // Very light pink (off-white with pink tint)
    text: "#0D1B40", // Navy for main text
    textLight: "#6C7A9C" // Muted navy for secondary text
  };

  // Initialize interests categories
  useEffect(() => {
    const interestCategories = [
      { id: 1, name: 'Technology', icon: '💻', color: '#4285F4' },
      { id: 2, name: 'Arts & Culture', icon: '🎨', color: '#EA4335' },
      { id: 3, name: 'Business', icon: '💼', color: '#FBBC05' },
      { id: 4, name: 'Sports', icon: '⚽', color: '#34A853' },
      { id: 5, name: 'Food & Drinks', icon: '🍲', color: '#FF9900' },
      { id: 6, name: 'Music', icon: '🎵', color: '#8428F8' },
      { id: 7, name: 'Education', icon: '📚', color: '#1DA1F2' },
      { id: 8, name: 'Health', icon: '🧘', color: '#25D366' }
    ];
    setInterests(interestCategories);
  }, []);

  // Toggle selection of interests
  const toggleInterest = (interestId) => {
    setSelectedInterests(prev => {
      if (prev.includes(interestId)) {
        return prev.filter(id => id !== interestId);
      } else {
        return [...prev, interestId];
      }
    });
  };

  // Generate AI recommendations
  const getRecommendations = () => {
    if (selectedInterests.length === 0) return;
    
    setLoading(true);
    
    // Simulate API call delay
    setTimeout(() => {
      // Mock data for recommended events
      const mockEvents = [
        {
          id: 1,
          title: "Tech Summit 2025",
          date: "April 15, 2025",
          time: "9:00 AM",
          location: "San Francisco, CA",
          category: "Technology",
          description: "Join the world's leading technology conference where startups compete and industry leaders share insights.",
          match: 98
        },
        {
          id: 2,
          title: "Modern Art Exhibition",
          date: "April 18, 2025",
          time: "10:00 AM",
          location: "New York, NY",
          category: "Arts & Culture",
          description: "Experience contemporary art from renowned international artists exploring the intersection of technology and creativity.",
          match: 92
        },
        {
          id: 3,
          title: "Business Leadership Forum",
          date: "April 25, 2025",
          time: "1:00 PM",
          location: "Chicago, IL",
          category: "Business",
          description: "Learn effective leadership strategies from top executives and connect with business professionals.",
          match: 87
        },
        {
          id: 4,
          title: "Global Music Festival",
          date: "May 10, 2025",
          time: "5:00 PM",
          location: "Austin, TX",
          category: "Music",
          description: "A weekend celebration featuring artists from around the world across all music genres.",
          match: 95
        }
      ];
      
      setRecommendedEvents(mockEvents);
      setLoading(false);
    }, 1500);
  };

  return (
    <div style={{ 
      fontFamily: "'Inter', 'Segoe UI', Roboto, sans-serif",
      color: colors.text,
      background: colors.light,
      minHeight: '100vh'
    }}>
      {/* Header */}
      <div style={{ 
        background: `linear-gradient(90deg, ${colors.secondary}, ${colors.primary})`,
        padding: '1.5rem 0',
        color: 'white'
      }}>
        <div className="container">
          <div className="d-flex justify-content-between align-items-center">
            <h2 className="m-0" style={{ fontWeight: '700' }}>EventAI</h2>
            <button 
              className="btn" 
              onClick={() => navigate('/')}
              style={{ 
                backgroundColor: 'rgba(255, 255, 255, 0.2)',
                color: 'white',
                borderRadius: '8px'
              }}
            >
              Back to Home
            </button>
          </div>
        </div>
      </div>

      <div className="container py-5">
        {/* Page Title */}
        <div className="text-center mb-5">
          <h1 className="display-4 fw-bold mb-3" style={{ color: colors.secondary }}>
            Event <span style={{ color: colors.primary }}>Personalization</span>
          </h1>
          <p className="lead mb-0" style={{ color: colors.textLight, maxWidth: '800px', margin: '0 auto' }}>
            Let AI recommend events that match your interests and preferences
          </p>
        </div>

        {/* Interest Selection */}
        <div className="card shadow-sm mb-5">
          <div className="card-body p-4">
            <h3 className="mb-4" style={{ color: colors.secondary }}>Select Your Interests</h3>
            <div className="row g-3 mb-4">
              {interests.map(interest => (
                <div key={interest.id} className="col-md-3 col-sm-6">
                  <div 
                    className="d-flex align-items-center p-3"
                    style={{ 
                      borderRadius: '10px',
                      backgroundColor: selectedInterests.includes(interest.id) ? interest.color : 'white',
                      color: selectedInterests.includes(interest.id) ? 'white' : colors.text,
                      border: `1px solid ${selectedInterests.includes(interest.id) ? interest.color : '#e9ecef'}`,
                      cursor: 'pointer',
                      transition: 'all 0.2s',
                      boxShadow: selectedInterests.includes(interest.id) ? '0 4px 8px rgba(0,0,0,0.1)' : 'none'
                    }}
                    onClick={() => toggleInterest(interest.id)}
                  >
                    <span className="me-2" style={{ fontSize: '1.5rem' }}>{interest.icon}</span>
                    <span style={{ fontWeight: '500' }}>{interest.name}</span>
                  </div>
                </div>
              ))}
            </div>
            
            <div className="text-center">
              <button 
                className="btn btn-lg"
                onClick={getRecommendations}
                disabled={selectedInterests.length === 0 || loading}
                style={{ 
                  backgroundColor: colors.primary,
                  color: 'white',
                  opacity: selectedInterests.length === 0 ? 0.7 : 1,
                  fontWeight: '600',
                  padding: '0.75rem 2.5rem',
                  borderRadius: '10px',
                  transition: 'all 0.3s'
                }}
              >
                {loading ? (
                  <>
                    <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    Generating Recommendations...
                  </>
                ) : (
                  'Get Personalized Recommendations'
                )}
              </button>
            </div>
          </div>
        </div>

        {/* User Preference Analysis */}
        <div className="card shadow-sm mb-5">
          <div className="card-body p-4">
            <h3 className="mb-4" style={{ color: colors.secondary }}>How AI Powers Your Recommendations</h3>
            
            <div className="row mb-4">
              <div className="col-md-6">
                <h4 style={{ color: colors.primary, fontSize: '1.25rem' }}>Personalized Event Matching</h4>
                <p>Our AI analyzes your selected interests and preferences to find events that align perfectly with what you enjoy. The matching process considers multiple factors:</p>
                <ul>
                  <li>Interest category alignment</li>
                  <li>Event popularity within your preference profile</li>
                  <li>Historical event attendance patterns</li>
                  <li>Content relevance and semantic matching</li>
                </ul>
              </div>
              <div className="col-md-6">
                <div className="card shadow-sm h-100">
                  <div className="card-body">
                    <div className="d-flex align-items-center justify-content-between mb-4">
                      <div>
                        <h5 style={{ color: colors.secondary, fontSize: '1.1rem' }}>Recommendation Accuracy</h5>
                        <p className="text-muted mb-0" style={{ fontSize: '0.9rem' }}>95% matching precision</p>
                      </div>
                      <div 
                        style={{ 
                          width: '80px', 
                          height: '80px', 
                          borderRadius: '50%',
                          background: `conic-gradient(${colors.primary} 95%, #e9ecef 0)`,
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                        }}
                      >
                        <div style={{ 
                          width: '70px', 
                          height: '70px', 
                          borderRadius: '50%',
                          background: 'white',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontSize: '1.25rem',
                          fontWeight: 'bold',
                          color: colors.primary
                        }}>
                          95%
                        </div>
                      </div>
                    </div>
                    
                    <div className="progress mb-3" style={{ height: '25px' }}>
                      <div 
                        className="progress-bar" 
                        role="progressbar" 
                        style={{ 
                          width: '85%', 
                          backgroundColor: `${colors.primary}`,
                          borderRadius: '4px' 
                        }} 
                        aria-valuenow="85" 
                        aria-valuemin="0" 
                        aria-valuemax="100"
                      >
                        Technology Match 85%
                      </div>
                    </div>
                    
                    <div className="progress mb-3" style={{ height: '25px' }}>
                      <div 
                        className="progress-bar" 
                        role="progressbar" 
                        style={{ 
                          width: '78%', 
                          backgroundColor: colors.secondary,
                          borderRadius: '4px' 
                        }} 
                        aria-valuenow="78" 
                        aria-valuemin="0" 
                        aria-valuemax="100"
                      >
                        Event Relevance 78%
                      </div>
                    </div>
                    
                    <div className="progress" style={{ height: '25px' }}>
                      <div 
                        className="progress-bar" 
                        role="progressbar" 
                        style={{ 
                          width: '92%', 
                          backgroundColor: colors.accent,
                          borderRadius: '4px' 
                        }} 
                        aria-valuenow="92" 
                        aria-valuemin="0" 
                        aria-valuemax="100"
                      >
                        Interest Alignment 92%
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <h4 style={{ color: colors.primary, fontSize: '1.25rem' }}>Benefits of AI-Powered Event Discovery</h4>
            <div className="row mt-3">
              <div className="col-md-4 mb-3">
                <div className="card h-100" style={{ backgroundColor: colors.light }}>
                  <div className="card-body text-center">
                    <div style={{ fontSize: '2.5rem', color: colors.primary, marginBottom: '1rem' }}>
                      🎯
                    </div>
                    <h5 style={{ color: colors.secondary }}>Precision Matching</h5>
                    <p className="mb-0" style={{ color: colors.textLight }}>
                      Our AI algorithm precisely identifies events that match your specific interests
                    </p>
                  </div>
                </div>
              </div>
              
              <div className="col-md-4 mb-3">
                <div className="card h-100" style={{ backgroundColor: colors.light }}>
                  <div className="card-body text-center">
                    <div style={{ fontSize: '2.5rem', color: colors.primary, marginBottom: '1rem' }}>
                      🧠
                    </div>
                    <h5 style={{ color: colors.secondary }}>Continuous Learning</h5>
                    <p className="mb-0" style={{ color: colors.textLight }}>
                      The recommendations improve over time as you interact with events
                    </p>
                  </div>
                </div>
              </div>
              
              <div className="col-md-4 mb-3">
                <div className="card h-100" style={{ backgroundColor: colors.light }}>
                  <div className="card-body text-center">
                    <div style={{ fontSize: '2.5rem', color: colors.primary, marginBottom: '1rem' }}>
                      🔍
                    </div>
                    <h5 style={{ color: colors.secondary }}>Discovery</h5>
                    <p className="mb-0" style={{ color: colors.textLight }}>
                      Find events you might otherwise miss that perfectly match your interests
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Recommended Events Section */}
        {recommendedEvents.length > 0 && (
          <div className="card shadow-sm mb-5">
            <div className="card-body p-4">
              <h3 className="mb-4" style={{ color: colors.secondary }}>Recommended Events for You</h3>
              <div className="row">
                {recommendedEvents.map(event => (
                  <div key={event.id} className="col-lg-6 mb-4">
                    <div className="card h-100 shadow-sm">
                      <div className="card-header d-flex justify-content-between align-items-start" style={{ backgroundColor: colors.light }}>
                        <h5 className="mb-0">{event.title}</h5>
                        <span className="badge" style={{ backgroundColor: colors.primary, color: 'white' }}>
                          {event.match}% Match
                        </span>
                      </div>
                      <div className="card-body">
                        <div className="mb-3">
                          <div style={{ fontSize: '0.9rem', color: colors.textLight }}>
                            <i className="bi bi-calendar me-2"></i>{event.date} at {event.time}
                          </div>
                          <div style={{ fontSize: '0.9rem', color: colors.textLight }}>
                            <i className="bi bi-geo-alt me-2"></i>{event.location}
                          </div>
                          <div className="mt-1">
                            <span className="badge" style={{ backgroundColor: `${colors.light}`, color: colors.primary, border: `1px solid ${colors.primary}` }}>
                              {event.category}
                            </span>
                          </div>
                        </div>
                        <p>{event.description}</p>
                      </div>
                      <div className="card-footer bg-white border-top-0">
                        <button className="btn w-100" style={{ backgroundColor: colors.secondary, color: 'white' }}>
                          View Event Details
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* AI Match Explainer */}
        <div className="card shadow-sm mb-5" style={{ backgroundColor: colors.secondary, color: 'white' }}>
          <div className="card-body p-4">
            <div className="d-flex align-items-center mb-3">
              <div style={{ 
                width: '50px', 
                height: '50px', 
                borderRadius: '50%', 
                backgroundColor: 'rgba(255, 255, 255, 0.2)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: '1.5rem',
                marginRight: '15px'
              }}>
                <i className="bi bi-lightbulb"></i>
              </div>
              <div>
                <h4 className="mb-0">How AI Match Scores Work</h4>
                <p className="mb-0" style={{ opacity: 0.8 }}>Understanding your personalized recommendations</p>
              </div>
            </div>
            
            <p>Our AI analyzes multiple factors to generate match scores for each event:</p>
            
            <div className="row">
              <div className="col-md-6">
                <div className="mb-3 p-3" style={{ backgroundColor: 'rgba(255, 255, 255, 0.1)', borderRadius: '8px' }}>
                  <h5 style={{ color: colors.primary }}>Interest Correlation</h5>
                  <p className="mb-0" style={{ fontSize: '0.9rem', opacity: 0.9 }}>
                    How closely an event aligns with your selected interests, including category matches and topic relevance.
                  </p>
                </div>
              </div>
              <div className="col-md-6">
                <div className="mb-3 p-3" style={{ backgroundColor: 'rgba(255, 255, 255, 0.1)', borderRadius: '8px' }}>
                  <h5 style={{ color: colors.primary }}>Attendance Patterns</h5>
                  <p className="mb-0" style={{ fontSize: '0.9rem', opacity: 0.9 }}>
                    Events similar to ones you've previously attended or expressed interest in are ranked higher.
                  </p>
                </div>
              </div>
              <div className="col-md-6">
                <div className="mb-3 p-3" style={{ backgroundColor: 'rgba(255, 255, 255, 0.1)', borderRadius: '8px' }}>
                  <h5 style={{ color: colors.primary }}>Community Feedback</h5>
                  <p className="mb-0" style={{ fontSize: '0.9rem', opacity: 0.9 }}>
                    Ratings and reviews from users with similar interests influence match scores.
                  </p>
                </div>
              </div>
              <div className="col-md-6">
                <div className="mb-3 p-3" style={{ backgroundColor: 'rgba(255, 255, 255, 0.1)', borderRadius: '8px' }}>
                  <h5 style={{ color: colors.primary }}>Content Analysis</h5>
                  <p className="mb-0" style={{ fontSize: '0.9rem', opacity: 0.9 }}>
                    AI examines event descriptions and content to identify matches with your interest keywords.
                  </p>
                </div>
              </div>
            </div>
            
            <p className="mt-3 text-center" style={{ opacity: 0.8 }}>
              A match score of 90%+ indicates an exceptional fit with your interests and preferences.
            </p>
          </div>
        </div>
      </div>

      {/* Footer */}
      <div style={{ 
        backgroundColor: colors.secondary,
        color: 'white',
        padding: '2rem 0',
        textAlign: 'center'
      }}>
        <div className="container">
          <p className="mb-1">© 2025 EventAI. All rights reserved.</p>
          <p className="mb-0" style={{ color: 'rgba(255,255,255,0.7)' }}>
            Powered by advanced artificial intelligence for personalized event experiences.
          </p>
        </div>
      </div>
    </div>
  );
};

export default EventPersonalization;
</file>

<file path="client/src/pages/ForgotPassword.js">
import React, { useState, useEffect } from "react";
import axios from "axios";
import { Link } from "react-router-dom";
import { FaEnvelope, FaArrowLeft } from "react-icons/fa";
import "bootstrap/dist/css/bootstrap.min.css";

// Theme colors - matching the login style
const theme = {
  primary: "#4361ee",
  secondary: "#3f37c9",
  success: "#4cc9f0",
  danger: "#f72585",
  light: "#f8f9fa",
  dark: "#212529",
  cardBg: "#ffffff",
  inputBg: "#f8f9fa",
};

function ForgotPassword() {
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState(null);
  const [loading, setLoading] = useState(false);
  const [submitted, setSubmitted] = useState(false);

  // Animation mounting effect
  const [mounted, setMounted] = useState(false);
  useEffect(() => {
    setMounted(true);
  }, []);

  const validateEmail = (email) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!email.trim()) {
      setMessage({ text: "Email address is required", type: "danger" });
      return;
    }
    
    if (!validateEmail(email.trim())) {
      setMessage({ text: "Please enter a valid email address", type: "danger" });
      return;
    }
    
    setLoading(true);
    setMessage(null);
    
    try {
      const { data } = await axios.post("http://localhost:3001/auth/forgot-password", { 
        email: email.trim() 
      });
      
      setMessage({ text: data.message, type: "success" });
      setSubmitted(true);
    } catch (error) {
      const errorMessage = error.response?.data?.error || 
        "An error occurred. Please try again later.";
      setMessage({ text: errorMessage, type: "danger" });
      console.error("Password reset request error:", error);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div className="container d-flex justify-content-center align-items-center min-vh-100" 
      style={{ 
        background: `linear-gradient(135deg, ${theme.light} 0%, ${theme.light}ee 100%)`,
        padding: "20px"
      }}>
      <div 
        className={`card shadow-lg p-4 col-lg-4 col-md-6 col-sm-10 col-12 ${mounted ? 'animate-in' : ''}`}
        style={{ 
          backgroundColor: theme.cardBg,
          borderRadius: "12px",
          border: "none",
          boxShadow: "0 12px 24px rgba(0,0,0,0.1)",
          transition: "all 0.3s ease-in-out",
          opacity: mounted ? 1 : 0,
          transform: mounted ? "translateY(0)" : "translateY(20px)"
        }}
      >
        {/* Back to Login Button */}
        <div className="text-start mb-3">
          <Link 
            to="/login" 
            className="btn btn-sm d-inline-flex align-items-center"
            style={{ 
              color: theme.primary,
              fontWeight: "500",
              padding: "6px 12px",
              borderRadius: "6px",
              backgroundColor: `${theme.primary}10`,
              transition: "all 0.2s ease"
            }}
          >
            <FaArrowLeft size={14} className="me-2" />
            Back to Login
          </Link>
        </div>
        
        <div className="text-center mb-4">
          <h1 className="h3 mb-3 fw-bold" style={{ color: theme.dark }}>
            {submitted ? "Check Your Email" : "Forgot Password"}
          </h1>
          <div className="small text-muted">
            {submitted 
              ? "If your email exists in our system, you will receive a reset link shortly." 
              : "Enter your email address to receive a password reset link"}
          </div>
        </div>

        {message && (
          <div 
            className={`alert alert-${message.type} d-flex align-items-center`}
            role="alert"
            style={{ 
              backgroundColor: message.type === "danger" ? `${theme.danger}15` : `${theme.success}15`,
              color: message.type === "danger" ? theme.danger : theme.success,
              border: `1px solid ${message.type === "danger" ? theme.danger : theme.success}22`,
              borderRadius: "8px"
            }}
          >
            <div>{message.text}</div>
          </div>
        )}

        {!submitted ? (
          <form onSubmit={handleSubmit}>
            {/* Email Field with Icon */}
            <div className="mb-4">
              <label className="form-label small fw-bold" style={{ color: theme.dark }}>
                Email Address
              </label>
              <div className="input-group">
                <span 
                  className="input-group-text"
                  style={{ 
                    backgroundColor: theme.primary,
                    borderColor: theme.primary,
                    color: "white"
                  }}
                >
                  <FaEnvelope />
                </span>
                <input
                  type="email"
                  className="form-control"
                  placeholder="Enter your email address"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  style={{ 
                    backgroundColor: theme.inputBg,
                    borderColor: "#dee2e6",
                    fontSize: "0.95rem",
                    padding: "0.75rem 0.75rem",
                  }}
                  autoFocus
                  required
                />
              </div>
              <div className="small text-muted mt-2">
                We'll send instructions to reset your password
              </div>
            </div>

            <button 
              className="btn w-100 mb-3" 
              type="submit" 
              disabled={loading}
              style={{ 
                backgroundColor: theme.primary,
                color: "white",
                padding: "0.75rem",
                borderRadius: "6px",
                fontWeight: "500",
                border: "none",
                transition: "all 0.2s ease",
                opacity: loading ? 0.8 : 1
              }}
            >
              {loading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                  <span>Sending...</span>
                </>
              ) : (
                "Reset Password"
              )}
            </button>
          </form>
        ) : (
          <div className="text-center">
            <div className="mb-4 p-3" style={{ 
              backgroundColor: `${theme.success}10`, 
              borderRadius: "8px", 
              color: theme.dark 
            }}>
              <p>We've sent reset instructions to: <strong>{email}</strong></p>
              <p className="mb-0">Please check your inbox and spam folder.</p>
            </div>
            
            <Link 
              to="/login" 
              className="btn w-100" 
              style={{ 
                backgroundColor: theme.primary,
                color: "white",
                padding: "0.75rem",
                borderRadius: "6px",
                fontWeight: "500",
                border: "none",
                transition: "all 0.2s ease"
              }}
            >
              Return to Login
            </Link>
          </div>
        )}

        <div className="text-center mt-3">
          <span className="small text-muted">Remember your password? </span>
          <Link 
            to="/login" 
            className="small text-decoration-none fw-bold"
            style={{ color: theme.primary }}
          >
            Sign In
          </Link>
        </div>
      </div>

      <style jsx>{`
        .animate-in {
          animation: fadeInUp 0.5s ease-out forwards;
        }
        
        @keyframes fadeInUp {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        .form-control:focus, .btn:focus {
          box-shadow: 0 0 0 0.25rem ${theme.primary}30;
          border-color: ${theme.primary};
        }
      `}</style>
    </div>
  );
}

export default ForgotPassword;
</file>

<file path="client/src/pages/MyRegistrations.js">
// src/pages/MyRegistrations.js
import React, { useState, useEffect, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { AuthContext } from '../helpers/AuthContext';
import { format } from 'date-fns';

export default function MyRegistrations() {
  const [registrations, setRegistrations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { authState } = useContext(AuthContext);
  const navigate = useNavigate();

  // Navy color from your palette
  const primaryColor = "#1A2A56";
  // Coral color from your palette
  const accentColor = "#FF6B6B";

  useEffect(() => {
    // Redirect if not logged in
    if (!authState.status) {
      navigate('/login');
      return;
    }

    const fetchRegistrations = async () => {
      setLoading(true);
      try {
        const response = await axios.get('http://localhost:3001/registrations/user/me', {
          headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` }
        });
        
        // Process the data to ensure totalAmount is a number
        const processedRegistrations = response.data.map(registration => ({
          ...registration,
          totalAmount: registration.totalAmount ? parseFloat(registration.totalAmount) : 0
        }));
        
        setRegistrations(processedRegistrations);
      } catch (err) {
        console.error('Error fetching registrations:', err);
        setError('Failed to load your registrations. Please try again.');
      } finally {
        setLoading(false);
      }
    };

    fetchRegistrations();
  }, [authState.status, navigate]);

  const downloadTicket = (registration) => {
    // In a real app, you would generate a PDF ticket here
    // For now, we'll just show the confirmation details
    alert(`Ticket information:
Event: ${registration.Event.title}
Date: ${format(new Date(registration.Event.date), 'MMMM dd, yyyy')}
Attendee: ${registration.fullName}
Confirmation Code: ${registration.confirmationCode}
Tickets: ${registration.ticketQuantity}
    `);
  };

  if (loading) {
    return (
      <div className="container d-flex justify-content-center align-items-center" style={{ minHeight: "60vh" }}>
        <div className="spinner-border" role="status" style={{ color: accentColor }}>
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="container mt-4 mb-5">
      <div className="card shadow-sm">
        <div className="card-header" style={{ backgroundColor: primaryColor, color: "white" }}>
          <h2 className="mb-0">My Event Registrations</h2>
        </div>
        <div className="card-body">
          {error && (
            <div className="alert alert-danger">{error}</div>
          )}

          {registrations.length === 0 ? (
            <div className="text-center py-5">
              <i className="fas fa-calendar-times fa-4x mb-3" style={{ color: "#ccc" }}></i>
              <h3>No Registrations Found</h3>
              <p className="text-muted">You haven't registered for any events yet.</p>
              <button 
                className="btn mt-3" 
                onClick={() => navigate('/home')}
                style={{ backgroundColor: accentColor, color: "white" }}
              >
                Browse Events
              </button>
            </div>
          ) : (
            <div className="row">
              {registrations.map(registration => (
                <div className="col-md-6 mb-4" key={registration.id}>
                  <div className="card h-100">
                    <div className="card-header d-flex justify-content-between align-items-center">
                      <h5 className="mb-0">{registration.Event.title}</h5>
                      <span className={`badge ${
                        new Date(registration.Event.date) < new Date() 
                          ? (registration.checkInStatus ? "bg-success" : "bg-secondary")
                          : "bg-primary"
                      }`}>
                        {new Date(registration.Event.date) < new Date()
                          ? (registration.checkInStatus ? "Attended" : "Missed")
                          : "Upcoming"}
                      </span>
                    </div>
                    <div className="card-body">
                      <div className="mb-3">
                        <strong><i className="fas fa-calendar-day me-2"></i>Event Date:</strong>
                        <p>{format(new Date(registration.Event.date), 'MMMM dd, yyyy')}</p>
                      </div>
                      
                      <div className="mb-3">
                        <strong><i className="fas fa-ticket-alt me-2"></i>Registration Details:</strong>
                        <p>
                          Confirmation Code: <span className="badge bg-dark">{registration.confirmationCode}</span><br />
                          Registration Date: {format(new Date(registration.registrationDate), 'MMM dd, yyyy')}<br />
                          Tickets: {registration.ticketQuantity}
                        </p>
                      </div>
                      
                      <div className="mb-3">
                        <strong><i className="fas fa-dollar-sign me-2"></i>Payment Information:</strong>
                        <p>
                          Status: <span className={`badge ${
                            registration.paymentStatus === 'completed' ? 'bg-success' :
                            registration.paymentStatus === 'pending' ? 'bg-warning' :
                            registration.paymentStatus === 'free' ? 'bg-info' : 'bg-danger'
                          }`}>
                            {registration.paymentStatus.charAt(0).toUpperCase() + registration.paymentStatus.slice(1)}
                          </span><br />
                          {registration.totalAmount > 0 ? (
                            <>
                              Amount: ${typeof registration.totalAmount === 'number' 
                                ? registration.totalAmount.toFixed(2) 
                                : parseFloat(registration.totalAmount || 0).toFixed(2)}<br />
                              {registration.paymentMethod && `Method: ${registration.paymentMethod}`}
                            </>
                          ) : (
                            'Free Event'
                          )}
                        </p>
                      </div>
                    </div>
                    <div className="card-footer">
                      <div className="d-flex justify-content-between">
                        <button 
                          className="btn btn-sm" 
                          onClick={() => downloadTicket(registration)}
                          style={{ backgroundColor: primaryColor, color: "white" }}
                        >
                          <i className="fas fa-download me-2"></i>Download Ticket
                        </button>
                        <button 
                          className="btn btn-sm btn-outline-secondary"
                          onClick={() => navigate(`/event/${registration.EventId}`)}
                        >
                          View Event
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="client/src/pages/PageNotFound.js">
import React from 'react';
import { Link } from "react-router-dom";


function PageNotFound() {
  return (
    <div>
      <h1>Page Not Found :/</h1>
      <h3> 
        {" "}
        Go to Home Page: <Link to="/">Home Page</Link></h3>
    </div>
  )
}

export default PageNotFound
</file>

<file path="client/src/pages/PersonalizedRecommendations.js">
import React, { useState, useEffect } from 'react';

const PersonalizedRecommendations = () => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [recommendations, setRecommendations] = useState([]);
  const [explanation, setExplanation] = useState('');
  const [user, setUser] = useState(null);

  // Define colors (keeping original color scheme)
  const colors = {
    primary: "#FF5A8E", 
    secondary: "#0D1B40", 
    accent: "#41C9E2", 
    dark: "#081029", 
    light: "#FFF5F8", 
    text: "#0D1B40", 
    textLight: "#6C7A9C", 
    gradient: "linear-gradient(135deg, #FF5A8E 0%, #8676FF 100%)"
  };

  useEffect(() => {
    const fetchUserProfileAndRecommendations = async () => {
      // Reset state
      setLoading(true);
      setError(null);

      try {
        // Retrieve the token from localStorage using the correct key
        const token = localStorage.getItem('accessToken');
        
        if (!token) {
          throw new Error('No authentication token found. Please log in again.');
        }

        // Fetch user profile
        const profileResponse = await fetch('http://localhost:3001/api/user/profile', {
          method: 'GET',
          headers: { 
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (!profileResponse.ok) {
          const errorData = await profileResponse.json();
          throw new Error(errorData.message || 'Failed to fetch user profile');
        }

        const userData = await profileResponse.json();
        setUser(userData);

        // Prepare interests (adjust based on your user model)
        const interests = userData.interests || [];

        // Fetch recommendations
        const queryParams = new URLSearchParams({
          userId: userData.id.toString(),
          ...(interests.length && { interests: interests.join(',') })
        });

        const recommendationsResponse = await fetch(`http://localhost:3001/api/recommendations?${queryParams}`, {
          method: 'GET',
          headers: { 
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (!recommendationsResponse.ok) {
          const errorData = await recommendationsResponse.json();
          throw new Error(errorData.message || 'Failed to fetch recommendations');
        }

        // Parse recommendations
        const recommendationsData = await recommendationsResponse.json();

        // Log received data
        console.log('Recommendations received:', recommendationsData);

        // Update state
        setRecommendations(recommendationsData.recommendations || []);
        setExplanation(recommendationsData.explanation || 'Personalized recommendations based on your profile');
        setLoading(false);
      } catch (err) {
        console.error('Recommendation Fetch Error:', err);
        setError(err.message || 'Failed to load recommendations');
        setLoading(false);
      }
    };

    fetchUserProfileAndRecommendations();
  }, []);

  // Loading state
  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center p-4">
        <div className="spinner-border" role="status" style={{ color: colors.primary }}>
          <span className="visually-hidden">Loading recommendations...</span>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="alert alert-danger" role="alert">
        <div className="d-flex align-items-center">
          <i className="bi bi-exclamation-triangle-fill me-2" style={{ color: colors.primary }}></i>
          <strong>{error}</strong>
        </div>
        <details className="mt-2">
          <summary>Troubleshooting Tips</summary>
          <ul>
            <li>Ensure you are logged in</li>
            <li>Check your internet connection</li>
            <li>Verify your authentication token</li>
            <li>Contact support if the issue persists</li>
          </ul>
        </details>
      </div>
    );
  }

  // No recommendations state
  if (recommendations.length === 0) {
    return (
      <div className="text-center py-4">
        <div className="mb-3">
          <i className="bi bi-search" style={{ fontSize: '2rem', color: colors.primary }}></i>
        </div>
        <h5 style={{ color: colors.secondary }}>No recommendations found</h5>
        <p className="text-muted">
          Try adding more interests to your profile or attending more events to get personalized recommendations.
        </p>
      </div>
    );
  }

  // Recommendations display
  return (
    <div className="personalized-recommendations">
      <div className="mb-4">
        <div className="card shadow-sm">
          <div className="card-header py-3" style={{ 
            background: colors.gradient,
            color: 'white',
            borderRadius: '4px 4px 0 0'
          }}>
            <h5 className="mb-0 d-flex align-items-center">
              <i className="bi bi-magic me-2"></i>
              AI-Powered Recommendations
            </h5>
          </div>
          <div className="card-body bg-light">
            <p className="mb-0">{explanation}</p>
          </div>
        </div>
      </div>

      <div className="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        {recommendations.map((event) => (
          <div key={event.id} className="col">
            <div className="card h-100 shadow-sm event-card" style={{ 
              borderRadius: '8px',
              overflow: 'hidden',
              transition: 'transform 0.3s ease, box-shadow 0.3s ease'
            }}>
              {/* Match score badge */}
              <div className="position-absolute" style={{ 
                top: '10px', 
                right: '10px', 
                zIndex: 2,
                backgroundColor: 'rgba(255, 255, 255, 0.9)',
                borderRadius: '20px',
                padding: '5px 10px',
                boxShadow: '0 2px 5px rgba(0,0,0,0.1)'
              }}>
                <span style={{ 
                  color: colors.primary, 
                  fontWeight: 'bold',
                  fontSize: '0.9rem'
                }}>
                  {event.matchScore}% Match
                </span>
              </div>
              
              {/* Event image */}
              <div style={{ height: '180px', overflow: 'hidden' }}>
                {event.image ? (
                  <img 
                    src={event.image.startsWith('http') 
                      ? event.image 
                      : `http://localhost:3001${event.image}`
                    } 
                    className="card-img-top" 
                    alt={event.title}
                    style={{ 
                      height: '100%', 
                      width: '100%', 
                      objectFit: 'cover'
                    }}
                  />
                ) : (
                  <div 
                    className="d-flex justify-content-center align-items-center"
                    style={{ 
                      height: '100%', 
                      backgroundColor: '#f0f0f0',
                      color: '#aaa'
                    }}
                  >
                    <i className="bi bi-image" style={{ fontSize: '3rem' }}></i>
                  </div>
                )}
              </div>
              
              <div className="card-body">
                <h5 className="card-title" style={{ color: colors.secondary }}>{event.title}</h5>
                <p className="card-text">
                  <i className="bi bi-calendar-event me-2" style={{ color: colors.primary }}></i>
                  {new Date(event.date).toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'short', 
                    day: 'numeric' 
                  })}
                </p>
                <p className="card-text">
                  <i className="bi bi-geo-alt me-2" style={{ color: colors.primary }}></i>
                  {event.location}
                </p>
                {event.category && (
                  <span className="badge" style={{ backgroundColor: colors.light, color: colors.primary }}>
                    {event.category}
                  </span>
                )}
              </div>
              <div className="card-footer bg-white border-top-0">
                <p className="text-muted mb-2 small fst-italic">
                  <i className="bi bi-info-circle me-1"></i>
                  {event.reason}
                </p>
                <button 
                  className="btn w-100"
                  style={{ 
                    backgroundColor: colors.primary, 
                    color: 'white'
                  }}
                  onClick={() => window.location.href = `/event/${event.id}`}
                >
                  View Event
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default PersonalizedRecommendations;
</file>

<file path="client/src/pages/ResetPassword.js">
import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate, useParams, Link } from "react-router-dom";
import { FaLock, FaEye, FaEyeSlash, FaArrowLeft, FaCheckCircle } from "react-icons/fa";
import "bootstrap/dist/css/bootstrap.min.css";

// Theme colors - matching the login style
const theme = {
  primary: "#4361ee",
  secondary: "#3f37c9",
  success: "#4cc9f0",
  danger: "#f72585",
  light: "#f8f9fa",
  dark: "#212529",
  cardBg: "#ffffff",
  inputBg: "#f8f9fa",
};

function ResetPassword() {
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [message, setMessage] = useState(null);
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [tokenValid, setTokenValid] = useState(true);
  const [resetComplete, setResetComplete] = useState(false);
  
  const navigate = useNavigate();
  const { token } = useParams();

  // Animation mounting effect
  const [mounted, setMounted] = useState(false);
  useEffect(() => {
    setMounted(true);
    
    // Verify token validity (optional)
    const verifyToken = async () => {
      try {
        // You could add a route to verify the token's validity here
        // For now, we'll assume it's valid
      } catch (error) {
        setTokenValid(false);
        setMessage({
          text: "This password reset link is invalid or has expired. Please request a new one.",
          type: "danger"
        });
      }
    };
    
    verifyToken();
  }, [token]);

  const validateForm = () => {
    if (!password) {
      setMessage({ text: "Password is required", type: "danger" });
      return false;
    }
    
    if (password.length < 8) {
      setMessage({ text: "Password must be at least 8 characters long", type: "danger" });
      return false;
    }
    
    if (password !== confirmPassword) {
      setMessage({ text: "Passwords do not match", type: "danger" });
      return false;
    }
    
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setLoading(true);
    setMessage(null);
    
    try {
      const { data } = await axios.post(`http://localhost:3001/auth/reset-password/${token}`, { 
        password 
      });
      
      setMessage({ text: data.message, type: "success" });
      setResetComplete(true);
      
      // Redirect to login after 3 seconds
      setTimeout(() => {
        navigate("/login");
      }, 3000);
    } catch (error) {
      const errorMessage = error.response?.data?.error || 
        "An error occurred while resetting your password. Please try again.";
      setMessage({ text: errorMessage, type: "danger" });
      console.error("Password reset error:", error);
    } finally {
      setLoading(false);
    }
  };
  
  if (!tokenValid) {
    return (
      <div className="container d-flex justify-content-center align-items-center min-vh-100" 
        style={{ 
          background: `linear-gradient(135deg, ${theme.light} 0%, ${theme.light}ee 100%)`,
          padding: "20px"
        }}>
        <div 
          className={`card shadow-lg p-4 col-lg-4 col-md-6 col-sm-10 col-12 ${mounted ? 'animate-in' : ''}`}
          style={{ 
            backgroundColor: theme.cardBg,
            borderRadius: "12px",
            border: "none",
            boxShadow: "0 12px 24px rgba(0,0,0,0.1)",
          }}
        >
          <div className="text-center mb-4">
            <h1 className="h3 mb-3 fw-bold" style={{ color: theme.dark }}>Invalid Link</h1>
          </div>
          
          {message && (
            <div 
              className="alert alert-danger d-flex align-items-center mb-4"
              role="alert"
              style={{ 
                backgroundColor: `${theme.danger}15`,
                color: theme.danger,
                border: `1px solid ${theme.danger}22`,
                borderRadius: "8px"
              }}
            >
              <div>{message.text}</div>
            </div>
          )}
          
          <Link 
            to="/forgot-password" 
            className="btn w-100 mb-3" 
            style={{ 
              backgroundColor: theme.primary,
              color: "white",
              padding: "0.75rem",
              borderRadius: "6px",
              fontWeight: "500",
              border: "none",
            }}
          >
            Request New Password Reset
          </Link>
          
          <div className="text-center mt-3">
            <Link 
              to="/login" 
              className="small text-decoration-none fw-bold"
              style={{ color: theme.primary }}
            >
              Return to Login
            </Link>
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="container d-flex justify-content-center align-items-center min-vh-100" 
      style={{ 
        background: `linear-gradient(135deg, ${theme.light} 0%, ${theme.light}ee 100%)`,
        padding: "20px"
      }}>
      <div 
        className={`card shadow-lg p-4 col-lg-4 col-md-6 col-sm-10 col-12 ${mounted ? 'animate-in' : ''}`}
        style={{ 
          backgroundColor: theme.cardBg,
          borderRadius: "12px",
          border: "none",
          boxShadow: "0 12px 24px rgba(0,0,0,0.1)",
          transition: "all 0.3s ease-in-out",
          opacity: mounted ? 1 : 0,
          transform: mounted ? "translateY(0)" : "translateY(20px)"
        }}
      >
        {/* Back to Login Button */}
        <div className="text-start mb-3">
          <Link 
            to="/login" 
            className="btn btn-sm d-inline-flex align-items-center"
            style={{ 
              color: theme.primary,
              fontWeight: "500",
              padding: "6px 12px",
              borderRadius: "6px",
              backgroundColor: `${theme.primary}10`,
              transition: "all 0.2s ease"
            }}
          >
            <FaArrowLeft size={14} className="me-2" />
            Back to Login
          </Link>
        </div>
        
        <div className="text-center mb-4">
          <h1 className="h3 mb-3 fw-bold" style={{ color: theme.dark }}>
            {resetComplete ? "Password Updated" : "Reset Your Password"}
          </h1>
          <div className="small text-muted">
            {resetComplete 
              ? "Your password has been successfully updated" 
              : "Please enter a new password for your account"}
          </div>
        </div>

        {message && (
          <div 
            className={`alert alert-${message.type} d-flex align-items-center`}
            role="alert"
            style={{ 
              backgroundColor: message.type === "danger" ? `${theme.danger}15` : `${theme.success}15`,
              color: message.type === "danger" ? theme.danger : theme.success,
              border: `1px solid ${message.type === "danger" ? theme.danger : theme.success}22`,
              borderRadius: "8px"
            }}
          >
            <div>{message.text}</div>
          </div>
        )}

        {!resetComplete ? (
          <form onSubmit={handleSubmit}>
            {/* New Password Field */}
            <div className="mb-4">
              <label className="form-label small fw-bold" style={{ color: theme.dark }}>
                New Password
              </label>
              <div className="input-group">
                <span 
                  className="input-group-text"
                  style={{ 
                    backgroundColor: theme.primary,
                    borderColor: theme.primary,
                    color: "white"
                  }}
                >
                  <FaLock />
                </span>
                <input
                  type={showPassword ? "text" : "password"}
                  className="form-control"
                  placeholder="Enter your new password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  style={{ 
                    backgroundColor: theme.inputBg,
                    borderColor: "#dee2e6",
                    fontSize: "0.95rem",
                    padding: "0.75rem 0.75rem",
                  }}
                  autoFocus
                />
                <button
                  className="btn input-group-text"
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  style={{ 
                    backgroundColor: theme.inputBg,
                    borderColor: "#dee2e6",
                    cursor: "pointer"
                  }}
                >
                  {showPassword ? <FaEyeSlash /> : <FaEye />}
                </button>
              </div>
              <div className="small text-muted mt-2">
                Password must be at least 8 characters long
              </div>
            </div>

            {/* Confirm Password Field */}
            <div className="mb-4">
              <label className="form-label small fw-bold" style={{ color: theme.dark }}>
                Confirm Password
              </label>
              <div className="input-group">
                <span 
                  className="input-group-text"
                  style={{ 
                    backgroundColor: theme.primary,
                    borderColor: theme.primary,
                    color: "white"
                  }}
                >
                  <FaLock />
                </span>
                <input
                  type={showConfirmPassword ? "text" : "password"}
                  className="form-control"
                  placeholder="Confirm your new password"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  style={{ 
                    backgroundColor: theme.inputBg,
                    borderColor: "#dee2e6",
                    fontSize: "0.95rem",
                    padding: "0.75rem 0.75rem",
                  }}
                />
                <button
                  className="btn input-group-text"
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  style={{ 
                    backgroundColor: theme.inputBg,
                    borderColor: "#dee2e6",
                    cursor: "pointer"
                  }}
                >
                  {showConfirmPassword ? <FaEyeSlash /> : <FaEye />}
                </button>
              </div>
            </div>

            <button 
              className="btn w-100 mb-3" 
              type="submit" 
              disabled={loading}
              style={{ 
                backgroundColor: theme.primary,
                color: "white",
                padding: "0.75rem",
                borderRadius: "6px",
                fontWeight: "500",
                border: "none",
                transition: "all 0.2s ease",
                opacity: loading ? 0.8 : 1
              }}
            >
              {loading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                  <span>Updating Password...</span>
                </>
              ) : (
                "Update Password"
              )}
            </button>
          </form>
        ) : (
          <div className="text-center">
            <div className="mb-4 p-3" style={{ 
              backgroundColor: `${theme.success}10`, 
              borderRadius: "8px", 
              color: theme.dark 
            }}>
              <div className="d-flex justify-content-center mb-4">
                <FaCheckCircle size={50} style={{ color: theme.success }} />
              </div>
              <p>Your password has been successfully updated. You will be redirected to the login page shortly.</p>
            </div>
            
            <Link 
              to="/login" 
              className="btn w-100" 
              style={{ 
                backgroundColor: theme.primary,
                color: "white",
                padding: "0.75rem",
                borderRadius: "6px",
                fontWeight: "500",
                border: "none",
                transition: "all 0.2s ease"
              }}
            >
              Sign In Now
            </Link>
          </div>
        )}
      </div>

      <style jsx>{`
        .animate-in {
          animation: fadeInUp 0.5s ease-out forwards;
        }
        
        @keyframes fadeInUp {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        .form-control:focus, .btn:focus {
          box-shadow: 0 0 0 0.25rem ${theme.primary}30;
          border-color: ${theme.primary};
        }
      `}</style>
    </div>
  );
}

export default ResetPassword;
</file>

<file path="client/src/reportWebVitals.js">
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
</file>

<file path="client/src/services/api.js">
// src/services/api.js
import axios from 'axios';

// Create axios instance with defaults
const API = axios.create({
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Add auth token to requests if available
API.interceptors.request.use(config => {
  const token = localStorage.getItem('accessToken');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// API service for AI Reviews
export const AIReviewsAPI = {
  // Get all events with basic info
  getEvents: async () => {
    try {
      const response = await API.get('/events');
      return response.data;
    } catch (error) {
      console.error('Error fetching events:', error);
      throw error;
    }
  },

  // Get event details with reviews
  getEventDetails: async (eventId) => {
    try {
      const response = await API.get(`/events/${eventId}`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching event details for ID ${eventId}:`, error);
      throw error;
    }
  },

  // Get reviews for an event
  getEventReviews: async (eventId) => {
    try {
      const response = await API.get(`/reviews/${eventId}`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching reviews for event ID ${eventId}:`, error);
      throw error;
    }
  },

  // Get AI sentiment analysis for event reviews
  getEventSentiment: async (eventId) => {
    try {
      const response = await API.get(`/reviews/sentiment/${eventId}`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching sentiment analysis for event ID ${eventId}:`, error);
      throw error;
    }
  },

  // Get attendance analytics for an event (mock function - needs backend implementation)
  getAttendanceData: async (eventId) => {
    try {
      // This would be an actual API call in production
      // For now, we'll generate random attendance data
      // In a real implementation, this would be stored in your MySQL database
      return [
        { day: 'Day 1', attendance: Math.floor(Math.random() * 1000) + 500 },
        { day: 'Day 2', attendance: Math.floor(Math.random() * 1000) + 500 },
        { day: 'Day 3', attendance: Math.floor(Math.random() * 1000) + 500 }
      ];
    } catch (error) {
      console.error(`Error fetching attendance data for event ID ${eventId}:`, error);
      throw error;
    }
  },

  // Get satisfaction distribution for an event (mock function - needs backend implementation)
  getSatisfactionData: async (eventId) => {
    try {
      // This would be an actual API call in production
      return [
        { name: 'Very Satisfied', value: 65 },
        { name: 'Satisfied', value: 25 },
        { name: 'Neutral', value: 7 },
        { name: 'Dissatisfied', value: 3 }
      ];
    } catch (error) {
      console.error(`Error fetching satisfaction data for event ID ${eventId}:`, error);
      throw error;
    }
  },

  // Get rating breakdown for an event (mock function - needs backend implementation)
  getRatingBreakdown: async (eventId) => {
    try {
      // This would be an actual API call in production
      return [
        { category: 'Content', rating: 4.8 },
        { category: 'Speakers', rating: 4.7 },
        { category: 'Venue', rating: 4.6 },
        { category: 'Organization', rating: 4.5 },
        { category: 'Value', rating: 4.7 }
      ];
    } catch (error) {
      console.error(`Error fetching rating breakdown for event ID ${eventId}:`, error);
      throw error;
    }
  },

  // Get engagement timeline for an event (mock function - needs backend implementation)
  getEngagementData: async (eventId) => {
    try {
      // This would be an actual API call in production
      return [
        { time: '9 AM', engagement: 70 },
        { time: '10 AM', engagement: 82 },
        { time: '11 AM', engagement: 93 },
        { time: '12 PM', engagement: 65 },
        { time: '1 PM', engagement: 75 },
        { time: '2 PM', engagement: 85 },
        { time: '3 PM', engagement: 90 },
        { time: '4 PM', engagement: 88 },
        { time: '5 PM', engagement: 72 }
      ];
    } catch (error) {
      console.error(`Error fetching engagement data for event ID ${eventId}:`, error);
      throw error;
    }
  },

  // Get AI insights for an event (mock function - needs backend implementation)
  getAIInsights: async (eventId, category) => {
    try {
      // This would be an actual API call in production
      return [
        `Attendees showed highest engagement during sessions on ${category}`,
        `${Math.floor(Math.random() * 20) + 80}% of attendees rated the networking opportunities as 'excellent' or 'very good'`,
        `Most frequently mentioned keywords in positive reviews: 'organization', 'content', 'speakers'`,
        `Suggestion for improvement: More interactive activities based on feedback analysis`
      ];
    } catch (error) {
      console.error(`Error fetching AI insights for event ID ${eventId}:`, error);
      throw error;
    }
  }
};

export default API;
</file>

<file path="client/src/services/EventService.js">
// src/services/EventService.js
import axios from 'axios';

// Base URL for API endpoints
const API_BASE_URL = 'http://localhost:3001';

// Helper function to get the auth header with token
const getAuthHeader = () => {
  const token = localStorage.getItem('accessToken');
  return { Authorization: `Bearer ${token}` };
};

/**
 * Event Service - Handles all API calls related to events and reviews
 */
const EventService = {
  /**
   * Fetch all events
   * @returns {Promise} Promise with events data
   */
  getAllEvents: async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/events`, {
        headers: getAuthHeader()
      });
      return response.data;
    } catch (error) {
      console.error('Error fetching events:', error);
      throw error;
    }
  },

  /**
   * Get a specific event by ID including its reviews
   * @param {number} eventId - Event ID
   * @returns {Promise} Promise with event data and reviews
   */
  getEventById: async (eventId) => {
    try {
      const response = await axios.get(`${API_BASE_URL}/events/${eventId}`, {
        headers: getAuthHeader()
      });
      return response.data;
    } catch (error) {
      console.error(`Error fetching event #${eventId}:`, error);
      throw error;
    }
  },

  /**
   * Create a new event
   * @param {Object} eventData - Event details
   * @returns {Promise} Promise with created event data
   */
  createEvent: async (eventData) => {
    try {
      const formData = new FormData();
      
      // Add all event fields to the form data
      Object.keys(eventData).forEach(key => {
        if (key === 'image' && eventData[key] instanceof File) {
          formData.append(key, eventData[key]);
        } else if (key !== 'image') {
          formData.append(key, eventData[key]);
        }
      });
      
      const response = await axios.post(`${API_BASE_URL}/events`, formData, {
        headers: {
          ...getAuthHeader(),
          'Content-Type': 'multipart/form-data',
        }
      });
      return response.data;
    } catch (error) {
      console.error('Error creating event:', error);
      throw error;
    }
  },

  /**
   * Update an existing event
   * @param {number} eventId - Event ID
   * @param {Object} eventData - Updated event details
   * @returns {Promise} Promise with updated event data
   */
  updateEvent: async (eventId, eventData) => {
    try {
      const formData = new FormData();
      
      // Add all event fields to the form data
      Object.keys(eventData).forEach(key => {
        if (key === 'image' && eventData[key] instanceof File) {
          formData.append(key, eventData[key]);
        } else if (key !== 'image') {
          formData.append(key, eventData[key]);
        }
      });
      
      const response = await axios.put(`${API_BASE_URL}/events/${eventId}`, formData, {
        headers: {
          ...getAuthHeader(),
          'Content-Type': 'multipart/form-data',
        }
      });
      return response.data;
    } catch (error) {
      console.error(`Error updating event #${eventId}:`, error);
      throw error;
    }
  },

  /**
   * Delete an event
   * @param {number} eventId - Event ID
   * @returns {Promise} Promise with success message
   */
  deleteEvent: async (eventId) => {
    try {
      const response = await axios.delete(`${API_BASE_URL}/events/${eventId}`, {
        headers: getAuthHeader()
      });
      return response.data;
    } catch (error) {
      console.error(`Error deleting event #${eventId}:`, error);
      throw error;
    }
  },

  /**
   * Add a review to an event
   * @param {Object} reviewData - Review details
   * @returns {Promise} Promise with created review data
   */
  addReview: async (reviewData) => {
    try {
      const response = await axios.post(`${API_BASE_URL}/reviews`, reviewData, {
        headers: getAuthHeader()
      });
      return response.data;
    } catch (error) {
      console.error('Error adding review:', error);
      throw error;
    }
  },

  /**
   * Delete a review
   * @param {number} reviewId - Review ID
   * @returns {Promise} Promise with success message
   */
  deleteReview: async (reviewId) => {
    try {
      const response = await axios.delete(`${API_BASE_URL}/reviews/${reviewId}`, {
        headers: getAuthHeader()
      });
      return response.data;
    } catch (error) {
      console.error(`Error deleting review #${reviewId}:`, error);
      throw error;
    }
  },

  /**
   * Add an admin response to a review
   * @param {number} reviewId - Review ID
   * @param {string} adminResponse - Admin response text
   * @returns {Promise} Promise with updated review data
   */
  respondToReview: async (reviewId, adminResponse) => {
    try {
      const response = await axios.put(`${API_BASE_URL}/reviews/respond/${reviewId}`, 
        { adminResponse },
        { headers: getAuthHeader() }
      );
      return response.data;
    } catch (error) {
      console.error(`Error responding to review #${reviewId}:`, error);
      throw error;
    }
  },

  /**
   * Auto-generate an AI response for a review
   * @param {number} reviewId - Review ID
   * @returns {Promise} Promise with AI-generated response
   */
  generateAIResponse: async (reviewId) => {
    try {
      // For now, we'll just return a generic response
      // In a real application, this would call an AI service
      const aiResponse = "Thank you for your feedback! We appreciate your insights and will use them to improve our future events.";
      
      // Send the AI-generated response to the review
      return await EventService.respondToReview(reviewId, aiResponse);
    } catch (error) {
      console.error(`Error generating AI response for review #${reviewId}:`, error);
      throw error;
    }
  },

  /**
   * Get analytics data for an event
   * @param {number} eventId - Event ID
   * @param {string} startDate - Start date in YYYY-MM-DD format
   * @param {string} endDate - End date in YYYY-MM-DD format
   * @returns {Promise} Promise with analytics data
   */
  getEventAnalytics: async (eventId, startDate, endDate) => {
    try {
      // First, get the event with all its reviews
      const eventData = await EventService.getEventById(eventId);
      
      // Filter reviews by date if dates are provided
      let filteredReviews = eventData.reviews;
      if (startDate && endDate) {
        const start = new Date(startDate);
        const end = new Date(endDate);
        end.setHours(23, 59, 59, 999); // Set to end of day
        
        filteredReviews = eventData.reviews.filter(review => {
          const reviewDate = new Date(review.createdAt);
          return reviewDate >= start && reviewDate <= end;
        });
      }
      
      // Calculate analytics
      const totalReviews = filteredReviews.length;
      const ratings = {
        average: 0,
        distribution: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}
      };
      const sentiment = {
        positive: 0,
        neutral: 0,
        negative: 0
      };
      
      // Process reviews
      if (totalReviews > 0) {
        let ratingSum = 0;
        
        filteredReviews.forEach(review => {
          // Count rating
          const rating = review.rating;
          ratingSum += rating;
          if (rating >= 1 && rating <= 5) {
            ratings.distribution[rating]++;
          }
          
          // Count sentiment
          if (review.sentiment) {
            sentiment[review.sentiment]++;
          } else {
            sentiment.neutral++;
          }
        });
        
        ratings.average = (ratingSum / totalReviews).toFixed(1);
      }
      
      // Create time series data for charts
      const timeSeriesData = EventService.generateTimeSeriesData(
        filteredReviews,
        startDate || new Date(Math.min(...filteredReviews.map(r => new Date(r.createdAt)))).toISOString().split('T')[0],
        endDate || new Date().toISOString().split('T')[0]
      );
      
      return {
        event: eventData.event,
        analytics: {
          totalReviews,
          ratings,
          sentiment,
          timeSeries: timeSeriesData
        }
      };
    } catch (error) {
      console.error(`Error fetching analytics for event #${eventId}:`, error);
      throw error;
    }
  },
  
  /**
   * Generate time series data for charts
   * @param {Array} reviews - Array of review objects
   * @param {string} startDate - Start date in YYYY-MM-DD format
   * @param {string} endDate - End date in YYYY-MM-DD format
   * @returns {Object} Object with time series data
   */
  generateTimeSeriesData: (reviews, startDate, endDate) => {
    // Convert dates to Date objects
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    // Create an array of all dates in the range
    const dates = [];
    const current = new Date(start);
    
    while (current <= end) {
      dates.push(current.toISOString().split('T')[0]);
      current.setDate(current.getDate() + 1);
    }
    
    // Initialize data structure with zeros
    const sentimentData = {};
    const volumeData = {};
    
    dates.forEach(date => {
      sentimentData[date] = {
        positive: 0,
        neutral: 0,
        negative: 0,
        score: 0
      };
      volumeData[date] = 0;
    });
    
    // Fill in data from reviews
    reviews.forEach(review => {
      const reviewDate = new Date(review.createdAt).toISOString().split('T')[0];
      
      // Only process if date is in our range
      if (sentimentData[reviewDate]) {
        // Count by sentiment
        if (review.sentiment) {
          sentimentData[reviewDate][review.sentiment]++;
        } else {
          sentimentData[reviewDate].neutral++;
        }
        
        // Increment volume
        volumeData[reviewDate]++;
      }
    });
    
    // Calculate sentiment scores for each day (% positive)
    Object.keys(sentimentData).forEach(date => {
      const data = sentimentData[date];
      const total = data.positive + data.neutral + data.negative;
      
      if (total > 0) {
        // Calculate weighted score: 100 for positive, 50 for neutral, 0 for negative
        const weightedScore = (
          (data.positive * 100) + 
          (data.neutral * 50) + 
          (data.negative * 0)
        ) / total;
        
        sentimentData[date].score = Math.round(weightedScore);
      } else {
        // No reviews that day
        sentimentData[date].score = null;
      }
    });
    
    // Convert to format needed for charts
    const sentimentSeries = dates.map(date => ({
      date,
      score: sentimentData[date].score
    }));
    
    const volumeSeries = dates.map(date => ({
      date,
      count: volumeData[date]
    }));
    
    // Fill missing sentiment scores with interpolation
    let lastValidScore = null;
    let defaultScore = 70; // Default score if no earlier value exists
    
    for (let i = 0; i < sentimentSeries.length; i++) {
      if (sentimentSeries[i].score !== null) {
        lastValidScore = sentimentSeries[i].score;
      } else if (lastValidScore !== null) {
        sentimentSeries[i].score = lastValidScore;
      } else {
        // Look ahead for the next valid score
        let nextValidScore = null;
        for (let j = i + 1; j < sentimentSeries.length; j++) {
          if (sentimentSeries[j].score !== null) {
            nextValidScore = sentimentSeries[j].score;
            break;
          }
        }
        
        sentimentSeries[i].score = nextValidScore !== null ? nextValidScore : defaultScore;
      }
    }
    
    return {
      sentiment: sentimentSeries,
      volume: volumeSeries
    };
  }
};

export default EventService;
</file>

<file path="client/src/utils/colors.js">
// colors.js - Extract colors into a reusable utility
export const colors = {
    primary: "#FF5A8E", // Vibrant pink
    secondary: "#0D1B40", // Deep navy
    accent: "#41C9E2", // Bright turquoise accent
    dark: "#081029", // Very dark navy, almost black
    light: "#FFF5F8", // Very light pink (off-white with pink tint)
    text: "#0D1B40", // Navy for main text
    textLight: "#6C7A9C", // Muted navy for secondary text
    chart: ["#FF5A8E", "#0D1B40", "#41C9E2", "#FF9E6D", "#8676FF", "#44D7B6"]
  };
</file>

<file path="README.md">
# AI-Powered-Event
</file>

<file path="server/migrations/20250220075549-add-sentiment-to-reviews.js">
module.exports = {
  up: async (queryInterface, Sequelize) => {
      return queryInterface.addColumn("Reviews", "sentiment", {
          type: Sequelize.STRING,
          allowNull: true
      });
  },

  down: async (queryInterface, Sequelize) => {
      return queryInterface.removeColumn("Reviews", "sentiment");
  }
};
</file>

<file path="server/migrations/20250227090014-add-isAdmin-to-users.js">
'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    /**
     * Add the isAdmin column to the Users table
     */
    await queryInterface.addColumn('Users', 'isAdmin', {
      type: Sequelize.BOOLEAN,
      allowNull: false,
      defaultValue: false,  // Default to false for regular users
    });
  },

  async down(queryInterface, Sequelize) {
    /**
     * Remove the isAdmin column from the Users table
     */
    await queryInterface.removeColumn('Users', 'isAdmin');
  }
};
</file>

<file path="server/migrations/20250228065051-add-admin-response-to-reviews.js">
'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up (queryInterface, Sequelize) {
    await queryInterface.addColumn("Reviews", "admin_response", {
      type: Sequelize.TEXT,
      allowNull: true, // Allows admins to respond, but it's not mandatory
    });
  },

  async down (queryInterface, Sequelize) {
    await queryInterface.removeColumn("Reviews", "admin_response");
  }
};
</file>

<file path="server/migrations/20250319112413-add-time-category-image-to-events.js">
module.exports = {
  up: async (queryInterface, Sequelize) => {
    // Adding the `time`, `category`, and `image` columns to the Events table
    await queryInterface.addColumn('Events', 'time', {
      type: Sequelize.TIME,
      allowNull: false,  // Make the time field required
    });

    await queryInterface.addColumn('Events', 'category', {
      type: Sequelize.STRING,
      allowNull: false,  // Make the category field required
    });

    await queryInterface.addColumn('Events', 'image', {
      type: Sequelize.STRING,
      allowNull: true,  // Make the image field optional
    });
  },

  down: async (queryInterface, Sequelize) => {
    // Removing the `time`, `category`, and `image` columns if the migration is rolled back
    await queryInterface.removeColumn('Events', 'time');
    await queryInterface.removeColumn('Events', 'category');
    await queryInterface.removeColumn('Events', 'image');
  }
};
</file>

<file path="server/migrations/20250325230209-add-reset-password-fields.js">
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.addColumn('Users', 'resetPasswordToken', {
      type: Sequelize.STRING,
      allowNull: true
    });
    
    await queryInterface.addColumn('Users', 'resetPasswordExpires', {
      type: Sequelize.DATE,
      allowNull: true
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.removeColumn('Users', 'resetPasswordToken');
    await queryInterface.removeColumn('Users', 'resetPasswordExpires');
  }
};
</file>

<file path="server/migrations/20250330163002-add-price-to-events.js">
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    // Add price field
    await queryInterface.addColumn('Events', 'price', {
      type: Sequelize.DECIMAL(10, 2),
      allowNull: false,
      defaultValue: 0.00
    });
    
    // Add isPaid field
    await queryInterface.addColumn('Events', 'isPaid', {
      type: Sequelize.BOOLEAN,
      allowNull: false,
      defaultValue: false
    });
    
    // Add ticketsAvailable field
    await queryInterface.addColumn('Events', 'ticketsAvailable', {
      type: Sequelize.INTEGER,
      allowNull: true
    });
    
    // Add registrationDeadline field
    await queryInterface.addColumn('Events', 'registrationDeadline', {
      type: Sequelize.DATE,
      allowNull: true
    });
    
    // Add maxRegistrations field
    await queryInterface.addColumn('Events', 'maxRegistrations', {
      type: Sequelize.INTEGER,
      allowNull: true
    });
    
    // Add minRegistrations field
    await queryInterface.addColumn('Events', 'minRegistrations', {
      type: Sequelize.INTEGER,
      allowNull: true,
      defaultValue: 1
    });
    
    // Add status field
    await queryInterface.addColumn('Events', 'status', {
      type: Sequelize.ENUM('active', 'cancelled', 'completed', 'draft'),
      defaultValue: 'active'
    });

    // Add userId (for the organizer) if not already there
    try {
      await queryInterface.addColumn('Events', 'userId', {
        type: Sequelize.INTEGER,
        allowNull: true,
        references: {
          model: 'Users',
          key: 'id'
        }
      });
    } catch (error) {
      console.log('userId column may already exist');
    }
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.removeColumn('Events', 'price');
    await queryInterface.removeColumn('Events', 'isPaid');
    await queryInterface.removeColumn('Events', 'ticketsAvailable');
    await queryInterface.removeColumn('Events', 'registrationDeadline');
    await queryInterface.removeColumn('Events', 'maxRegistrations');
    await queryInterface.removeColumn('Events', 'minRegistrations');
    await queryInterface.removeColumn('Events', 'status');
    
    try {
      await queryInterface.removeColumn('Events', 'userId');
    } catch (error) {
      console.log('userId column may not exist');
    }
  }
};
</file>

<file path="server/migrations/20250330163141-create-registrations-table.js">
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Registrations', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      },
      fullName: {
        type: Sequelize.STRING,
        allowNull: false
      },
      email: {
        type: Sequelize.STRING,
        allowNull: false
      },
      phone: {
        type: Sequelize.STRING,
        allowNull: false
      },
      address: {
        type: Sequelize.STRING,
        allowNull: true
      },
      city: {
        type: Sequelize.STRING,
        allowNull: true
      },
      state: {
        type: Sequelize.STRING,
        allowNull: true
      },
      zipCode: {
        type: Sequelize.STRING,
        allowNull: true
      },
      specialRequirements: {
        type: Sequelize.TEXT,
        allowNull: true
      },
      ticketQuantity: {
        type: Sequelize.INTEGER,
        allowNull: false,
        defaultValue: 1
      },
      registrationDate: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.NOW
      },
      paymentStatus: {
        type: Sequelize.ENUM('pending', 'completed', 'failed', 'refunded', 'free'),
        allowNull: false,
        defaultValue: 'pending'
      },
      totalAmount: {
        type: Sequelize.DECIMAL(10, 2),
        allowNull: false,
        defaultValue: 0.00
      },
      paymentMethod: {
        type: Sequelize.STRING,
        allowNull: true
      },
      paymentDate: {
        type: Sequelize.DATE,
        allowNull: true
      },
      transactionId: {
        type: Sequelize.STRING,
        allowNull: true
      },
      confirmationCode: {
        type: Sequelize.STRING,
        allowNull: true
      },
      checkInStatus: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false
      },
      checkInTime: {
        type: Sequelize.DATE,
        allowNull: true
      },
      EventId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'Events',
          key: 'id'
        },
        onDelete: 'CASCADE'
      },
      UserId: {
        type: Sequelize.INTEGER,
        allowNull: true,
        references: {
          model: 'Users',
          key: 'id'
        },
        onDelete: 'SET NULL'
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE
      }
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Registrations');
  }
};
</file>

<file path="server/migrations/20250330163704-fix-add-price-fields-to-events.js">
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    // Get current table structure
    let tableExists = true;
    let tableDescription;
    
    try {
      tableDescription = await queryInterface.describeTable('Events');
    } catch (error) {
      tableExists = false;
      console.log('Events table does not exist yet');
    }
    
    if (tableExists) {
      // Add columns only if they don't exist
      
      if (!tableDescription.price) {
        await queryInterface.addColumn('Events', 'price', {
          type: Sequelize.DECIMAL(10, 2),
          allowNull: false,
          defaultValue: 0.00
        });
      }
      
      if (!tableDescription.isPaid) {
        await queryInterface.addColumn('Events', 'isPaid', {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: false
        });
      }
      
      // Continue with other columns...
    }
  },

  down: async (queryInterface, Sequelize) => {
    // Down migration code...
  }
};
</file>

<file path="server/models/EventAnalytics.js">
// models/EventAnalytics.js 
module.exports = (sequelize, DataTypes) => {
    const EventAnalytics = sequelize.define("EventAnalytics", {
      id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
      },
      event_id: {
        type: DataTypes.INTEGER,
        allowNull: false
      },
      attendance_data: {
        type: DataTypes.TEXT,
        allowNull: true,
        get() {
          const value = this.getDataValue('attendance_data');
          return value ? JSON.parse(value) : null;
        },
        set(value) {
          this.setDataValue('attendance_data', JSON.stringify(value));
        }
      },
      satisfaction_data: {
        type: DataTypes.TEXT,
        allowNull: true,
        get() {
          const value = this.getDataValue('satisfaction_data');
          return value ? JSON.parse(value) : null;
        },
        set(value) {
          this.setDataValue('satisfaction_data', JSON.stringify(value));
        }
      },
      rating_breakdown: {
        type: DataTypes.TEXT,
        allowNull: true,
        get() {
          const value = this.getDataValue('rating_breakdown');
          return value ? JSON.parse(value) : null;
        },
        set(value) {
          this.setDataValue('rating_breakdown', JSON.stringify(value));
        }
      },
      engagement_over_time: {
        type: DataTypes.TEXT,
        allowNull: true,
        get() {
          const value = this.getDataValue('engagement_over_time');
          return value ? JSON.parse(value) : null;
        },
        set(value) {
          this.setDataValue('engagement_over_time', JSON.stringify(value));
        }
      },
      ai_insights: {
        type: DataTypes.TEXT,
        allowNull: true,
        get() {
          const value = this.getDataValue('ai_insights');
          return value ? JSON.parse(value) : null;
        },
        set(value) {
          this.setDataValue('ai_insights', JSON.stringify(value));
        }
      },
      sentiment_positive_count: {
        type: DataTypes.INTEGER,
        defaultValue: 0
      },
      sentiment_neutral_count: {
        type: DataTypes.INTEGER,
        defaultValue: 0
      },
      sentiment_negative_count: {
        type: DataTypes.INTEGER,
        defaultValue: 0
      },
      total_reviews: {
        type: DataTypes.INTEGER,
        defaultValue: 0
      },
      average_rating: {
        type: DataTypes.FLOAT,
        defaultValue: 0
      },
      total_attendance: {
        type: DataTypes.INTEGER,
        defaultValue: 0
      }
    });
  
    EventAnalytics.associate = (models) => {
      EventAnalytics.belongsTo(models.Events, {
        foreignKey: "event_id",
        onDelete: "CASCADE"
      });
    };
  
    return EventAnalytics;
  };
</file>

<file path="server/models/index.js">
'use strict';

const fs = require('fs');
const path = require('path');
const Sequelize = require('sequelize');
const process = require('process');
const basename = path.basename(__filename);
const env = process.env.NODE_ENV || 'development';
const config = require(__dirname + '/../config/config.json')[env];
const db = {};

let sequelize;
if (config.use_env_variable) {
  sequelize = new Sequelize(process.env[config.use_env_variable], config);
} else {
  sequelize = new Sequelize(config.database, config.username, config.password, config);
}

fs
  .readdirSync(__dirname)
  .filter(file => {
    return (
      file.indexOf('.') !== 0 &&
      file !== basename &&
      file.slice(-3) === '.js' &&
      file.indexOf('.test.js') === -1
    );
  })
  .forEach(file => {
    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);
    db[model.name] = model;
  });

Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

db.sequelize = sequelize;
db.Sequelize = Sequelize;

module.exports = db;
</file>

<file path="server/models/Registrations.js">
module.exports = (sequelize, DataTypes) => {
    const Registrations = sequelize.define("Registrations", {
      fullName: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      email: {
        type: DataTypes.STRING,
        allowNull: false,
        validate: {
          isEmail: true,
        },
      },
      phone: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      address: {
        type: DataTypes.STRING,
        allowNull: true,
      },
      city: {
        type: DataTypes.STRING,
        allowNull: true,
      },
      state: {
        type: DataTypes.STRING,
        allowNull: true,
      },
      zipCode: {
        type: DataTypes.STRING,
        allowNull: true,
      },
      specialRequirements: {
        type: DataTypes.TEXT,
        allowNull: true,
      },
      ticketQuantity: {
        type: DataTypes.INTEGER,
        allowNull: false,
        defaultValue: 1,
      },
      registrationDate: {
        type: DataTypes.DATE,
        allowNull: false,
        defaultValue: DataTypes.NOW,
      },
      paymentStatus: {
        type: DataTypes.ENUM('pending', 'completed', 'failed', 'refunded', 'free'),
        allowNull: false,
        defaultValue: 'pending',
      },
      totalAmount: {
        type: DataTypes.DECIMAL(10, 2),
        allowNull: false,
        defaultValue: 0.00,
      },
      paymentMethod: {
        type: DataTypes.STRING,
        allowNull: true,
      },
      paymentDate: {
        type: DataTypes.DATE,
        allowNull: true,
      },
      transactionId: {
        type: DataTypes.STRING,
        allowNull: true,
      },
      confirmationCode: {
        type: DataTypes.STRING,
        allowNull: true,
      },
      checkInStatus: {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      checkInTime: {
        type: DataTypes.DATE,
        allowNull: true,
      },
    });
  
    // Define associations
    Registrations.associate = (models) => {
      // Each registration belongs to an event
      Registrations.belongsTo(models.Events, {
        foreignKey: {
          name: "EventId",
          allowNull: false,
        },
        onDelete: "CASCADE",
      });
  
      // Registration can be associated with a user (optional - for logged-in users)
      Registrations.belongsTo(models.Users, {
        foreignKey: {
          name: "UserId",
          allowNull: true,
        },
        onDelete: "SET NULL",
      });
    };
  
    return Registrations;
  };
</file>

<file path="server/routes/AIInsightsRoutes.js">
// routes/AIInsightsRoutes.js
const express = require('express');
const router = express.Router();
const { validateToken } = require('../middlewares/AuthMiddleware');
const SentimentService = require('../services/SentimentService');
const RecommendationService = require('../services/RecommendationService');
const { Events, Reviews, EventAnalytics, Users } = require('../models');
const Sequelize = require('sequelize');
const { Op } = Sequelize;

/**
 * Get AI-powered insights for a specific event
 * Accessible by any user
 */
router.get('/event/:eventId', async (req, res) => {
  try {
    const { eventId } = req.params;
    
    // Get event details with review data
    const event = await Events.findByPk(eventId, {
      include: [
        {
          model: Reviews,
          attributes: ['id', 'review_text', 'rating', 'sentiment', 'username', 'createdAt'],
        }
      ],
    });
    
    if (!event) {
      return res.status(404).json({ error: 'Event not found' });
    }
    
    // Get sentiment analysis and insights
    const insights = await SentimentService.analyzeEventReviews(eventId);
    
    // Return insights data
    res.json({
      event: {
        id: event.id,
        title: event.title,
        date: event.date,
        category: event.category,
        location: event.location
      },
      insights: insights.insights,
      sentimentBreakdown: insights.sentimentBreakdown,
      averageRating: insights.averageRating,
      reviewCount: insights.reviewCount,
      topTopics: insights.topTopics || []
    });
  } catch (error) {
    console.error('Error fetching AI insights:', error);
    res.status(500).json({ error: 'Failed to fetch AI insights' });
  }
});

/**
 * Compare AI insights across multiple events
 * Admin only endpoint
 */
router.get('/compare', validateToken, async (req, res) => {
  try {
    if (!req.user.isAdmin) {
      return res.status(403).json({ error: 'Access denied' });
    }
    
    const { eventIds } = req.query;
    
    if (!eventIds) {
      return res.status(400).json({ error: 'Event IDs are required' });
    }
    
    const idList = eventIds.split(',').map(id => parseInt(id.trim(), 10));
    
    // Validate IDs
    if (idList.some(id => isNaN(id))) {
      return res.status(400).json({ error: 'Invalid event ID format' });
    }
    
    // Get insights for each event
    const insights = [];
    for (const id of idList) {
      try {
        const eventInsights = await SentimentService.analyzeEventReviews(id);
        insights.push(eventInsights);
      } catch (error) {
        console.error(`Error analyzing event ${id}:`, error);
        // Skip events with errors
      }
    }
    
    res.json({
      comparisonData: insights,
      comparisonSummary: generateComparisonSummary(insights)
    });
  } catch (error) {
    console.error('Error comparing AI insights:', error);
    res.status(500).json({ error: 'Failed to compare AI insights' });
  }
});

/**
 * Get personalized event recommendations for a user
 * Requires authentication
 */
router.get('/recommendations', validateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    
    // Get user's interests (from request query or user profile)
    const { interests = '' } = req.query;
    const interestsArray = interests.split(',').map(i => i.trim().toLowerCase());
    
    // Get user's previous reviews/ratings
    const userReviews = await Reviews.findAll({
      where: { UserId: userId },
      include: [{ model: Events }]
    });
    
    // Get recommendations using the service
    const recommendations = await RecommendationService.getPersonalizedRecommendations(
      userId,
      interestsArray,
      userReviews
    );
    
    res.json({
      recommendations,
      explanation: 'These events are recommended based on your preferences, past reviews, and events similar to ones you enjoyed.'
    });
  } catch (error) {
    console.error('Error getting recommendations:', error);
    res.status(500).json({ error: 'Failed to get personalized recommendations' });
  }
});

/**
 * Get trend analysis across all events (admin only)
 */
router.get('/trends', validateToken, async (req, res) => {
  try {
    if (!req.user.isAdmin) {
      return res.status(403).json({ error: 'Access denied' });
    }
    
    // Time range filter (default to last 6 months)
    const { months = 6 } = req.query;
    const startDate = new Date();
    startDate.setMonth(startDate.getMonth() - parseInt(months, 10));
    
    // Get review data with timestamps
    const reviews = await Reviews.findAll({
      where: {
        createdAt: { [Op.gte]: startDate }
      },
      include: [{ model: Events }],
      order: [['createdAt', 'ASC']]
    });
    
    // Process data for trend analysis
    const trends = processTrendData(reviews);
    
    res.json({
      periodMonths: parseInt(months, 10),
      trends
    });
  } catch (error) {
    console.error('Error analyzing trends:', error);
    res.status(500).json({ error: 'Failed to analyze trends' });
  }
});

/**
 * Process trend data from reviews
 */
function processTrendData(reviews) {
  // Group reviews by month
  const reviewsByMonth = {};
  
  reviews.forEach(review => {
    const date = new Date(review.createdAt);
    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
    
    if (!reviewsByMonth[monthKey]) {
      reviewsByMonth[monthKey] = [];
    }
    
    reviewsByMonth[monthKey].push(review);
  });
  
  // Calculate metrics for each month
  const trendData = [];
  
  Object.entries(reviewsByMonth).forEach(([month, monthReviews]) => {
    const totalRating = monthReviews.reduce((sum, r) => sum + r.rating, 0);
    const avgRating = totalRating / monthReviews.length;
    
    const sentimentCounts = monthReviews.reduce((counts, r) => {
      counts[r.sentiment] = (counts[r.sentiment] || 0) + 1;
      return counts;
    }, { positive: 0, neutral: 0, negative: 0 });
    
    trendData.push({
      month,
      reviewCount: monthReviews.length,
      averageRating: avgRating,
      sentimentCounts
    });
  });
  
  // Sort by month
  trendData.sort((a, b) => a.month.localeCompare(b.month));
  
  return trendData;
}

/**
 * Generate a summary of the comparison data
 */
function generateComparisonSummary(insights) {
  if (insights.length === 0) {
    return { message: 'No events to compare' };
  }
  
  const averageRatings = insights.map(i => ({
    event: i.event,
    rating: i.averageRating
  }));
  
  const bestRated = averageRatings.reduce((best, current) => 
    current.rating > best.rating ? current : best
  , { event: '', rating: 0 });
  
  const worstRated = averageRatings.reduce((worst, current) => 
    current.rating < worst.rating ? current : worst
  , { event: '', rating: 5 });
  
  // Check if all events have sentiment data
  const allHaveSentiment = insights.every(i => i.sentimentBreakdown);
  
  let mostPositive = { event: '', score: 0 };
  let mostNegative = { event: '', score: 0 };
  
  if (allHaveSentiment) {
    mostPositive = insights.reduce((best, current) => 
      (current.sentimentBreakdown?.positive || 0) > best.score 
        ? { event: current.event, score: current.sentimentBreakdown.positive } 
        : best
    , { event: '', score: 0 });
    
    mostNegative = insights.reduce((worst, current) => 
      (current.sentimentBreakdown?.negative || 0) > worst.score 
        ? { event: current.event, score: current.sentimentBreakdown.negative } 
        : worst
    , { event: '', score: 0 });
  }
  
  return {
    comparedEvents: insights.length,
    bestRated,
    worstRated,
    mostPositive: allHaveSentiment ? mostPositive : null,
    mostNegative: allHaveSentiment ? mostNegative : null,
    averageRatingAcrossEvents: averageRatings.reduce((sum, curr) => sum + curr.rating, 0) / insights.length
  };
}

module.exports = router;
</file>

<file path="server/routes/Analytics.js">
// routes/Analytics.js
const express = require("express");
const router = express.Router();
const { Events, Reviews, EventAnalytics } = require("../models");
const { validateToken } = require("../middlewares/AuthMiddleware");
const Sequelize = require("sequelize");
const Op = Sequelize.Op;

// Get analytics for all events (admin only)
router.get("/", validateToken, async (req, res) => {
  try {
    if (!req.isAdmin) {
      return res.status(403).json({ error: "Access denied" });
    }

    const analytics = await EventAnalytics.findAll({
      include: [{ model: Events, attributes: ["title", "category", "date"] }]
    });

    res.json(analytics);
  } catch (error) {
    console.error("Error fetching analytics:", error);
    res.status(500).json({ error: "Failed to fetch analytics" });
  }
});

// Get analytics for a specific event
router.get("/:eventId", async (req, res) => {
  try {
    const eventId = req.params.eventId;

    // Get event analytics
    let analytics = await EventAnalytics.findOne({
      where: { event_id: eventId }
    });

    // If analytics don't exist yet, create them
    if (!analytics) {
      // Create default analytics
      analytics = await createDefaultAnalytics(eventId);
    }

    // Get event information
    const event = await Events.findByPk(eventId, {
      attributes: ["id", "title", "category", "date", "image"]
    });

    if (!event) {
      return res.status(404).json({ error: "Event not found" });
    }

    // Calculate review statistics
    const reviews = await Reviews.findAll({
      where: { EventId: eventId }
    });

    // Update analytics with review data
    await updateAnalyticsWithReviews(analytics, reviews);

    res.json({
      event,
      analytics: {
        id: analytics.id,
        attendance_data: analytics.attendance_data,
        satisfaction_data: analytics.satisfaction_data,
        rating_breakdown: analytics.rating_breakdown,
        engagement_over_time: analytics.engagement_over_time,
        ai_insights: analytics.ai_insights,
        sentiment_positive_count: analytics.sentiment_positive_count,
        sentiment_neutral_count: analytics.sentiment_neutral_count,
        sentiment_negative_count: analytics.sentiment_negative_count,
        total_reviews: analytics.total_reviews,
        average_rating: analytics.average_rating,
        total_attendance: analytics.total_attendance,
        sentiment_score: calculateSentimentScore(analytics)
      }
    });
  } catch (error) {
    console.error("Error fetching event analytics:", error);
    res.status(500).json({ error: "Failed to fetch analytics" });
  }
});

// Generate or update AI insights for an event
router.post("/:eventId/insights", validateToken, async (req, res) => {
  try {
    if (!req.isAdmin) {
      return res.status(403).json({ error: "Access denied" });
    }

    const eventId = req.params.eventId;
    
    // Get event analytics
    let analytics = await EventAnalytics.findOne({
      where: { event_id: eventId }
    });

    if (!analytics) {
      analytics = await createDefaultAnalytics(eventId);
    }

    // Get event details
    const event = await Events.findByPk(eventId);
    
    if (!event) {
      return res.status(404).json({ error: "Event not found" });
    }

    // Get all reviews for this event
    const reviews = await Reviews.findAll({
      where: { EventId: eventId }
    });

    // Generate new insights based on reviews
    const insights = generateAIInsights(event, reviews);
    
    // Update analytics with new insights
    analytics.ai_insights = insights;
    await analytics.save();

    res.json({ message: "AI insights generated successfully", insights });
  } catch (error) {
    console.error("Error generating AI insights:", error);
    res.status(500).json({ error: "Failed to generate insights" });
  }
});

// Helper function to create default analytics for an event
async function createDefaultAnalytics(eventId) {
  try {
    // Sample default data
    const defaultAttendanceData = [
      { day: 'Day 1', attendance: 0 },
      { day: 'Day 2', attendance: 0 },
      { day: 'Day 3', attendance: 0 }
    ];

    const defaultSatisfactionData = [
      { name: 'Very Satisfied', value: 0 },
      { name: 'Satisfied', value: 0 },
      { name: 'Neutral', value: 0 },
      { name: 'Dissatisfied', value: 0 }
    ];

    const defaultRatingBreakdown = [
      { category: 'Content', rating: 0 },
      { category: 'Speakers', rating: 0 },
      { category: 'Venue', rating: 0 },
      { category: 'Organization', rating: 0 },
      { category: 'Value', rating: 0 }
    ];

    const defaultEngagementOverTime = [
      { time: '9 AM', engagement: 0 },
      { time: '10 AM', engagement: 0 },
      { time: '11 AM', engagement: 0 },
      { time: '12 PM', engagement: 0 },
      { time: '1 PM', engagement: 0 },
      { time: '2 PM', engagement: 0 },
      { time: '3 PM', engagement: 0 },
      { time: '4 PM', engagement: 0 },
      { time: '5 PM', engagement: 0 }
    ];

    const defaultAIInsights = [
      "No insights available yet. Generate insights when more data is available."
    ];

    // Create analytics record
    const analytics = await EventAnalytics.create({
      event_id: eventId,
      attendance_data: defaultAttendanceData,
      satisfaction_data: defaultSatisfactionData,
      rating_breakdown: defaultRatingBreakdown,
      engagement_over_time: defaultEngagementOverTime,
      ai_insights: defaultAIInsights,
      sentiment_positive_count: 0,
      sentiment_neutral_count: 0,
      sentiment_negative_count: 0,
      total_reviews: 0,
      average_rating: 0,
      total_attendance: 0
    });

    return analytics;
  } catch (error) {
    console.error("Error creating default analytics:", error);
    throw error;
  }
}

// Helper function to update analytics with review data
async function updateAnalyticsWithReviews(analytics, reviews) {
  try {
    // Count sentiments
    let positiveCount = 0;
    let neutralCount = 0;
    let negativeCount = 0;
    let totalRating = 0;

    reviews.forEach(review => {
      if (review.sentiment === 'positive') positiveCount++;
      else if (review.sentiment === 'neutral') neutralCount++;
      else if (review.sentiment === 'negative') negativeCount++;

      if (review.rating) totalRating += review.rating;
    });

    // Update analytics
    analytics.sentiment_positive_count = positiveCount;
    analytics.sentiment_neutral_count = neutralCount;
    analytics.sentiment_negative_count = negativeCount;
    analytics.total_reviews = reviews.length;
    analytics.average_rating = reviews.length > 0 ? totalRating / reviews.length : 0;

    // Update satisfaction data based on ratings
    if (reviews.length > 0) {
      const satisfactionData = analytics.satisfaction_data;
      const fiveStars = reviews.filter(r => r.rating === 5).length;
      const fourStars = reviews.filter(r => r.rating === 4).length;
      const threeStars = reviews.filter(r => r.rating === 3).length;
      const oneTwoStars = reviews.filter(r => r.rating < 3).length;

      satisfactionData[0].value = Math.round((fiveStars / reviews.length) * 100);
      satisfactionData[1].value = Math.round((fourStars / reviews.length) * 100);
      satisfactionData[2].value = Math.round((threeStars / reviews.length) * 100);
      satisfactionData[3].value = Math.round((oneTwoStars / reviews.length) * 100);
      
      analytics.satisfaction_data = satisfactionData;
    }

    await analytics.save();
    return analytics;
  } catch (error) {
    console.error("Error updating analytics with reviews:", error);
    throw error;
  }
}

// Helper function to calculate sentiment score
function calculateSentimentScore(analytics) {
  const total = analytics.sentiment_positive_count + 
                analytics.sentiment_neutral_count + 
                analytics.sentiment_negative_count;
  
  if (total === 0) return 0;
  
  // Calculate weighted score: positive counts fully, neutral counts as half positive
  return Math.round(((analytics.sentiment_positive_count + (analytics.sentiment_neutral_count * 0.5)) / total) * 100);
}

// Helper function to generate AI insights based on reviews
function generateAIInsights(event, reviews) {
  try {
    if (reviews.length < 5) {
      return ["Not enough reviews to generate meaningful insights."];
    }

    const insights = [];
    
    // Calculate average rating
    const avgRating = reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length;
    insights.push(`Average rating is ${avgRating.toFixed(1)} out of 5 stars.`);
    
    // Analyze sentiment distribution
    const positiveSentiment = reviews.filter(r => r.sentiment === 'positive').length;
    const sentimentPercent = Math.round((positiveSentiment / reviews.length) * 100);
    insights.push(`${sentimentPercent}% of reviews express positive sentiment.`);
    
    // Find patterns in positive reviews
    const positiveReviews = reviews.filter(r => r.sentiment === 'positive');
    if (positiveReviews.length > 0) {
      insights.push("Common themes in positive reviews include organization, content quality, and networking opportunities.");
    }
    
    // Find patterns in negative reviews
    const negativeReviews = reviews.filter(r => r.sentiment === 'negative');
    if (negativeReviews.length > 0) {
      insights.push("Areas for improvement based on feedback: venue facilities and session timing.");
    }
    
    // Add category-specific insight
    insights.push(`Attendees showed highest engagement during ${event.category}-related sessions.`);
    
    return insights;
  } catch (error) {
    console.error("Error generating AI insights:", error);
    return ["Error generating insights. Please try again later."];
  }
}

module.exports = router;
</file>

<file path="server/routes/Payments.js">
// server/routes/Payments.js
const express = require('express');
const router = express.Router();
const { validateToken } = require('../middlewares/AuthMiddleware');
const { Events, Registrations } = require('../models');

// Placeholder route for future Stripe integration
router.post('/create-intent', validateToken, async (req, res) => {
  try {
    const { eventId, amount, email } = req.body;
    
    // Verify the event exists
    const event = await Events.findByPk(eventId);
    if (!event) {
      return res.status(404).json({ error: 'Event not found' });
    }
    
    // Placeholder for Stripe payment intent
    // This will be implemented when Stripe is integrated
    res.json({ 
      clientSecret: 'placeholder_for_future_stripe_integration',
      message: 'Payment system coming soon'
    });
  } catch (error) {
    console.error('Error creating payment intent:', error);
    res.status(500).json({ error: 'Failed to process payment request' });
  }
});

// Update registration payment status
router.put('/:registrationId/update', validateToken, async (req, res) => {
  try {
    const { registrationId } = req.params;
    const { paymentStatus, paymentMethod } = req.body;
    
    const registration = await Registrations.findByPk(registrationId);
    if (!registration) {
      return res.status(404).json({ error: 'Registration not found' });
    }
    
    await registration.update({
      paymentStatus,
      paymentMethod,
      paymentDate: new Date()
    });
    
    res.json({ 
      message: 'Payment status updated',
      registration: {
        id: registration.id,
        paymentStatus: registration.paymentStatus
      }
    });
  } catch (error) {
    console.error('Error updating payment status:', error);
    res.status(500).json({ error: 'Failed to update payment status' });
  }
});

module.exports = router;
</file>

<file path="server/routes/Recommendations.js">
const express = require("express");
const router = express.Router();
const { validateToken } = require("../middlewares/AuthMiddleware");
const { Events, Reviews, Users } = require("../models");
const Sequelize = require("sequelize");
const { Op } = Sequelize;

/**
 * Get personalized recommendations for a user
 */
router.get("/", validateToken, async (req, res) => {
    try {
        // Extract userId and interests from query parameters
        const { userId, interests } = req.query;

        // Validate user ID from token middleware
        if (!req.user || !req.user.id) {
            return res.status(400).json({ 
                error: 'User ID is required',
                recommendations: [],
                explanation: 'Could not generate recommendations without a user ID'
            });
        }

        // Ensure the requested userId matches the token's userId
        const parsedUserId = parseInt(userId || req.user.id, 10);
        if (parsedUserId !== req.user.id) {
            return res.status(403).json({ 
                error: 'Unauthorized access',
                recommendations: [],
                explanation: 'User ID mismatch'
            });
        }

        // Convert interests to array if exists
        const interestArray = interests 
            ? (typeof interests === 'string' ? interests.split(',') : interests)
            : [];

        // Fetch user's previous reviews
        const userReviews = await Reviews.findAll({
            where: { UserId: parsedUserId },
            include: [{ model: Events }]
        });

        // If no reviews, rely on interests or popular events
        let recommendations = [];
        if (userReviews.length === 0) {
            recommendations = await getRecommendationsByInterests(parsedUserId, interestArray);
        } else {
            recommendations = await getCollaborativeFilteringRecommendations(
                parsedUserId, 
                userReviews,
                interestArray
            );
        }

        // Respond with recommendations
        res.json({
            recommendations,
            explanation: recommendations.length > 0 
                ? 'Personalized recommendations based on your profile and interests' 
                : 'No recommendations found at this time'
        });

    } catch (error) {
        console.error('Recommendations generation error:', error);
        res.status(500).json({ 
            error: 'Failed to generate recommendations',
            recommendations: [],
            explanation: 'An unexpected error occurred while generating recommendations'
        });
    }
});

// Helper function for collaborative filtering recommendations
async function getCollaborativeFilteringRecommendations(userId, userReviews, interests) {
    try {
        // Find highly rated events by the user
        const likedEventIds = userReviews
            .filter(review => review.rating >= 4)
            .map(review => review.EventId);

        // Get liked categories
        const likedCategories = new Set();
        userReviews
            .filter(review => review.rating >= 4 && review.Event?.category)
            .forEach(review => likedCategories.add(review.Event.category));

        // Find similar users based on liked events
        const similarUserReviews = await Reviews.findAll({
            where: {
                EventId: { [Op.in]: likedEventIds },
                rating: { [Op.gte]: 4 },
                UserId: { [Op.ne]: userId }
            },
            include: [{ model: Events }]
        });

        // Group recommendations by event
        const eventRecommendations = new Map();
        similarUserReviews.forEach(review => {
            if (review.Event) {
                const existing = eventRecommendations.get(review.EventId) || {
                    count: 0,
                    event: review.Event
                };
                eventRecommendations.set(review.EventId, {
                    count: existing.count + 1,
                    event: existing.event
                });
            }
        });

        // Convert to recommendations
        const recommendations = Array.from(eventRecommendations.entries())
            .filter(([_, { event }]) => {
                // Only future events
                return new Date(event.date) > new Date();
            })
            .map(([_, { count, event }]) => ({
                id: event.id,
                title: event.title,
                date: event.date,
                category: event.category,
                location: event.location,
                image: event.image,
                matchScore: Math.min(count * 20, 85), // Max 85% match
                reason: 'People with similar tastes enjoyed this event'
            }));

        // If not enough recommendations, add interest-based recommendations
        if (recommendations.length < 5 && interests && interests.length) {
            const interestRecs = await getRecommendationsByInterests(userId, interests);
            recommendations.push(...interestRecs);
        }

        return recommendations.slice(0, 10);
    } catch (error) {
        console.error('Collaborative filtering error:', error);
        return [];
    }
}

// Helper function for interest-based recommendations
async function getRecommendationsByInterests(userId, interests = []) {
    try {
        // If no interests, get popular events
        if (!interests || interests.length === 0) {
            return await getPopularEvents(userId);
        }

        // Find events matching interests
        const events = await Events.findAll({
            where: {
                [Op.or]: interests.map(interest => ({
                    [Op.or]: [
                        { category: { [Op.like]: `%${interest}%` } },
                        { title: { [Op.like]: `%${interest}%` } },
                        { description: { [Op.like]: `%${interest}%` } }
                    ]
                })),
                date: { [Op.gte]: new Date() }
            },
            limit: 10
        });

        // Get user's past reviews to exclude reviewed events
        const userReviews = await Reviews.findAll({
            where: { UserId: userId },
            attributes: ['EventId']
        });
        const reviewedEventIds = userReviews.map(r => r.EventId);

        return events
            .filter(event => !reviewedEventIds.includes(event.id))
            .map(event => ({
                id: event.id,
                title: event.title,
                date: event.date,
                category: event.category,
                location: event.location,
                image: event.image,
                matchScore: 70, // Base score for interest match
                reason: 'Matches your interests'
            }));
    } catch (error) {
        console.error('Interest-based recommendations error:', error);
        return [];
    }
}

// Helper function for popular events
async function getPopularEvents(userId) {
    try {
        // Find most highly-rated upcoming events
        const popularEvents = await Events.findAll({
            include: [{
                model: Reviews,
                attributes: []
            }],
            attributes: [
                'id', 'title', 'date', 'category', 'location', 'image',
                [Sequelize.fn('AVG', Sequelize.col('Reviews.rating')), 'avgRating'],
                [Sequelize.fn('COUNT', Sequelize.col('Reviews.id')), 'reviewCount']
            ],
            where: {
                date: { [Op.gte]: new Date() }
            },
            group: ['Events.id'],
            having: Sequelize.literal('COUNT(Reviews.id) > 0'),
            order: [[Sequelize.literal('avgRating'), 'DESC']],
            limit: 10
        });

        // Get user's past reviews
        const userReviews = await Reviews.findAll({
            where: { UserId: userId },
            attributes: ['EventId']
        });
        const reviewedEventIds = userReviews.map(r => r.EventId);

        return popularEvents
            .filter(event => !reviewedEventIds.includes(event.id))
            .map(event => {
                const avgRating = event.getDataValue('avgRating') || 4;
                const reviewCount = event.getDataValue('reviewCount') || 0;

                // Calculate match score
                const normalizedRating = ((avgRating - 1) / 4) * 100;
                const popularityBonus = Math.min(reviewCount * 2, 20);
                const matchScore = Math.min(Math.round(normalizedRating + popularityBonus), 100);

                return {
                    id: event.id,
                    title: event.title,
                    date: event.date,
                    category: event.category,
                    location: event.location,
                    image: event.image,
                    matchScore,
                    reason: 'Popular highly-rated event'
                };
            });
    } catch (error) {
        console.error('Popular events error:', error);
        return [];
    }
}

module.exports = router;
</file>

<file path="server/routes/Social.js">
const express = require("express");
const router = express.Router();
const passport = require("passport");
const FacebookStrategy = require("passport-facebook").Strategy;
const LinkedInStrategy = require("passport-linkedin-oauth2").Strategy;
const jwt = require("jsonwebtoken");
const axios = require("axios");
const { Users } = require("../models");
require("dotenv").config();

// Initialize Passport
const initializePassport = (app) => {
  app.use(passport.initialize());
  
  // Facebook Strategy
  passport.use(new FacebookStrategy({
    clientID: process.env.FACEBOOK_APP_ID,
    clientSecret: process.env.FACEBOOK_APP_SECRET,
    callbackURL: `${process.env.SERVER_URL || 'http://localhost:3001'}/auth/facebook/callback`,
    profileFields: ['id', 'displayName', 'email']
  },
  async (accessToken, refreshToken, profile, done) => {
    try {
      // Find or create user with Facebook profile
      let user = await Users.findOne({ where: { facebookId: profile.id } });
      
      if (!user) {
        // Check if user exists with the same email
        if (profile.emails && profile.emails.length > 0) {
          user = await Users.findOne({ where: { email: profile.emails[0].value } });
          
          if (user) {
            // Link Facebook to existing account
            user.facebookId = profile.id;
            await user.save();
          }
        }
        
        // No user found, we don't create one in this case
        // User must register first through the app
      }
      
      return done(null, {
        id: user ? user.id : null,
        profile,
        accessToken,
        provider: 'facebook'
      });
    } catch (error) {
      return done(error);
    }
  }));
  
  // LinkedIn Strategy
  passport.use(new LinkedInStrategy({
    clientID: process.env.LINKEDIN_CLIENT_ID,
    clientSecret: process.env.LINKEDIN_CLIENT_SECRET,
    callbackURL: `${process.env.SERVER_URL || 'http://localhost:3001'}/auth/linkedin/callback`,
    scope: ['r_emailaddress', 'r_liteprofile', 'w_member_social']
  },
  async (accessToken, refreshToken, profile, done) => {
    try {
      // Find or create user with LinkedIn profile
      let user = await Users.findOne({ where: { linkedinId: profile.id } });
      
      if (!user) {
        // Check if user exists with the same email
        if (profile.emails && profile.emails.length > 0) {
          user = await Users.findOne({ where: { email: profile.emails[0].value } });
          
          if (user) {
            // Link LinkedIn to existing account
            user.linkedinId = profile.id;
            await user.save();
          }
        }
        
        // No user found, we don't create one in this case
        // User must register first through the app
      }
      
      return done(null, {
        id: user ? user.id : null,
        profile,
        accessToken,
        provider: 'linkedin'
      });
    } catch (error) {
      return done(error);
    }
  }));
  
  // Serialize and deserialize user
  passport.serializeUser((user, done) => {
    done(null, user);
  });
  
  passport.deserializeUser((user, done) => {
    done(null, user);
  });
};

// Routes for Facebook authentication
router.get("/facebook", passport.authenticate("facebook", { 
  scope: ["email", "public_profile"], 
  session: false 
}));

router.get("/facebook/callback", (req, res, next) => {
  passport.authenticate("facebook", { session: false }, (err, user) => {
    if (err) {
      return res.send(`
        <script>
          window.opener.postMessage(
            { type: 'oauth-callback', provider: 'facebook', success: false, error: 'Authentication failed' },
            '${process.env.CLIENT_URL || 'http://localhost:3000'}'
          );
          window.close();
        </script>
      `);
    }
    
    if (!user) {
      return res.send(`
        <script>
          window.opener.postMessage(
            { type: 'oauth-callback', provider: 'facebook', success: false, error: 'Authentication failed' },
            '${process.env.CLIENT_URL || 'http://localhost:3000'}'
          );
          window.close();
        </script>
      `);
    }
    
    // Create JWT token with provider and social access token
    const token = jwt.sign(
      { 
        provider: 'facebook',
        socialId: user.profile.id,
        userId: user.id,
        accessToken: user.accessToken
      },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );
    
    // Send token back to client via postMessage
    return res.send(`
      <script>
        window.opener.postMessage(
          { type: 'oauth-callback', provider: 'facebook', success: true, token: '${token}' },
          '${process.env.CLIENT_URL || 'http://localhost:3000'}'
        );
        window.close();
      </script>
    `);
  })(req, res, next);
});

// Routes for LinkedIn authentication
router.get("/linkedin", passport.authenticate("linkedin", { session: false }));

router.get("/linkedin/callback", (req, res, next) => {
  passport.authenticate("linkedin", { session: false }, (err, user) => {
    if (err) {
      return res.send(`
        <script>
          window.opener.postMessage(
            { type: 'oauth-callback', provider: 'linkedin', success: false, error: 'Authentication failed' },
            '${process.env.CLIENT_URL || 'http://localhost:3000'}'
          );
          window.close();
        </script>
      `);
    }
    
    if (!user) {
      return res.send(`
        <script>
          window.opener.postMessage(
            { type: 'oauth-callback', provider: 'linkedin', success: false, error: 'Authentication failed' },
            '${process.env.CLIENT_URL || 'http://localhost:3000'}'
          );
          window.close();
        </script>
      `);
    }
    
    // Create JWT token with provider and social access token
    const token = jwt.sign(
      { 
        provider: 'linkedin',
        socialId: user.profile.id,
        userId: user.id,
        accessToken: user.accessToken 
      },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );
    
    // Send token back to client via postMessage
    return res.send(`
      <script>
        window.opener.postMessage(
          { type: 'oauth-callback', provider: 'linkedin', success: true, token: '${token}' },
          '${process.env.CLIENT_URL || 'http://localhost:3000'}'
        );
        window.close();
      </script>
    `);
  })(req, res, next);
});

module.exports = { router, initializePassport };
</file>

<file path="server/routes/userRoutes.js">
// backend (Express route)
const express = require("express");
const router = express.Router();
const { Users, Reviews, Events } = require("../models");
const { validateToken } = require("../middlewares/AuthMiddleware");

// Get the logged-in user's profile and their reviews
router.get("/profile", validateToken, async (req, res) => {
    try {
        if (!req.user || !req.user.id) {
            return res.status(400).json({ message: "Invalid user data" });
        }

        const user = await Users.findOne({
            where: { id: req.user.id },
            attributes: ["id", "username", "isAdmin"],
            include: [
                {
                    model: Reviews,
                    attributes: ["id", "review_text", "rating", "sentiment", "admin_response", "createdAt"],
                    include: [
                        {
                            model: Events,
                            attributes: ["id", "title", "date"],
                        },
                    ],
                },
            ],
        });

        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }

        res.json({
            id: user.id,
            username: user.username,
            isAdmin: user.isAdmin,
            reviews: user.Reviews.length ? user.Reviews.map((review) => ({
                id: review.id,
                text: review.review_text,
                rating: review.rating,
                sentiment: review.sentiment,
                adminResponse: review.admin_response,
                createdAt: review.createdAt,
                event: review.Event ? { id: review.Event.id, title: review.Event.title, date: review.Event.date } : null,
            })) : [],
        });
    } catch (error) {
        console.error("Error fetching user profile:", error);
        res.status(500).json({ message: "Server error", error: error.message });
    }
});

module.exports = router;
</file>

<file path="server/services/PredictiveAnalyticsService.js">
// services/PredictiveAnalyticsService.js - Enhanced version

class PredictiveAnalyticsService {
  /**
   * Predict expected attendance for an upcoming event with enhanced ML-based forecasting
   * @param {number} eventId - Event ID
   * @returns {Object} Predicted attendance and confidence
   */
  static async predictAttendance(eventId) {
    try {
      // Get event details
      const event = await Events.findByPk(eventId);
      if (!event) {
        throw new Error('Event not found');
      }
      
      // Find similar past events (by category, location, etc.)
      const similarEvents = await Events.findAll({
        where: {
          id: { [Op.ne]: eventId },
          category: event.category,
          date: { [Op.lt]: new Date() } // Past events only
        },
        include: [{ model: EventAnalytics }, { model: Reviews }]
      });
      
      if (similarEvents.length === 0) {
        // No similar events to base prediction on
        // Return a default prediction based on category averages
        return this.getDefaultAttendancePrediction(event.category);
      }
      
      // Calculate attendance metrics from similar events
      const attendanceData = similarEvents
        .filter(se => se.EventAnalytic && se.EventAnalytic.total_attendance > 0)
        .map(se => ({
          attendance: se.EventAnalytic.total_attendance,
          rating: se.Reviews.length > 0 
            ? se.Reviews.reduce((sum, r) => sum + r.rating, 0) / se.Reviews.length 
            : 0,
          reviewCount: se.Reviews.length,
          isWeekend: new Date(se.date).getDay() === 0 || new Date(se.date).getDay() === 6,
          isEvening: se.time && new Date(`2000-01-01T${se.time}`).getHours() >= 17,
          month: new Date(se.date).getMonth(),
          sentiment: this.calculateEventSentiment(se.Reviews)
        }));
      
      if (attendanceData.length === 0) {
        return this.getDefaultAttendancePrediction(event.category);
      }
      
      // Apply enhanced prediction algorithm that considers multiple factors
      const predictedAttendance = this.runAttendancePredictionModel(
        attendanceData, 
        {
          isWeekend: new Date(event.date).getDay() === 0 || new Date(event.date).getDay() === 6,
          isEvening: event.time && new Date(`2000-01-01T${event.time}`).getHours() >= 17,
          month: new Date(event.date).getMonth(),
          location: event.location
        }
      );
      
      // Calculate confidence level based on sample size and variance
      let confidenceLevel = 'medium';
      if (attendanceData.length >= 5) {
        confidenceLevel = 'high';
      } else if (attendanceData.length < 2) {
        confidenceLevel = 'low';
      }
      
      // Calculate potential attendance range for better planning
      const attendanceVariance = this.calculateVariance(attendanceData.map(d => d.attendance));
      const stdDev = Math.sqrt(attendanceVariance);
      const minAttendance = Math.max(0, Math.round(predictedAttendance - stdDev));
      const maxAttendance = Math.round(predictedAttendance + stdDev);
      
      return {
        predictedAttendance: Math.round(predictedAttendance),
        minAttendance,
        maxAttendance,
        confidenceLevel,
        similarEventsCount: attendanceData.length,
        influencingFactors: this.getAttendanceInfluencingFactors(attendanceData, event)
      };
    } catch (error) {
      console.error('Error predicting attendance:', error);
      throw error;
    }
  }
  
  /**
   * Calculate variance for attendance values
   */
  static calculateVariance(values) {
    if (values.length <= 1) return 0;
    
    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;
    const squaredDiffs = values.map(val => Math.pow(val - mean, 2));
    return squaredDiffs.reduce((sum, val) => sum + val, 0) / values.length;
  }
  
  /**
   * Run the enhanced attendance prediction model
   */
  static runAttendancePredictionModel(attendanceData, eventFeatures) {
    // Base prediction on average attendance
    const baseAttendance = attendanceData.reduce((sum, data) => sum + data.attendance, 0) / attendanceData.length;
    
    // Apply adjustments based on various factors
    let adjustedAttendance = baseAttendance;
    
    // Weekend adjustment (weekends typically have different attendance patterns)
    const weekendEvents = attendanceData.filter(d => d.isWeekend);
    const weekdayEvents = attendanceData.filter(d => !d.isWeekend);
    
    if (weekendEvents.length > 0 && weekdayEvents.length > 0) {
      const weekendAvg = weekendEvents.reduce((sum, d) => sum + d.attendance, 0) / weekendEvents.length;
      const weekdayAvg = weekdayEvents.reduce((sum, d) => sum + d.attendance, 0) / weekdayEvents.length;
      
      if (eventFeatures.isWeekend) {
        adjustedAttendance = weekendAvg;
      } else {
        adjustedAttendance = weekdayAvg;
      }
    }
    
    // Time of day adjustment
    const eveningEvents = attendanceData.filter(d => d.isEvening);
    const dayEvents = attendanceData.filter(d => !d.isEvening);
    
    if (eveningEvents.length > 0 && dayEvents.length > 0) {
      const eveningFactor = (eveningEvents.reduce((sum, d) => sum + d.attendance, 0) / eveningEvents.length) / 
                           (dayEvents.reduce((sum, d) => sum + d.attendance, 0) / dayEvents.length);
      
      if (eventFeatures.isEvening) {
        adjustedAttendance *= eveningFactor;
      }
    }
    
    // Seasonal adjustment
    const monthlyAttendance = {};
    attendanceData.forEach(d => {
      if (!monthlyAttendance[d.month]) {
        monthlyAttendance[d.month] = [];
      }
      monthlyAttendance[d.month].push(d.attendance);
    });
    
    const monthAverages = {};
    Object.keys(monthlyAttendance).forEach(month => {
      monthAverages[month] = monthlyAttendance[month].reduce((sum, val) => sum + val, 0) / monthlyAttendance[month].length;
    });
    
    if (Object.keys(monthAverages).length > 1 && monthAverages[eventFeatures.month]) {
      const overallAvg = Object.values(monthAverages).reduce((sum, val) => sum + val, 0) / Object.values(monthAverages).length;
      const monthFactor = monthAverages[eventFeatures.month] / overallAvg;
      
      adjustedAttendance *= monthFactor;
    }
    
    // Location adjustment (if applicable)
    const locationFactor = this.getLocationFactor(eventFeatures.location);
    adjustedAttendance *= locationFactor;
    
    return adjustedAttendance;
  }
  
  /**
   * Identify factors that influence attendance for more explainable predictions
   */
  static getAttendanceInfluencingFactors(attendanceData, event) {
    const factors = [];
    
    // Check if weekend/weekday makes a difference
    const weekendEvents = attendanceData.filter(d => d.isWeekend);
    const weekdayEvents = attendanceData.filter(d => !d.isWeekend);
    
    if (weekendEvents.length > 0 && weekdayEvents.length > 0) {
      const weekendAvg = weekendEvents.reduce((sum, d) => sum + d.attendance, 0) / weekendEvents.length;
      const weekdayAvg = weekdayEvents.reduce((sum, d) => sum + d.attendance, 0) / weekdayEvents.length;
      
      const difference = ((Math.max(weekendAvg, weekdayAvg) / Math.min(weekendAvg, weekdayAvg)) - 1) * 100;
      
      if (difference > 10) {
        if (weekendAvg > weekdayAvg) {
          factors.push({
            factor: 'Weekend events',
            impact: 'positive',
            description: `Weekend events in this category have ${difference.toFixed(0)}% higher attendance than weekday events`
          });
        } else {
          factors.push({
            factor: 'Weekday events',
            impact: 'positive',
            description: `Weekday events in this category have ${difference.toFixed(0)}% higher attendance than weekend events`
          });
        }
      }
    }
    
    // Check if evening/day makes a difference
    const eveningEvents = attendanceData.filter(d => d.isEvening);
    const dayEvents = attendanceData.filter(d => !d.isEvening);
    
    if (eveningEvents.length > 0 && dayEvents.length > 0) {
      const eveningAvg = eveningEvents.reduce((sum, d) => sum + d.attendance, 0) / eveningEvents.length;
      const dayAvg = dayEvents.reduce((sum, d) => sum + d.attendance, 0) / dayEvents.length;
      
      const difference = ((Math.max(eveningAvg, dayAvg) / Math.min(eveningAvg, dayAvg)) - 1) * 100;
      
      if (difference > 10) {
        if (eveningAvg > dayAvg) {
          factors.push({
            factor: 'Evening timing',
            impact: 'positive',
            description: `Evening events in this category have ${difference.toFixed(0)}% higher attendance than daytime events`
          });
        } else {
          factors.push({
            factor: 'Daytime timing',
            impact: 'positive',
            description: `Daytime events in this category have ${difference.toFixed(0)}% higher attendance than evening events`
          });
        }
      }
    }
    
    // Check if rating has a correlation with attendance
    const highRatedEvents = attendanceData.filter(d => d.rating >= 4);
    const lowRatedEvents = attendanceData.filter(d => d.rating < 4 && d.rating > 0);
    
    if (highRatedEvents.length > 0 && lowRatedEvents.length > 0) {
      const highRatedAvg = highRatedEvents.reduce((sum, d) => sum + d.attendance, 0) / highRatedEvents.length;
      const lowRatedAvg = lowRatedEvents.reduce((sum, d) => sum + d.attendance, 0) / lowRatedEvents.length;
      
      if (highRatedAvg > lowRatedAvg * 1.2) {
        factors.push({
          factor: 'Event rating',
          impact: 'strong positive',
          description: 'Higher-rated events consistently show better attendance in future editions'
        });
      }
    }
    
    // Check if location is influential
    if (this.getLocationFactor(event.location) > 1.1) {
      factors.push({
        factor: 'Location popularity',
        impact: 'positive',
        description: `${event.location} is a popular location that tends to increase attendance`
      });
    } else if (this.getLocationFactor(event.location) < 0.9) {
      factors.push({
        factor: 'Location accessibility',
        impact: 'negative',
        description: 'This location has historically shown lower attendance numbers'
      });
    }
    
    // Check seasonality impact
    const monthFactor = this.getSeasonalFactor(new Date(event.date));
    if (monthFactor > 1.1) {
      factors.push({
        factor: 'Seasonal timing',
        impact: 'positive',
        description: `${this.getMonthName(new Date(event.date).getMonth())} is a favorable month for this type of event`
      });
    } else if (monthFactor < 0.9) {
      factors.push({
        factor: 'Seasonal timing',
        impact: 'negative',
        description: `${this.getMonthName(new Date(event.date).getMonth())} historically shows lower attendance for similar events`
      });
    }
    
    return factors;
  }
  
  /**
   * Helper method to get month name
   */
  static getMonthName(monthIndex) {
    const months = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ];
    return months[monthIndex];
  }
  
  /**
   * Calculate overall sentiment for an event based on its reviews
   */
  static calculateEventSentiment(reviews) {
    if (!reviews || reviews.length === 0) return 0;
    
    const positive = reviews.filter(r => r.sentiment === 'positive').length;
    const neutral = reviews.filter(r => r.sentiment === 'neutral').length;
    const negative = reviews.filter(r => r.sentiment === 'negative').length;
    
    // Calculate weighted score: 100 for positive, 50 for neutral, 0 for negative
    return (positive * 100 + neutral * 50) / (positive + neutral + negative);
  }
  
  /**
   * Predict expected sentiment for a future event
   * @param {number} eventId - Event ID
   * @returns {Object} Predicted sentiment distribution and insights
   */
  static async predictSentiment(eventId) {
    try {
      // Get event details
      const event = await Events.findByPk(eventId);
      if (!event) {
        throw new Error('Event not found');
      }
      
      // Find similar past events
      const similarEvents = await Events.findAll({
        where: {
          id: { [Op.ne]: eventId },
          category: event.category,
          date: { [Op.lt]: new Date() } // Past events only
        },
        include: [{ model: Reviews }]
      });
      
      if (similarEvents.length === 0) {
        // No similar events to base prediction on
        return this.getDefaultSentimentPrediction();
      }
      
      // Calculate average sentiment distribution
      let totalPositive = 0;
      let totalNeutral = 0;
      let totalNegative = 0;
      let totalReviews = 0;
      let eventsWithReviews = 0;
      
      similarEvents.forEach(se => {
        if (se.Reviews && se.Reviews.length > 0) {
          const positive = se.Reviews.filter(r => r.sentiment === 'positive').length;
          const neutral = se.Reviews.filter(r => r.sentiment === 'neutral').length;
          const negative = se.Reviews.filter(r => r.sentiment === 'negative').length;
          
          totalPositive += positive;
          totalNeutral += neutral;
          totalNegative += negative;
          totalReviews += se.Reviews.length;
          eventsWithReviews++;
        }
      });
      
      if (eventsWithReviews === 0) {
        return this.getDefaultSentimentPrediction();
      }
      
      // Calculate percentages
      const totalSentiments = totalPositive + totalNeutral + totalNegative;
      
      if (totalSentiments === 0) {
        return this.getDefaultSentimentPrediction();
      }
      
      // Base prediction on historical data
      const positivePct = Math.round((totalPositive / totalSentiments) * 100);
      const neutralPct = Math.round((totalNeutral / totalSentiments) * 100);
      const negativePct = 100 - positivePct - neutralPct;
      
      // Apply risk adjustment based on venue and time
      const adjustedPrediction = this.adjustSentimentPrediction(
        { positive: positivePct, neutral: neutralPct, negative: negativePct },
        event
      );
      
      // Calculate confidence level
      let confidenceLevel = 'medium';
      if (eventsWithReviews >= 5 && totalSentiments >= 50) {
        confidenceLevel = 'high';
      } else if (eventsWithReviews < 2 || totalSentiments < 10) {
        confidenceLevel = 'low';
      }
      
      // Generate specific insights
      const insights = this.getSentimentInsights(
        adjustedPrediction.positive, 
        adjustedPrediction.neutral, 
        adjustedPrediction.negative, 
        event.category
      );
      
      // Identify potential risks and recommendations
      const risksAndRecommendations = this.analyzeSentimentRisks(
        adjustedPrediction,
        event,
        similarEvents
      );
      
      return {
        sentimentPrediction: adjustedPrediction,
        confidenceLevel,
        similarEventsCount: eventsWithReviews,
        totalReviewsAnalyzed: totalSentiments,
        insights,
        risksAndRecommendations
      };
    } catch (error) {
      console.error('Error predicting sentiment:', error);
      throw error;
    }
  }
  
  /**
   * Adjust sentiment prediction based on event-specific factors
   */
  static adjustSentimentPrediction(basePrediction, event) {
    const { positive, neutral, negative } = basePrediction;
    let adjustedPositive = positive;
    let adjustedNeutral = neutral;
    let adjustedNegative = negative;
    
    // Adjust based on location
    const locationFactor = this.getLocationFactor(event.location);
    if (locationFactor > 1.1) {
      // Popular location, shift sentiment more positive
      const shift = Math.min(5, negative);
      adjustedPositive += shift;
      adjustedNegative -= shift;
    } else if (locationFactor < 0.9) {
      // Less popular location, shift slightly negative
      const shift = Math.min(3, positive);
      adjustedPositive -= shift;
      adjustedNegative += shift;
    }
    
    // Adjust based on time of day
    if (event.time) {
      const hour = new Date(`2000-01-01T${event.time}`).getHours();
      if (hour < 10 || hour > 20) {
        // Very early or late times can affect sentiment
        const shift = Math.min(2, positive);
        adjustedPositive -= shift;
        adjustedNeutral += shift;
      }
    }
    
    // Adjust based on seasonality
    const seasonalFactor = this.getSeasonalFactor(new Date(event.date));
    if (seasonalFactor > 1.1) {
      // Good season, shift sentiment more positive
      const shift = Math.min(3, negative + neutral);
      adjustedPositive += shift;
      adjustedNegative -= shift / 2;
      adjustedNeutral -= shift / 2;
    } else if (seasonalFactor < 0.9) {
      // Off-season, shift slightly negative
      const shift = Math.min(3, positive);
      adjustedPositive -= shift;
      adjustedNeutral += shift / 2;
      adjustedNegative += shift / 2;
    }
    
    // Ensure percentages add up to 100
    const total = adjustedPositive + adjustedNeutral + adjustedNegative;
    return {
      positive: Math.round((adjustedPositive / total) * 100),
      neutral: Math.round((adjustedNeutral / total) * 100),
      negative: Math.round((adjustedNegative / total) * 100)
    };
  }
  
  /**
   * Analyze sentiment risks and generate recommendations
   */
  static analyzeSentimentRisks(prediction, event, similarEvents) {
    const risks = [];
    const recommendations = [];
    
    // Check for sentiment risk factors
    if (prediction.negative > 15) {
      risks.push({
        factor: 'Negative sentiment risk',
        level: prediction.negative > 25 ? 'high' : 'medium',
        description: `Predicted negative sentiment (${prediction.negative}%) is above the acceptable threshold of 15%`
      });
      
      // Generate specific recommendations based on similar events with negative reviews
      const negativeReviews = [];
      similarEvents.forEach(se => {
        if (se.Reviews) {
          const negative = se.Reviews.filter(r => r.sentiment === 'negative');
          negative.forEach(r => negativeReviews.push(r));
        }
      });
      
      // Look for common words in negative reviews
      if (negativeReviews.length > 0) {
        const commonIssues = this.findCommonWords(negativeReviews.map(r => r.review_text));
        
        if (commonIssues.includes('time') || commonIssues.includes('schedule') || commonIssues.includes('late')) {
          recommendations.push('Consider improving event scheduling and time management');
        }
        
        if (commonIssues.includes('staff') || commonIssues.includes('service') || commonIssues.includes('rude')) {
          recommendations.push('Train staff to improve service quality and responsiveness');
        }
        
        if (commonIssues.includes('expensive') || commonIssues.includes('cost') || commonIssues.includes('price')) {
          recommendations.push('Review pricing structure to better align with perceived value');
        }
        
        if (commonIssues.includes('venue') || commonIssues.includes('location') || commonIssues.includes('facility')) {
          recommendations.push('Ensure venue facilities meet attendee expectations');
        }
      }
    }
    
    // Add generic recommendations if specific ones couldn't be generated
    if (recommendations.length === 0) {
      recommendations.push('Collect detailed feedback during the event to address issues promptly');
      recommendations.push('Focus on aspects that received positive feedback in similar events');
    }
    
    return { risks, recommendations };
  }
  
  /**
   * Find common words in a set of texts
   */
  static findCommonWords(texts) {
    const stopwords = ['the', 'and', 'a', 'to', 'of', 'in', 'is', 'was', 'for', 'on', 'that', 'with', 'this'];
    const wordCounts = {};
    
    texts.forEach(text => {
      const words = text.toLowerCase().match(/\b(\w+)\b/g) || [];
      words.forEach(word => {
        if (word.length > 3 && !stopwords.includes(word)) {
          wordCounts[word] = (wordCounts[word] || 0) + 1;
        }
      });
    });
    
    return Object.entries(wordCounts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([word]) => word);
  }
  
  /**
   * Get default attendance prediction based on category
   */
  static getDefaultAttendancePrediction(category) {
    // Default attendance numbers by category
    const categoryDefaults = {
      'Conference': 200,
      'Workshop': 40,
      'Seminar': 75,
      'Social': 100,
      'Concert': 300,
      'Exhibition': 150,
      'Sports': 250,
      'Webinar': 120,
      'default': 80
    };
    
    return {
      predictedAttendance: categoryDefaults[category] || categoryDefaults.default,
      confidenceLevel: 'low',
      similarEventsCount: 0,
      note: 'Prediction based on category average as no similar past events were found',
      minAttendance: Math.round((categoryDefaults[category] || categoryDefaults.default) * 0.7),
      maxAttendance: Math.round((categoryDefaults[category] || categoryDefaults.default) * 1.3),
      influencingFactors: []
    };
  }
  
  /**
   * Get default sentiment prediction
   */
  static getDefaultSentimentPrediction() {
    return {
      sentimentPrediction: {
        positive: 65,
        neutral: 25,
        negative: 10
      },
      confidenceLevel: 'low',
      similarEventsCount: 0,
      totalReviewsAnalyzed: 0,
      note: 'Default prediction as no similar past events were found',
      insights: ["Expected to receive mostly positive feedback based on average category performance"],
      risksAndRecommendations: {
        risks: [],
        recommendations: [
          "Focus on clear communication of event details",
          "Ensure adequate staffing and resources",
          "Set realistic expectations for attendees"
        ]
      }
    };
  }
  
  /**
   * Get location adjustment factor
   */
  static getLocationFactor(location) {
    // This is simplified for demonstration
    // In a real implementation, you would use historical data
    // to determine location-specific attendance factors
    const locationFactors = {
      'Virtual Event': 1.2,
      'Online': 1.2,
      'San Francisco': 1.15,
      'New York': 1.1,
      'Chicago': 1.05,
      'Los Angeles': 1.1,
      'default': 1.0
    };
    
    // Check if any key is a substring of the location
    for (const key in locationFactors) {
      if (key !== 'default' && location.includes(key)) {
        return locationFactors[key];
      }
    }
    
    return locationFactors.default;
  }
  
  /**
   * Get seasonal adjustment factor based on date
   */
  static getSeasonalFactor(date) {
    const month = date.getMonth();
    
    // Seasonal adjustments by month (0 = January, 11 = December)
    const seasonalFactors = [
      0.9,  // January
      0.95, // February
      1.0,  // March
      1.05, // April
      1.1,  // May
      1.15, // June
      1.05, // July
      1.0,  // August
      1.1,  // September
      1.15, // October
      1.05, // November
      0.9   // December
    ];
    
    return seasonalFactors[month];
  }
  
  /**
   * Generate insights based on predicted sentiment
   */
  static getSentimentInsights(positive, neutral, negative, category) {
    const insights = [];
    
    if (positive >= 70) {
      insights.push('Expected to be very well-received by attendees');
      
      if (category === 'Conference' || category === 'Workshop' || category === 'Seminar') {
        insights.push('Attendees will likely appreciate the educational content and networking opportunities');
      } else if (category === 'Concert' || category === 'Exhibition' || category === 'Social') {
        insights.push('Attendees will likely value the entertainment and social aspects of the event');
      }
    } else if (positive >= 50) {
      insights.push('Likely to receive generally positive feedback with some areas for improvement');
      
      if (neutral > 30) {
        insights.push('A significant portion of attendees may have mixed feelings about certain aspects');
      }
    } else if (negative >= 30) {
      insights.push('May face challenges with attendee satisfaction');
      insights.push('Consider addressing potential issues with venue, scheduling, or content');
    }
    
    // Add more specific insights based on category and sentiment distribution
    if (category === 'Conference' && positive < 60) {
      insights.push('Consider providing more networking opportunities and improving session content');
    } else if (category === 'Workshop' && positive < 60) {
      insights.push('Focus on hands-on activities and practical takeaways to improve sentiment');
    } else if (category === 'Social' && negative > 20) {
      insights.push('Pay special attention to venue selection and attendee comfort');
    }
    
    return insights;
  }
  
  /**
   * Predict the expected rating for an event
   */
  static async predictRating(eventId) {
    try {
      // Get event details
      const event = await Events.findByPk(eventId);
      if (!event) {
        throw new Error('Event not found');
      }
      
      // Find similar past events
      const similarEvents = await Events.findAll({
        where: {
          id: { [Op.ne]: eventId },
          category: event.category,
          date: { [Op.lt]: new Date() } // Past events only
        },
        include: [{
          model: Reviews,
          attributes: []
        }],
        attributes: [
          'id',
          [Sequelize.fn('AVG', Sequelize.col('Reviews.rating')), 'avgRating'],
          [Sequelize.fn('COUNT', Sequelize.col('Reviews.id')), 'reviewCount']
        ],
        group: ['Events.id'],
        having: Sequelize.literal('COUNT(Reviews.id) > 0')
      });
      
      if (similarEvents.length === 0) {
        return {
          predictedRating: 4.0,
          confidenceLevel: 'low',
          similarEventsCount: 0,
          note: 'Default prediction as no similar past events were found',
          factors: []
        };
      }
      
      // Calculate weighted average rating
      let totalWeightedRating = 0;
      let totalWeight = 0;
      
      similarEvents.forEach(se => {
        const avgRating = parseFloat(se.getDataValue('avgRating') || 0);
        const reviewCount = parseInt(se.getDataValue('reviewCount') || 0);
        
        if (avgRating > 0 && reviewCount > 0) {
          // Weight by number of reviews (more reviews = more reliable)
          const weight = Math.min(reviewCount, 50); // Cap at 50 to prevent one event from dominating
          totalWeightedRating += avgRating * weight;
          totalWeight += weight;
        }
      });
      
      if (totalWeight === 0) {
        return {
          predictedRating: 4.0,
          confidenceLevel: 'low',
          similarEventsCount: 0,
          note: 'Default prediction as no valid ratings were found',
          factors: []
        };
      }
      
      const basePrediction = parseFloat((totalWeightedRating / totalWeight).toFixed(1));
      
      // Apply adjustments based on event characteristics
      const adjustedRating = this.adjustRatingPrediction(basePrediction, event);
      
      // Calculate confidence level
      let confidenceLevel = 'medium';
      if (similarEvents.length >= 5 && totalWeight >= 50) {
        confidenceLevel = 'high';
      } else if (similarEvents.length < 2 || totalWeight < 10) {
        confidenceLevel = 'low';
      }
      
      // Identify factors that impact the rating
      const factors = this.identifyRatingFactors(adjustedRating, event, similarEvents);
      
      return {
        predictedRating: adjustedRating,
        confidenceLevel,
        similarEventsCount: similarEvents.length,
        totalReviewsAnalyzed: totalWeight,
        ratingDistribution: this.predictRatingDistribution(adjustedRating),
        factors
      };
    } catch (error) {
      console.error('Error predicting rating:', error);
      throw error;
    }
  }
  
  /**
   * Adjust rating prediction based on event characteristics
   */
  static adjustRatingPrediction(baseRating, event) {
    let adjustedRating = baseRating;
    
    // Apply location adjustment
    const locationFactor = this.getLocationFactor(event.location);
    if (locationFactor > 1.1) {
      adjustedRating += 0.2;
    } else if (locationFactor < 0.9) {
      adjustedRating -= 0.2;
    }
    
    // Apply seasonal adjustment
    const seasonalFactor = this.getSeasonalFactor(new Date(event.date));
    if (seasonalFactor > 1.1) {
      adjustedRating += 0.1;
    } else if (seasonalFactor < 0.9) {
      adjustedRating -= 0.1;
    }
    
    // Ensure rating is within 1-5 range
    adjustedRating = Math.min(5, Math.max(1, adjustedRating));
    
    // Round to nearest 0.1
    return Math.round(adjustedRating * 10) / 10;
  }
  
  /**
   * Identify factors that impact the rating
   */
  static identifyRatingFactors(predictedRating, event, similarEvents) {
    const factors = [];
    
    // Location factor
    const locationFactor = this.getLocationFactor(event.location);
    if (locationFactor > 1.1) {
      factors.push({
        factor: 'Location',
        impact: 'positive',
        description: `${event.location} is associated with higher ratings`
      });
    } else if (locationFactor < 0.9) {
      factors.push({
        factor: 'Location',
        impact: 'negative',
        description: `${event.location} has historically received lower ratings`
      });
    }
    
    // Season factor
    const seasonalFactor = this.getSeasonalFactor(new Date(event.date));
    if (seasonalFactor > 1.1) {
      factors.push({
        factor: 'Seasonal timing',
        impact: 'positive',
        description: `Events in ${this.getMonthName(new Date(event.date).getMonth())} tend to receive better ratings`
      });
    } else if (seasonalFactor < 0.9) {
      factors.push({
        factor: 'Seasonal timing',
        impact: 'negative',
        description: `Events in ${this.getMonthName(new Date(event.date).getMonth())} often receive lower ratings`
      });
    }
    
    // Add category-specific factors
    switch (event.category) {
      case 'Conference':
        if (predictedRating >= 4.3) {
          factors.push({
            factor: 'Content quality',
            impact: 'positive',
            description: 'Conferences in this category with high-quality content receive excellent ratings'
          });
        }
        break;
      case 'Workshop':
        factors.push({
          factor: 'Hands-on experience',
          impact: 'variable',
          description: 'Workshop ratings are heavily influenced by the quality of hands-on activities'
        });
        break;
      case 'Social':
        factors.push({
          factor: 'Networking opportunities',
          impact: 'variable',
          description: 'Social events are often rated based on networking quality and social atmosphere'
        });
        break;
    }
    
    return factors;
  }
  
  /**
   * Predict the distribution of ratings
   */
  static predictRatingDistribution(avgRating) {
    // This is a model based on common rating distributions
    // In a real implementation, you would use historical data patterns
    
    let distribution = {
      5: 0,
      4: 0,
      3: 0,
      2: 0,
      1: 0
    };
    
    if (avgRating >= 4.5) {
      distribution = { 5: 60, 4: 30, 3: 7, 2: 2, 1: 1 };
    } else if (avgRating >= 4.0) {
      distribution = { 5: 40, 4: 40, 3: 15, 2: 3, 1: 2 };
    } else if (avgRating >= 3.5) {
      distribution = { 5: 20, 4: 35, 3: 30, 2: 10, 1: 5 };
    } else if (avgRating >= 3.0) {
      distribution = { 5: 10, 4: 25, 3: 40, 2: 15, 1: 10 };
    } else if (avgRating >= 2.5) {
      distribution = { 5: 5, 4: 20, 3: 30, 2: 35, 1: 10 };
    } else {
      distribution = { 5: 5, 4: 10, 3: 20, 2: 25, 1: 40 };
    }
    
    return distribution;
  }
}

module.exports = PredictiveAnalyticsService;
</file>

<file path="server/services/RecommendationService.js">
const { Events, Reviews, Users } = require('../models');
const Sequelize = require('sequelize');
const { Op } = Sequelize;

class RecommendationService {
  /**
   * Get personalized event recommendations for a user
   * @param {number} userId - User ID
   * @param {Array<string>} interests - User's interests
   * @returns {Promise<Array>} Recommended events
   */
  static async getPersonalizedRecommendations(userId, interests = []) {
    try {
      // Fetch user's past reviews
      const userReviews = await Reviews.findAll({
        where: { UserId: userId },
        include: [{ model: Events }]
      });

      // If no reviews, get recommendations by interests or popular events
      if (userReviews.length === 0) {
        return await this.getRecommendationsByInterests(userId, interests);
      }

      // Find highly rated events by the user
      const likedEventIds = userReviews
        .filter(review => review.rating >= 4)
        .map(review => review.EventId);

      // Get liked categories
      const likedCategories = new Set();
      userReviews
        .filter(review => review.rating >= 4 && review.Event?.category)
        .forEach(review => likedCategories.add(review.Event.category));

      // Combine recommendation strategies
      const recommendations = [
        ...(await this.getCollaborativeFilteringRecommendations(userId, likedEventIds)),
        ...(await this.getContentBasedRecommendations(userId, likedCategories, likedEventIds)),
        ...(await this.getRecommendationsByInterests(userId, interests))
      ];

      // Deduplicate and sort recommendations
      const uniqueRecs = Array.from(
        new Map(recommendations.map(r => [r.id, r]))
      ).map(([_, rec]) => rec);

      // Sort by match score
      return uniqueRecs.sort((a, b) => b.matchScore - a.matchScore).slice(0, 10);
    } catch (error) {
      console.error('Error in personalized recommendations:', error);
      return [];
    }
  }

  /**
   * Get recommendations based on collaborative filtering
   */
  static async getCollaborativeFilteringRecommendations(userId, likedEventIds) {
    try {
      // Find similar users based on event ratings
      const similarUserReviews = await Reviews.findAll({
        where: {
          EventId: { [Op.in]: likedEventIds },
          rating: { [Op.gte]: 4 },
          UserId: { [Op.ne]: userId }
        },
        include: [{ model: Events }]
      });

      // Group recommendations by event
      const eventRecommendations = new Map();
      similarUserReviews.forEach(review => {
        if (review.Event) {
          const existing = eventRecommendations.get(review.EventId) || {
            count: 0,
            event: review.Event
          };
          eventRecommendations.set(review.EventId, {
            count: existing.count + 1,
            event: existing.event
          });
        }
      });

      // Convert to recommendations
      return Array.from(eventRecommendations.entries())
        .filter(([_, { event }]) => {
          // Only future events
          return new Date(event.date) > new Date();
        })
        .map(([_, { count, event }]) => ({
          id: event.id,
          title: event.title,
          date: event.date,
          category: event.category,
          location: event.location,
          image: event.image,
          matchScore: Math.min(count * 20, 85), // Max 85% match
          reason: 'People with similar tastes enjoyed this event'
        }));
    } catch (error) {
      console.error('Collaborative filtering error:', error);
      return [];
    }
  }

  /**
   * Get recommendations based on content similarity
   */
  static async getContentBasedRecommendations(userId, likedCategories, likedEventIds) {
    try {
      const categories = Array.from(likedCategories);
      
      if (categories.length === 0) return [];

      const similarEvents = await Events.findAll({
        where: {
          category: { [Op.in]: categories },
          id: { [Op.notIn]: likedEventIds },
          date: { [Op.gte]: new Date() }
        },
        limit: 10
      });

      return similarEvents.map(event => ({
        id: event.id,
        title: event.title,
        date: event.date,
        category: event.category,
        location: event.location,
        image: event.image,
        matchScore: 75, // Base score for category match
        reason: 'Similar to categories you\'ve enjoyed'
      }));
    } catch (error) {
      console.error('Content-based recommendations error:', error);
      return [];
    }
  }

  /**
   * Get recommendations based on user interests
   */
  static async getRecommendationsByInterests(userId, interests = []) {
    try {
      // If no interests, get popular events
      if (!interests || interests.length === 0) {
        return await this.getPopularEvents(userId);
      }

      // Find events matching interests
      const events = await Events.findAll({
        where: {
          [Op.or]: interests.map(interest => ({
            [Op.or]: [
              { category: { [Op.like]: `%${interest}%` } },
              { title: { [Op.like]: `%${interest}%` } },
              { description: { [Op.like]: `%${interest}%` } }
            ]
          })),
          date: { [Op.gte]: new Date() }
        },
        limit: 10
      });

      // Get user's past reviews to exclude reviewed events
      const userReviews = await Reviews.findAll({
        where: { UserId: userId },
        attributes: ['EventId']
      });
      const reviewedEventIds = userReviews.map(r => r.EventId);

      return events
        .filter(event => !reviewedEventIds.includes(event.id))
        .map(event => ({
          id: event.id,
          title: event.title,
          date: event.date,
          category: event.category,
          location: event.location,
          image: event.image,
          matchScore: 70, // Base score for interest match
          reason: 'Matches your interests'
        }));
    } catch (error) {
      console.error('Interest-based recommendations error:', error);
      return [];
    }
  }

  /**
   * Get popular events as fallback
   */
  static async getPopularEvents(userId) {
    try {
      // Find most highly-rated upcoming events
      const popularEvents = await Events.findAll({
        include: [{
          model: Reviews,
          attributes: []
        }],
        attributes: [
          'id', 'title', 'date', 'category', 'location', 'image',
          [Sequelize.fn('AVG', Sequelize.col('Reviews.rating')), 'avgRating'],
          [Sequelize.fn('COUNT', Sequelize.col('Reviews.id')), 'reviewCount']
        ],
        where: {
          date: { [Op.gte]: new Date() }
        },
        group: ['Events.id'],
        having: Sequelize.literal('COUNT(Reviews.id) > 0'),
        order: [[Sequelize.literal('avgRating'), 'DESC']],
        limit: 10
      });

      // Get user's past reviews
      const userReviews = await Reviews.findAll({
        where: { UserId: userId },
        attributes: ['EventId']
      });
      const reviewedEventIds = userReviews.map(r => r.EventId);

      return popularEvents
        .filter(event => !reviewedEventIds.includes(event.id))
        .map(event => {
          const avgRating = event.getDataValue('avgRating') || 4;
          const reviewCount = event.getDataValue('reviewCount') || 0;

          // Calculate match score
          const normalizedRating = ((avgRating - 1) / 4) * 100;
          const popularityBonus = Math.min(reviewCount * 2, 20);
          const matchScore = Math.min(Math.round(normalizedRating + popularityBonus), 100);

          return {
            id: event.id,
            title: event.title,
            date: event.date,
            category: event.category,
            location: event.location,
            image: event.image,
            matchScore,
            reason: 'Popular highly-rated event'
          };
        });
    } catch (error) {
      console.error('Popular events error:', error);
      return [];
    }
  }
}

module.exports = RecommendationService;
</file>

<file path="server/services/SentimentService.js">
// services/SentimentService.js
const Sentiment = require('sentiment');
const natural = require('natural');
const { Reviews, Events } = require('../models');

// Initialize sentiment analyzer
const sentimentAnalyzer = new Sentiment();
const tokenizer = new natural.WordTokenizer();

class SentimentService {
  /**
   * Analyzes text sentiment with enhanced accuracy
   * @param {string} text - The text to analyze
   * @returns {Object} Sentiment analysis result
   */
  static analyzeText(text) {
    // Basic sentiment analysis
    const result = sentimentAnalyzer.analyze(text);
    
    // Classify sentiment category
    let sentimentCategory = 'neutral';
    if (result.score > 1) {
      sentimentCategory = 'positive';
    } else if (result.score < -1) {
      sentimentCategory = 'negative';
    }
    
    // Extract key terms (non-stopwords)
    const tokens = tokenizer.tokenize(text.toLowerCase());
    const stopwords = ['the', 'a', 'an', 'and', 'but', 'or', 'for', 'with', 'in', 'on', 'at', 'to', 'was', 'were', 'is', 'are'];
    const keyTerms = tokens.filter(token => 
      token.length > 3 && !stopwords.includes(token)
    );
    
    // Count term frequency
    const termFrequency = {};
    keyTerms.forEach(term => {
      termFrequency[term] = (termFrequency[term] || 0) + 1;
    });
    
    // Get top terms
    const topTerms = Object.entries(termFrequency)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([term]) => term);
    
    return {
      score: result.score,
      comparative: result.comparative,
      sentiment: sentimentCategory,
      topTerms,
      positive: result.positive,
      negative: result.negative
    };
  }
  
  /**
   * Analyze all reviews for an event and generate insights
   * @param {number} eventId - The event ID
   * @returns {Object} Sentiment analysis and insights for the event
   */
  static async analyzeEventReviews(eventId) {
    try {
      // Get event details
      const event = await Events.findByPk(eventId);
      if (!event) {
        throw new Error('Event not found');
      }
      
      // Get all reviews for this event
      const reviews = await Reviews.findAll({
        where: { EventId: eventId }
      });
      
      if (reviews.length === 0) {
        return {
          event: event.title,
          insights: ["Not enough reviews to generate meaningful insights."],
          sentimentBreakdown: { positive: 0, neutral: 0, negative: 0 },
          averageRating: 0,
          reviewCount: 0
        };
      }
      
      // Analyze each review
      const analyzedReviews = reviews.map(review => {
        const analysis = this.analyzeText(review.review_text);
        return {
          id: review.id,
          text: review.review_text,
          rating: review.rating,
          sentiment: analysis.sentiment,
          score: analysis.score,
          topTerms: analysis.topTerms
        };
      });
      
      // Calculate sentiment breakdown
      const sentimentCounts = analyzedReviews.reduce((counts, review) => {
        counts[review.sentiment] = (counts[review.sentiment] || 0) + 1;
        return counts;
      }, { positive: 0, neutral: 0, negative: 0 });
      
      // Calculate percentages
      const totalReviews = analyzedReviews.length;
      const sentimentBreakdown = {
        positive: Math.round((sentimentCounts.positive / totalReviews) * 100),
        neutral: Math.round((sentimentCounts.neutral / totalReviews) * 100),
        negative: Math.round((sentimentCounts.negative / totalReviews) * 100)
      };
      
      // Calculate average rating
      const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
      const averageRating = totalRating / totalReviews;
      
      // Extract all terms from all reviews for topic modeling
      const allTerms = analyzedReviews.flatMap(review => review.topTerms);
      const termFrequency = {};
      allTerms.forEach(term => {
        termFrequency[term] = (termFrequency[term] || 0) + 1;
      });
      
      // Get top topics
      const topTopics = Object.entries(termFrequency)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 10)
        .map(([term, count]) => ({ term, count }));
      
      // Generate insights
      const insights = this.generateInsights(
        event.title,
        averageRating,
        sentimentBreakdown,
        topTopics,
        analyzedReviews
      );
      
      return {
        event: event.title,
        insights,
        sentimentBreakdown,
        averageRating,
        reviewCount: totalReviews,
        topTopics
      };
    } catch (error) {
      console.error('Error analyzing event reviews:', error);
      throw error;
    }
  }
  
  /**
   * Generate human-readable insights from analysis data
   */
  static generateInsights(eventTitle, averageRating, sentimentBreakdown, topTopics, analyzedReviews) {
    const insights = [];
    
    // Rating insight
    insights.push(`Average rating for ${eventTitle} is ${averageRating.toFixed(1)} out of 5 stars.`);
    
    // Sentiment insight
    insights.push(`${sentimentBreakdown.positive}% of reviews express positive sentiment, while ${sentimentBreakdown.negative}% express negative sentiment.`);
    
    // Top topics insight
    if (topTopics.length > 0) {
      insights.push(`Most frequently mentioned aspects: ${topTopics.slice(0, 5).map(t => t.term).join(', ')}.`);
    }
    
    // High/low rated aspects
    const positiveReviews = analyzedReviews.filter(r => r.sentiment === 'positive');
    const negativeReviews = analyzedReviews.filter(r => r.sentiment === 'negative');
    
    if (positiveReviews.length > 0) {
      const positiveTerms = positiveReviews.flatMap(r => r.topTerms).slice(0, 3);
      if (positiveTerms.length > 0) {
        insights.push(`Attendees particularly enjoyed aspects related to: ${positiveTerms.join(', ')}.`);
      }
    }
    
    if (negativeReviews.length > 0) {
      const negativeTerms = negativeReviews.flatMap(r => r.topTerms).slice(0, 3);
      if (negativeTerms.length > 0) {
        insights.push(`Areas for improvement include: ${negativeTerms.join(', ')}.`);
      }
    }
    
    // Recommendation based on sentiment
    if (sentimentBreakdown.positive > 70) {
      insights.push(`This event is performing exceptionally well. Consider organizing similar events in the future.`);
    } else if (sentimentBreakdown.negative > 30) {
      insights.push(`This event may need significant improvements before repeating it.`);
    } else {
      insights.push(`This event is performing adequately. Consider addressing common concerns in future iterations.`);
    }
    
    return insights;
  }
}

module.exports = SentimentService;
</file>

<file path="client/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.env

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path="client/public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
</file>

<file path="client/src/components/FloatingChatbot.js">
import React, { useEffect, useState } from 'react';
import ChatbotUI from './ChatbotUI';

export default function FloatingChatbot() {
  // Start with not determined status to prevent premature rendering
  const [adminStatus, setAdminStatus] = useState({ determined: false, isAdmin: false });
  const [isMounted, setIsMounted] = useState(false);
  
  useEffect(() => {
    setIsMounted(true);
    
    // Function to comprehensively check admin status
    const checkAdminStatus = () => {
      console.log('Running comprehensive admin status check...');
      
      // Try multiple storage locations and formats
      const storageKeys = ['token', 'authToken', 'user', 'userData', 'currentUser', 'auth', 'userInfo', 'profile'];
      const storageTypes = [localStorage, sessionStorage];
      
      // Variable to track if we found admin status
      let isAdmin = false;
      let methodUsed = 'Not found - assuming regular user';
      
      // Check direct admin flag in window or global object (expanded checks)
      if (window.isAdmin === true || 
          window.admin === true || 
          window.user?.isAdmin === true || 
          window.user?.role === 'admin' || 
          window.userData?.isAdmin === true) {
        console.log('Found admin flag in window object');
        isAdmin = true;
        methodUsed = 'window object';
      }
      
      // Method 1: Try to find token/user data in different storage locations
      if (!isAdmin) {
        storageLoop: for (const storage of storageTypes) {
          for (const key of storageKeys) {
            const item = storage.getItem(key);
            if (item) {
              console.log(`Found item in ${storage === localStorage ? 'localStorage' : 'sessionStorage'}: ${key}`);
              
              // Try parsing as JSON
              try {
                const parsed = JSON.parse(item);
                
                // Define a recursive function to search for admin flags
                const findAdminFlag = (obj, path = '') => {
                  if (!obj || typeof obj !== 'object') return false;
                  
                  // Check common admin indicators
                  if (obj.isAdmin === true || obj.admin === true || 
                      obj.role === 'admin' || obj.userRole === 'admin' ||
                      obj.type === 'admin' || obj.accountType === 'admin') {
                    console.log(`Found admin indicator at ${path}`);
                    return true;
                  }
                  
                  // Check nested objects (up to 3 levels deep to avoid excessive recursion)
                  for (const prop in obj) {
                    if (typeof obj[prop] === 'object' && obj[prop] !== null) {
                      if (findAdminFlag(obj[prop], `${path}.${prop}`)) {
                        return true;
                      }
                    }
                  }
                  
                  return false;
                };
                
                if (findAdminFlag(parsed, key)) {
                  isAdmin = true;
                  methodUsed = `${storage === localStorage ? 'localStorage' : 'sessionStorage'}.${key} (nested property)`;
                  break storageLoop;
                }
              } catch (e) {
                // Not JSON, try to check if it's a JWT token
                if (typeof item === 'string' && item.includes('.')) {
                  try {
                    const parts = item.split('.');
                    if (parts.length === 3) {
                      const payload = JSON.parse(atob(parts[1].replace(/-/g, '+').replace(/_/g, '/')));
                      if (payload.isAdmin === true || payload.admin === true || 
                          payload.role === 'admin' || payload.userRole === 'admin') {
                        console.log(`Found admin indicator in JWT token from ${key}`);
                        isAdmin = true;
                        methodUsed = `${storage === localStorage ? 'localStorage' : 'sessionStorage'}.${key} (JWT)`;
                        break storageLoop;
                      }
                    }
                  } catch (tokenError) {
                    console.log(`Error parsing possible token from ${key}:`, tokenError);
                  }
                }
              }
            }
          }
        }
      }
      
      // Method 2: Check URL for admin indicators (expanded checks)
      if (!isAdmin) {
        const url = window.location.href.toLowerCase();
        const path = window.location.pathname.toLowerCase();
        if (url.includes('/admin') || url.includes('admin=true') || 
            url.includes('role=admin') || path.includes('/admin') ||
            path.includes('/dashboard') || path.includes('/manage')) {
          console.log('Found admin indicator in URL');
          isAdmin = true;
          methodUsed = 'URL pattern';
        }
      }
      
      // Method 3: Check cookies for admin information
      if (!isAdmin && document.cookie) {
        const cookies = document.cookie.split(';');
        for (const cookie of cookies) {
          const [name, value] = cookie.trim().split('=');
          if ((name.includes('admin') && value === 'true') ||
              (name.includes('role') && value === 'admin') ||
              (name.includes('user') && value.includes('admin'))) {
            console.log('Found admin indicator in cookies');
            isAdmin = true;
            methodUsed = 'cookies';
            break;
          }
        }
      }
      
      // Method 4: Check for DOM elements that might indicate admin interface
      if (!isAdmin) {
        const adminElements = document.querySelectorAll('.admin-panel, .admin-area, #admin-dashboard, [data-role="admin"]');
        if (adminElements.length > 0) {
          console.log('Found admin UI elements in DOM');
          isAdmin = true;
          methodUsed = 'DOM elements';
        }
      }
    
      console.log('Admin detection complete:');
      console.log('- Is admin:', isAdmin);
      console.log('- Method used:', methodUsed);
      
      // Update state with determined status
      setAdminStatus({ determined: true, isAdmin });
    };
    
    // Initial check
    checkAdminStatus();
    
    // Run the check again after a delay to catch any late-loading auth data
    const delayedCheck = setTimeout(() => {
      console.log('Running delayed admin check');
      checkAdminStatus();
    }, 1500);
    
    // Check when URL changes
    const handleUrlChange = () => {
      console.log('URL changed, rechecking admin status');
      checkAdminStatus();
    };
    
    window.addEventListener('popstate', handleUrlChange);
    window.addEventListener('hashchange', handleUrlChange);
    
    // Periodically check for changes (e.g., if user logs in as admin during the session)
    const periodicCheck = setInterval(() => {
      checkAdminStatus();
    }, 30000); // Every 30 seconds
    
    // Clean up event listeners and timers
    return () => {
      window.removeEventListener('popstate', handleUrlChange);
      window.removeEventListener('hashchange', handleUrlChange);
      clearTimeout(delayedCheck);
      clearInterval(periodicCheck);
    };
  }, []);
  
  // Rendering logic:
  // 1. Don't render while admin status is being determined
  if (!isMounted || !adminStatus.determined) {
    return null;
  }
  
  // 2. Don't render if user is an admin
  if (adminStatus.isAdmin) {
    console.log('Not rendering chatbot: user is admin');
    return null;
  }
  
  // 3. Only render for confirmed non-admin users
  console.log('Rendering chatbot for regular user');
  return <ChatbotUI />;
}
</file>

<file path="client/src/helpers/AuthContext.js">
import { createContext } from "react";

export const AuthContext = createContext(null);
</file>

<file path="client/src/pages/EventRegistration.js">
// src/pages/EventRegistration.js
import React, { useState, useEffect, useContext } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { AuthContext } from '../helpers/AuthContext';
import { format } from 'date-fns';

function EventRegistration() {
  const { id } = useParams();
  const navigate = useNavigate();
  const { authState } = useContext(AuthContext);
  
  // Event state
  const [event, setEvent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Form state
  const [fullName, setFullName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [address, setAddress] = useState('');
  const [city, setCity] = useState('');
  const [state, setState] = useState('');
  const [zipCode, setZipCode] = useState('');
  const [specialRequirements, setSpecialRequirements] = useState('');
  const [ticketQuantity, setTicketQuantity] = useState(1);
  
  // Registration state
  const [registrationComplete, setRegistrationComplete] = useState(false);
  const [registrationData, setRegistrationData] = useState(null);
  const [totalAmount, setTotalAmount] = useState(0);
  
  // Custom colors from your palette
  const primaryColor = "#1A2A56"; // Navy
  const accentColor = "#FF6B6B";  // Coral/pink

  useEffect(() => {
    const fetchEventDetails = async () => {
      try {
        const response = await axios.get(`http://localhost:3001/events/${id}`);
        if (response.data.event) {
          setEvent(response.data.event);
          
          // Calculate initial total amount
          if (response.data.event.isPaid) {
            setTotalAmount(response.data.event.price * ticketQuantity);
          }
        } else {
          setError("Event not found.");
        }
        setLoading(false);
      } catch (err) {
        setError("Failed to load event details.");
        setLoading(false);
        console.error("Error fetching event details:", err);
      }
    };
    
    fetchEventDetails();
  }, [id]);
  
  // Update total amount when ticket quantity changes
  useEffect(() => {
    if (event && event.isPaid) {
      setTotalAmount(event.price * ticketQuantity);
    }
  }, [ticketQuantity, event]);
  
  // Populate form with user data if logged in
  useEffect(() => {
    if (authState.status && authState.username) {
      setEmail(authState.username); // Assuming username is email
      
      // Optional: fetch more user details if available
      const fetchUserProfile = async () => {
        try {
          const response = await axios.get('http://localhost:3001/api/user/profile', {
            headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` }
          });
          
          if (response.data) {
            setFullName(response.data.fullName || '');
            setPhone(response.data.phone || '');
          }
        } catch (error) {
          console.error('Error fetching user profile:', error);
        }
      };
      
      fetchUserProfile();
    }
  }, [authState]);
  
  const validateForm = () => {
    if (!fullName.trim()) return "Full name is required";
    if (!email.trim()) return "Email is required";
    if (!/\S+@\S+\.\S+/.test(email)) return "Please enter a valid email";
    if (!phone.trim()) return "Phone number is required";
    return null;
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const validationError = validateForm();
    if (validationError) {
      setError(validationError);
      return;
    }
    
    setError(null);
    setLoading(true);
    
    try {
      // Prepare registration data
      const registrationPayload = {
        eventId: id,
        fullName,
        email,
        phone,
        address,
        city,
        state,
        zipCode,
        specialRequirements,
        ticketQuantity,
        paymentStatus: event.isPaid ? 'pending' : 'free',
        totalAmount: event.isPaid ? totalAmount : 0
      };
      
      // Add userId if logged in
      if (authState.status) {
        registrationPayload.userId = authState.id;
      }
      
      // Submit registration
      const response = await axios.post(
        'http://localhost:3001/registrations',
        registrationPayload,
        authState.status ? {
          headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` }
        } : {}
      );
      
      // Handle successful registration
      setRegistrationData(response.data);
      setRegistrationComplete(true);
      
      // If event is free, show success message
      if (!event.isPaid) {
        // No payment needed, registration is complete
      } else {
        // For paid events, we'll show payment options
      }
      
    } catch (err) {
      console.error('Registration error:', err);
      setError(err.response?.data?.error || 'Failed to complete registration. Please try again.');
    } finally {
      setLoading(false);
    }
  };
  
  const handlePaymentCompleted = (paymentInfo) => {
    // This will be implemented later with Stripe
    console.log('Payment completed:', paymentInfo);
    
    // For now, we'll just show a success message
    alert('Payment completed successfully!');
    
    // Redirect to the event page
    navigate(`/event/${id}`);
  };
  
  // Handle interim payment (manual payment for now)
  const handleManualPayment = () => {
    alert(`Please complete your payment of $${totalAmount.toFixed(2)} at the event. Your registration is confirmed but payment is pending.`);
    navigate(`/event/${id}`);
  };
  
  if (loading && !event) {
    return (
      <div className="container d-flex justify-content-center align-items-center" style={{ minHeight: "60vh" }}>
        <div className="spinner-border" role="status" style={{ color: accentColor }}>
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }
  
  if (error && !event) {
    return (
      <div className="container mt-5 text-center">
        <div className="alert alert-danger">
          <i className="fas fa-exclamation-circle me-2"></i>{error}
        </div>
        <button
          className="btn mt-3"
          onClick={() => navigate("/")}
          style={{ backgroundColor: primaryColor, color: "white" }}
        >
          <i className="fas fa-home me-2"></i>Back to Home
        </button>
      </div>
    );
  }
  
  return (
    <div className="container my-5">
      <div className="card shadow-sm">
        <div className="card-header" style={{ backgroundColor: primaryColor, color: "white" }}>
          <h2 className="mb-0 d-flex align-items-center">
            <i className="fas fa-ticket-alt me-2"></i>
            {registrationComplete ? 'Registration Confirmed' : 'Register for Event'}
          </h2>
        </div>
        
        <div className="card-body">
          {/* Event Information Section */}
          <div className="row mb-4">
            <div className="col-md-8">
              <h3>{event?.title}</h3>
              <p className="text-muted">
                <i className="fas fa-calendar-day me-2"></i>
                {event?.date ? format(new Date(event.date), "MMMM dd, yyyy") : "Date not provided"}
                <span className="mx-3">|</span>
                <i className="fas fa-clock me-2"></i>
                {event?.time ? format(new Date(`2000-01-01T${event.time}`), "h:mm a") : "Time not specified"}
              </p>
              <p>
                <i className="fas fa-map-marker-alt me-2"></i>
                {event?.location}
              </p>
              {event?.isPaid && (
                <div className="alert alert-info">
                  <i className="fas fa-info-circle me-2"></i>
                  This is a paid event. Ticket price: <strong>${parseFloat(event.price).toFixed(2)}</strong> per person.
                </div>
              )}
            </div>
            
            <div className="col-md-4 text-end">
              <button
                className="btn btn-outline-secondary"
                onClick={() => navigate(`/event/${id}`)}
              >
                <i className="fas fa-arrow-left me-2"></i>Back to Event
              </button>
            </div>
          </div>
          
          {error && <div className="alert alert-danger mb-4">{error}</div>}
          
          {!registrationComplete ? (
            /* Registration Form */
            <form onSubmit={handleSubmit}>
              <div className="row">
                <div className="col-md-6 mb-3">
                  <label htmlFor="fullName" className="form-label">Full Name *</label>
                  <input
                    type="text"
                    className="form-control"
                    id="fullName"
                    value={fullName}
                    onChange={(e) => setFullName(e.target.value)}
                    required
                  />
                </div>
                <div className="col-md-6 mb-3">
                  <label htmlFor="email" className="form-label">Email Address *</label>
                  <input
                    type="email"
                    className="form-control"
                    id="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                  />
                </div>
              </div>
              
              <div className="row">
                <div className="col-md-6 mb-3">
                  <label htmlFor="phone" className="form-label">Phone Number *</label>
                  <input
                    type="tel"
                    className="form-control"
                    id="phone"
                    value={phone}
                    onChange={(e) => setPhone(e.target.value)}
                    required
                  />
                </div>
                <div className="col-md-6 mb-3">
                  <label htmlFor="ticketQuantity" className="form-label">Number of Tickets *</label>
                  <input
                    type="number"
                    className="form-control"
                    id="ticketQuantity"
                    min="1"
                    max={event?.maxRegistrations || 10}
                    value={ticketQuantity}
                    onChange={(e) => setTicketQuantity(parseInt(e.target.value))}
                    required
                  />
                </div>
              </div>
              
              <div className="mb-3">
                <label htmlFor="address" className="form-label">Address</label>
                <input
                  type="text"
                  className="form-control"
                  id="address"
                  value={address}
                  onChange={(e) => setAddress(e.target.value)}
                />
              </div>
              
              <div className="row">
                <div className="col-md-4 mb-3">
                  <label htmlFor="city" className="form-label">City</label>
                  <input
                    type="text"
                    className="form-control"
                    id="city"
                    value={city}
                    onChange={(e) => setCity(e.target.value)}
                  />
                </div>
                <div className="col-md-4 mb-3">
                  <label htmlFor="state" className="form-label">State</label>
                  <input
                    type="text"
                    className="form-control"
                    id="state"
                    value={state}
                    onChange={(e) => setState(e.target.value)}
                  />
                </div>
                <div className="col-md-4 mb-3">
                  <label htmlFor="zipCode" className="form-label">ZIP Code</label>
                  <input
                    type="text"
                    className="form-control"
                    id="zipCode"
                    value={zipCode}
                    onChange={(e) => setZipCode(e.target.value)}
                  />
                </div>
              </div>
              
              <div className="mb-4">
                <label htmlFor="specialRequirements" className="form-label">Special Requirements or Notes</label>
                <textarea
                  className="form-control"
                  id="specialRequirements"
                  rows="3"
                  value={specialRequirements}
                  onChange={(e) => setSpecialRequirements(e.target.value)}
                ></textarea>
              </div>
              
              {event?.isPaid && (
                <div className="card mb-4">
                  <div className="card-header bg-light">
                    <h5 className="mb-0">Order Summary</h5>
                  </div>
                  <div className="card-body">
                    <div className="d-flex justify-content-between mb-2">
                      <span>Ticket Price:</span>
                      <span>${parseFloat(event.price).toFixed(2)}</span>
                    </div>
                    <div className="d-flex justify-content-between mb-2">
                      <span>Quantity:</span>
                      <span>{ticketQuantity}</span>
                    </div>
                    <hr />
                    <div className="d-flex justify-content-between fw-bold">
                      <span>Total Amount:</span>
                      <span>${totalAmount.toFixed(2)}</span>
                    </div>
                  </div>
                </div>
              )}
              
              <div className="d-grid">
                <button
                  type="submit"
                  className="btn btn-lg"
                  disabled={loading}
                  style={{ backgroundColor: accentColor, color: "white" }}
                >
                  {loading ? (
                    <>
                      <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                      Processing...
                    </>
                  ) : (
                    <>
                      <i className="fas fa-check-circle me-2"></i>
                      Complete Registration
                    </>
                  )}
                </button>
              </div>
            </form>
          ) : (
            /* Registration Confirmation */
            <div className="text-center py-4">
              <div className="mb-4">
                <i className="fas fa-check-circle fa-4x" style={{ color: "#28a745" }}></i>
                <h3 className="mt-3">Registration Successful!</h3>
                <p className="lead">Thank you for registering for this event.</p>
                <p>Your confirmation code: <strong>{registrationData?.confirmationCode}</strong></p>
                <p>A confirmation email has been sent to your email address.</p>
              </div>
              
              {event?.isPaid && (
                <div className="card mb-4 mx-auto" style={{ maxWidth: "500px" }}>
                  <div className="card-header bg-light">
                    <h5 className="mb-0">Payment Information</h5>
                  </div>
                  <div className="card-body">
                    <p>To complete your registration, please make a payment of:</p>
                    <h3 className="mb-4">${totalAmount.toFixed(2)}</h3>
                    
                    {/* Placeholder for future Stripe integration */}
                    <div className="alert alert-info">
                      <p>
                        <i className="fas fa-info-circle me-2"></i>
                        Our online payment system is currently being upgraded.
                      </p>
                      <p className="mb-0">
                        You can pay at the event or contact the organizer for payment options.
                      </p>
                    </div>
                    
                    <button
                      className="btn mt-3"
                      onClick={handleManualPayment}
                      style={{ backgroundColor: accentColor, color: "white" }}
                    >
                      <i className="fas fa-check me-2"></i>
                      I'll Pay at the Event
                    </button>
                  </div>
                </div>
              )}
              
              <div className="mt-4">
                <button
                  className="btn me-3"
                  onClick={() => navigate(`/event/${id}`)}
                  style={{ backgroundColor: primaryColor, color: "white" }}
                >
                  <i className="fas fa-arrow-left me-2"></i>
                  Return to Event
                </button>
                
                {authState.status && (
                  <button
                    className="btn btn-outline-secondary"
                    onClick={() => navigate('/my-registrations')}
                  >
                    <i className="fas fa-ticket-alt me-2"></i>
                    View My Registrations
                  </button>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default EventRegistration;
</file>

<file path="client/src/pages/NotificationIcon.js">
"use client"

import { useState } from "react"
import { useNavigate } from "react-router-dom"

const NotificationIcon = ({ notifications, markAsRead, markAllAsRead }) => {
  const [showDropdown, setShowDropdown] = useState(false)
  const navigate = useNavigate()

  const handleNotificationClick = (notification) => {
    markAsRead(notification.id)
    setShowDropdown(false)

    // Navigate based on notification type
    if (notification.type === "event") {
      navigate(`/event/${notification.relatedId}`)
    } else if (notification.type === "review") {
      navigate(`/response/${notification.relatedId}`)
    }
  }

  const unreadCount = notifications.filter((n) => !n.isRead).length

  return (
    <div className="notification-icon position-relative me-3">
      <i
        className="bi bi-bell-fill text-white"
        style={{ fontSize: "24px", cursor: "pointer" }}
        onClick={() => setShowDropdown(!showDropdown)}
      ></i>
      {unreadCount > 0 && (
        <span className="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
          {unreadCount}
        </span>
      )}

      {showDropdown && (
        <div
          className="notification-dropdown bg-white text-dark p-3 rounded position-absolute end-0"
          style={{ width: "300px", maxHeight: "400px", overflowY: "auto", zIndex: 1000 }}
        >
          {notifications.length > 0 ? (
            <>
              {notifications.map((notification) => (
                <div
                  key={notification.id}
                  className={`notification-item d-flex justify-content-between align-items-center mb-2 p-2 ${notification.isRead ? "" : "bg-light"}`}
                  onClick={() => handleNotificationClick(notification)}
                  style={{ cursor: "pointer" }}
                >
                  <p className="m-0">{notification.message}</p>
                  {!notification.isRead && <span className="badge bg-primary">New</span>}
                </div>
              ))}
              <button className="btn btn-sm btn-primary w-100" onClick={() => markAllAsRead()}>
                Mark All as Read
              </button>
            </>
          ) : (
            <p className="text-center m-0">No notifications</p>
          )}
        </div>
      )}
    </div>
  )
}

export default NotificationIcon
</file>

<file path="server/routes/AdminAnalytics.js">
// routes/AdminAnalytics.js
const express = require("express");
const router = express.Router();
const { Events, Reviews, EventAnalytics, Users } = require("../models");
const { validateToken } = require("../middlewares/AuthMiddleware");
const Sequelize = require("sequelize");
const { Op } = Sequelize;
const Sentiment = require("sentiment");

// Initialize sentiment analyzer
const sentimentAnalyzer = new Sentiment();

/**
 * Get analytics dashboard data for all events
 * Admin only endpoint
 */
router.get("/dashboard", validateToken, async (req, res) => {
  try {
    if (!req.isAdmin) {
      return res.status(403).json({ error: "Access denied" });
    }

    // Get recent reviews
    const recentReviews = await Reviews.findAll({
      limit: 5,
      order: [["createdAt", "DESC"]],
      include: [
        { model: Events, attributes: ["title"] },
        { model: Users, attributes: ["username", "avatar"] }
      ]
    });

    // Get top rated events
    const topRatedEvents = await Events.findAll({
      attributes: [
        "id", 
        "title", 
        "category", 
        "date",
        [Sequelize.fn("AVG", Sequelize.col("Reviews.rating")), "avgRating"],
        [Sequelize.fn("COUNT", Sequelize.col("Reviews.id")), "reviewCount"]
      ],
      include: [
        { 
          model: Reviews, 
          attributes: [] 
        }
      ],
      group: ["Events.id"],
      having: Sequelize.literal("COUNT(Reviews.id) >= 3"),
      order: [[Sequelize.literal("avgRating"), "DESC"]],
      limit: 5
    });

    // Get sentiment distribution
    const sentimentCounts = await Reviews.findAll({
      attributes: [
        "sentiment",
        [Sequelize.fn("COUNT", Sequelize.col("id")), "count"]
      ],
      group: ["sentiment"]
    });

    // Get review count by date (last 30 days)
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

    const reviewsByDate = await Reviews.findAll({
      attributes: [
        [Sequelize.fn("DATE", Sequelize.col("createdAt")), "date"],
        [Sequelize.fn("COUNT", Sequelize.col("id")), "count"]
      ],
      where: {
        createdAt: {
          [Op.gte]: thirtyDaysAgo
        }
      },
      group: [Sequelize.fn("DATE", Sequelize.col("createdAt"))],
      order: [[Sequelize.fn("DATE", Sequelize.col("createdAt")), "ASC"]]
    });

    return res.json({
      recentReviews,
      topRatedEvents,
      sentimentCounts,
      reviewsByDate
    });
  } catch (error) {
    console.error("Error fetching admin dashboard data:", error);
    return res.status(500).json({ error: "Internal server error" });
  }
});

/**
 * Generate AI insights for an event
 * Admin only endpoint
 */
router.post("/insights/:eventId", validateToken, async (req, res) => {
  try {
    if (!req.isAdmin) {
      return res.status(403).json({ error: "Access denied" });
    }

    const { eventId } = req.params;
    
    // Get event details
    const event = await Events.findByPk(eventId);
    if (!event) {
      return res.status(404).json({ error: "Event not found" });
    }

    // Get all reviews for this event
    const reviews = await Reviews.findAll({
      where: { EventId: eventId }
    });

    if (reviews.length < 1) {
      return res.status(400).json({ 
        error: "Not enough reviews to generate insights",
        insights: ["Not enough reviews to generate meaningful insights."]
      });
    }

    // Calculate average rating
    const ratings = reviews.map(r => r.rating);
    const avgRating = ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length;

    // Calculate sentiment distribution
    const positiveSentiment = reviews.filter(r => r.sentiment === 'positive').length;
    const neutralSentiment = reviews.filter(r => r.sentiment === 'neutral').length;
    const negativeSentiment = reviews.filter(r => r.sentiment === 'negative').length;
    const totalReviews = reviews.length;
    
    const sentimentPercent = Math.round((positiveSentiment / totalReviews) * 100);

    // Get key terms from reviews
    const allReviewText = reviews.map(r => r.review_text).join(' ');
    
    // Perform basic keyword extraction
    const commonWords = ["the", "and", "was", "for", "that", "this", "with", "event", "very", "but"];
    const words = allReviewText.toLowerCase().match(/\b(\w+)\b/g) || [];
    const wordCount = {};
    
    words.forEach(word => {
      if (word.length > 3 && !commonWords.includes(word)) {
        wordCount[word] = (wordCount[word] || 0) + 1;
      }
    });
    
    const sortedKeywords = Object.entries(wordCount)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([text, value]) => ({ text, value }));

    // Generate insights
    const insights = [
      `Average rating is ${avgRating.toFixed(1)} out of 5 stars.`,
      `${sentimentPercent}% of reviews express positive sentiment.`,
      `Most frequent feedback terms: ${sortedKeywords.slice(0, 5).map(k => k.text).join(', ')}.`
    ];

    // Add category-specific insight
    insights.push(`Attendees showed highest engagement with ${event.category}-related content.`);

    // Add recommendations based on sentiment
    if (sentimentPercent < 70) {
      insights.push("Consider soliciting more detailed feedback to address areas of concern.");
    } else {
      insights.push("Positive feedback suggests your format is working well. Consider expanding similar events.");
    }

    // Find any specific issues mentioned in negative reviews
    const negativeReviews = reviews.filter(r => r.sentiment === 'negative');
    if (negativeReviews.length > 0) {
      insights.push("Areas for improvement based on negative feedback: venue facilities and session timing.");
    }

    // Save insights to the database
    let analytics = await EventAnalytics.findOne({
      where: { event_id: eventId }
    });

    if (!analytics) {
      // Create new analytics record
      analytics = await EventAnalytics.create({
        event_id: eventId,
        sentiment_positive_count: positiveSentiment,
        sentiment_neutral_count: neutralSentiment,
        sentiment_negative_count: negativeSentiment,
        total_reviews: totalReviews,
        average_rating: avgRating,
        ai_insights: insights
      });
    } else {
      // Update existing analytics record
      analytics.sentiment_positive_count = positiveSentiment;
      analytics.sentiment_neutral_count = neutralSentiment;
      analytics.sentiment_negative_count = negativeSentiment;
      analytics.total_reviews = totalReviews;
      analytics.average_rating = avgRating;
      analytics.ai_insights = insights;
      await analytics.save();
    }

    return res.json({
      insights,
      keywords: sortedKeywords,
      sentimentBreakdown: {
        positive: positiveSentiment,
        neutral: neutralSentiment,
        negative: negativeSentiment
      },
      avgRating
    });
  } catch (error) {
    console.error("Error generating insights:", error);
    return res.status(500).json({ error: "Internal server error" });
  }
});

/**
 * Generate AI response to a review
 * Admin only endpoint
 */
router.post("/respond/:reviewId", validateToken, async (req, res) => {
  try {
    if (!req.isAdmin) {
      return res.status(403).json({ error: "Access denied" });
    }

    const { reviewId } = req.params;
    const { template } = req.body;

    // Get review details
    const review = await Reviews.findByPk(reviewId, {
      include: [
        { model: Events },
        { model: Users }
      ]
    });

    if (!review) {
      return res.status(404).json({ error: "Review not found" });
    }

    // Generate response based on sentiment
    let response;
    
    if (template) {
      // Use custom template if provided
      response = template
        .replace(/{username}/g, review.User.username)
        .replace(/{event_name}/g, review.Event.title)
        .replace(/{rating}/g, review.rating)
        .replace(/{category}/g, review.Event.category);
    } else {
      // Generate response based on sentiment
      if (review.sentiment === 'positive') {
        response = `Thank you for your positive review, ${review.User.username}! We're delighted that you enjoyed ${review.Event.title} and appreciate your feedback. We hope to see you at our future events!`;
      } else if (review.sentiment === 'negative') {
        response = `We're sorry to hear about your experience at ${review.Event.title}, ${review.User.username}. We take all feedback seriously and will use your comments to improve. Please contact our support team if you'd like to discuss your concerns further.`;
      } else {
        response = `Thank you for attending ${review.Event.title} and sharing your thoughts, ${review.User.username}. We appreciate your honest feedback and will take your comments into consideration for our future events. If you have any specific suggestions, please let us know!`;
      }
    }

    // Save response to review
    review.admin_response = response;
    await review.save();

    // Create notification for user
    if (req.app.io) {
      req.app.io.to(`user-${review.UserId}`).emit('user-notification', {
        message: `Admin responded to your review for ${review.Event.title}.`,
        type: "review_response",
        relatedId: review.EventId,
        id: Date.now().toString(),
        isRead: false,
        createdAt: new Date(),
      });
    }

    return res.json({
      success: true,
      response,
      reviewId: review.id
    });
  } catch (error) {
    console.error("Error generating AI response:", error);
    return res.status(500).json({ error: "Internal server error" });
  }
});

/**
 * Auto-respond to all unresponded reviews for an event
 * Admin only endpoint
 */
router.post("/auto-respond/:eventId", validateToken, async (req, res) => {
  try {
    if (!req.isAdmin) {
      return res.status(403).json({ error: "Access denied" });
    }

    const { eventId } = req.params;
    const { responseThreshold } = req.body; // 'any', 'negative', 'neutral'
    
    // Find event
    const event = await Events.findByPk(eventId);
    if (!event) {
      return res.status(404).json({ error: "Event not found" });
    }
    
    // Find reviews without admin responses
    let whereClause = { 
      EventId: eventId,
      admin_response: null 
    };
    
    // Filter by sentiment if threshold provided
    if (responseThreshold === 'negative') {
      whereClause.sentiment = 'negative';
    } else if (responseThreshold === 'neutral') {
      whereClause.sentiment = {
        [Op.in]: ['negative', 'neutral']
      };
    }
    
    const reviews = await Reviews.findAll({
      where: whereClause,
      include: [{ model: Users }]
    });
    
    if (reviews.length === 0) {
      return res.json({
        success: true,
        message: "No unresponded reviews found that match the criteria.",
        count: 0
      });
    }
    
    // Generate responses for each review
    const responsePromises = reviews.map(async (review) => {
      // Generate response based on sentiment
      let response;
      
      if (review.sentiment === 'positive') {
        response = `Thank you for your positive review, ${review.User.username}! We're delighted that you enjoyed ${event.title} and appreciate your feedback. We hope to see you at our future events!`;
      } else if (review.sentiment === 'negative') {
        response = `We're sorry to hear about your experience at ${event.title}, ${review.User.username}. We take all feedback seriously and will use your comments to improve. Please contact our support team if you'd like to discuss your concerns further.`;
      } else {
        response = `Thank you for attending ${event.title} and sharing your thoughts, ${review.User.username}. We appreciate your honest feedback and will take your comments into consideration for our future events. If you have any specific suggestions, please let us know!`;
      }
      
      // Save response
      review.admin_response = response;
      await review.save();
      
      // Send notification
      if (req.app.io) {
        req.app.io.to(`user-${review.UserId}`).emit('user-notification', {
          message: `Admin responded to your review for ${event.title}.`,
          type: "review_response",
          relatedId: review.EventId,
          id: Date.now().toString(),
          isRead: false,
          createdAt: new Date(),
        });
      }
      
      return {
        reviewId: review.id,
        response
      };
    });
    
    const results = await Promise.all(responsePromises);
    
    return res.json({
      success: true,
      message: `Successfully responded to ${results.length} reviews.`,
      count: results.length,
      responses: results
    });
  } catch (error) {
    console.error("Error auto-responding to reviews:", error);
    return res.status(500).json({ error: "Internal server error" });
  }
});

/**
 * Get analytics for a specific event
 */
router.get("/:eventId", async (req, res) => {
  try {
    const { eventId } = req.params;
    
    // Get event details
    const event = await Events.findByPk(eventId);
    if (!event) {
      return res.status(404).json({ error: "Event not found" });
    }
    
    // Get event analytics
    let analytics = await EventAnalytics.findOne({
      where: { event_id: eventId }
    });
    
    // If analytics don't exist, generate them
    if (!analytics) {
      const reviews = await Reviews.findAll({
        where: { EventId: eventId }
      });
      
      // Calculate sentiment distribution
      const positiveSentiment = reviews.filter(r => r.sentiment === 'positive').length;
      const neutralSentiment = reviews.filter(r => r.sentiment === 'neutral').length;
      const negativeSentiment = reviews.filter(r => r.sentiment === 'negative').length;
      const totalReviews = reviews.length;
      
      // Calculate average rating
      let avgRating = 0;
      if (totalReviews > 0) {
        const ratings = reviews.map(r => r.rating);
        avgRating = ratings.reduce((sum, rating) => sum + rating, 0) / totalReviews;
      }
      
      // Create basic analytics
      analytics = await EventAnalytics.create({
        event_id: eventId,
        sentiment_positive_count: positiveSentiment,
        sentiment_neutral_count: neutralSentiment,
        sentiment_negative_count: negativeSentiment,
        total_reviews: totalReviews,
        average_rating: avgRating,
        ai_insights: ["Analysis will be available when more reviews are collected."],
        attendance_data: JSON.stringify([
          { day: 'Day 1', attendance: 0 },
          { day: 'Day 2', attendance: 0 },
          { day: 'Day 3', attendance: 0 }
        ]),
        satisfaction_data: JSON.stringify([
          { name: 'Very Satisfied', value: 0 },
          { name: 'Satisfied', value: 0 },
          { name: 'Neutral', value: 0 },
          { name: 'Dissatisfied', value: 0 }
        ]),
        rating_breakdown: JSON.stringify([
          { category: 'Content', rating: 0 },
          { category: 'Speakers', rating: 0 },
          { category: 'Venue', rating: 0 },
          { category: 'Organization', rating: 0 },
          { category: 'Value', rating: 0 }
        ]),
        engagement_over_time: JSON.stringify([
          { time: '9 AM', engagement: 0 },
          { time: '10 AM', engagement: 0 },
          { time: '11 AM', engagement: 0 },
          { time: '12 PM', engagement: 0 },
          { time: '1 PM', engagement: 0 },
          { time: '2 PM', engagement: 0 },
          { time: '3 PM', engagement: 0 },
          { time: '4 PM', engagement: 0 },
          { time: '5 PM', engagement: 0 }
        ])
      });
    }
    
    // Calculate sentiment score if analytics exist
    const sentimentScore = analytics.total_reviews > 0 
      ? Math.round(((analytics.sentiment_positive_count + (analytics.sentiment_neutral_count * 0.5)) / analytics.total_reviews) * 100)
      : 0;
    
    // Get reviews for this event
    const reviews = await Reviews.findAll({
      where: { EventId: eventId },
      attributes: ["id", "review_text", "rating", "username", "sentiment", "admin_response", "createdAt"],
      order: [["createdAt", "DESC"]],
      limit: 10
    });
    
    return res.json({
      event,
      analytics: {
        ...analytics.toJSON(),
        sentiment_score: sentimentScore
      },
      reviews
    });
  } catch (error) {
    console.error("Error fetching event analytics:", error);
    return res.status(500).json({ error: "Internal server error" });
  }
});

// In server/routes/AdminAnalytics.js - Add a new endpoint for detailed sentiment analysis

router.get('/reviews/insights/:eventId', validateToken, async (req, res) => {
  try {
    const { eventId } = req.params;
    
    // Get all reviews for this event
    const reviews = await Reviews.findAll({
      where: { EventId: eventId },
      include: [{ model: Users, attributes: ['username'] }]
    });
    
    if (reviews.length < 3) {
      return res.json({
        insights: ["Not enough reviews to generate meaningful insights."],
        keywords: [],
        topicClusters: []
      });
    }
    
    // Extract review texts
    const reviewTexts = reviews.map(r => r.review_text);
    
    // Perform keyword extraction
    const keywords = extractKeywords(reviewTexts);
    
    // Perform topic clustering
    const topicClusters = identifyTopics(reviewTexts);
    
    // Generate insights based on patterns
    const insights = generateInsightsFromReviews(reviews, keywords, topicClusters);
    
    res.json({
      insights,
      keywords,
      topicClusters,
      reviewCount: reviews.length,
      averageRating: calculateAverageRating(reviews),
      sentimentDistribution: calculateSentimentDistribution(reviews)
    });
  } catch (error) {
    console.error('Error generating review insights:', error);
    res.status(500).json({ error: 'Failed to generate insights' });
  }
});

// Helper functions for review analysis
function extractKeywords(reviewTexts) {
  // Combine all review texts
  const combinedText = reviewTexts.join(' ');
  
  // Remove common stopwords
  const stopwords = ['the', 'and', 'a', 'an', 'in', 'on', 'at', 'to', 'for', 'with', 'by', 'was', 'were'];
  
  // Split into words and count frequencies
  const words = combinedText.toLowerCase().match(/\b(\w+)\b/g) || [];
  const wordCount = {};
  
  words.forEach(word => {
    if (word.length > 3 && !stopwords.includes(word)) {
      wordCount[word] = (wordCount[word] || 0) + 1;
    }
  });
  
  // Sort by frequency and return top keywords
  return Object.entries(wordCount)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 15)
    .map(([term, count]) => ({ term, count }));
}

function identifyTopics(reviewTexts) {
  // This is a simplified topic clustering approach
  // In production, you would use a more sophisticated algorithm like LDA
  
  // Define common topics to look for
  const topicKeywords = {
    'venue': ['venue', 'location', 'place', 'facility', 'facilities', 'space'],
    'food': ['food', 'meal', 'catering', 'drinks', 'refreshments'],
    'speakers': ['speaker', 'speakers', 'presentation', 'talk', 'speech', 'presenter'],
    'organization': ['organized', 'organization', 'staff', 'planning', 'schedule', 'agenda'],
    'content': ['content', 'materials', 'information', 'knowledge', 'learn', 'learned', 'educational'],
    'networking': ['network', 'networking', 'people', 'contacts', 'connections', 'socializing']
  };
  
  // Count occurrences of keywords for each topic
  const topicCounts = {};
  
  Object.keys(topicKeywords).forEach(topic => {
    topicCounts[topic] = 0;
    
    reviewTexts.forEach(text => {
      const lowerText = text.toLowerCase();
      topicKeywords[topic].forEach(keyword => {
        if (lowerText.includes(keyword)) {
          topicCounts[topic]++;
        }
      });
    });
  });
  
  // Convert to array and sort by frequency
  return Object.entries(topicCounts)
    .map(([topic, count]) => ({ topic, count }))
    .sort((a, b) => b.count - a.count);
}

function generateInsightsFromReviews(reviews, keywords, topicClusters) {
  const insights = [];
  
  // Calculate average rating
  const avgRating = calculateAverageRating(reviews);
  insights.push(`Average rating is ${avgRating.toFixed(1)} out of 5 stars.`);
  
  // Analyze sentiment distribution
  const sentimentDist = calculateSentimentDistribution(reviews);
  insights.push(`${sentimentDist.positive}% of reviews express positive sentiment, while ${sentimentDist.negative}% express negative sentiment.`);
  
  // Add insights about top topics
  if (topicClusters.length > 0) {
    const topTopics = topicClusters.slice(0, 3).map(t => t.topic);
    insights.push(`Most frequently discussed aspects: ${topTopics.join(', ')}.`);
    
    // Analyze ratings by top topic
    topicClusters.slice(0, 2).forEach(topicData => {
      const topic = topicData.topic;
      
      // Find reviews mentioning this topic
      const topicReviews = reviews.filter(review => {
        const lowerText = review.review_text.toLowerCase();
        return topicKeywords[topic].some(keyword => lowerText.includes(keyword));
      });
      
      if (topicReviews.length > 0) {
        const topicAvgRating = topicReviews.reduce((sum, r) => sum + r.rating, 0) / topicReviews.length;
        
        if (topicAvgRating > avgRating + 0.5) {
          insights.push(`"${capitalizeFirstLetter(topic)}" is highly rated (${topicAvgRating.toFixed(1)}/5) and a significant strength.`);
        } else if (topicAvgRating < avgRating - 0.5) {
          insights.push(`"${capitalizeFirstLetter(topic)}" received lower ratings (${topicAvgRating.toFixed(1)}/5) and may need improvement.`);
        }
      }
    });
  }
  
  // Add recommendation based on overall sentiment
  if (sentimentDist.positive > 70) {
    insights.push('Overall sentiment is very positive. Consider highlighting these strengths in marketing materials.');
  } else if (sentimentDist.negative > 30) {
    insights.push('There is a significant amount of negative feedback. Consider addressing the most mentioned issues.');
  }
  
  return insights;
}

function calculateAverageRating(reviews) {
  if (reviews.length === 0) return 0;
  return reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length;
}

function calculateSentimentDistribution(reviews) {
  if (reviews.length === 0) {
    return { positive: 0, neutral: 0, negative: 0 };
  }
  
  const positive = reviews.filter(r => r.sentiment === 'positive').length;
  const neutral = reviews.filter(r => r.sentiment === 'neutral').length;
  const negative = reviews.filter(r => r.sentiment === 'negative').length;
  
  return {
    positive: Math.round((positive / reviews.length) * 100),
    neutral: Math.round((neutral / reviews.length) * 100),
    negative: Math.round((negative / reviews.length) * 100)
  };
}

function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

/**
 * Update attendance data for an event
 * Admin only endpoint
 */
router.put("/:eventId/attendance", validateToken, async (req, res) => {
  try {
    if (!req.isAdmin) {
      return res.status(403).json({ error: "Access denied" });
    }
    
    const { eventId } = req.params;
    const { attendanceData } = req.body;
    
    if (!Array.isArray(attendanceData)) {
      return res.status(400).json({ error: "Attendance data must be an array" });
    }
    
    // Get event analytics
    let analytics = await EventAnalytics.findOne({
      where: { event_id: eventId }
    });
    
    if (!analytics) {
      // Create new analytics record
      analytics = await EventAnalytics.create({
        event_id: eventId,
        attendance_data: attendanceData,
        total_attendance: attendanceData.reduce((sum, day) => sum + day.attendance, 0)
      });
    } else {
      // Update existing record
      analytics.attendance_data = attendanceData;
      analytics.total_attendance = attendanceData.reduce((sum, day) => sum + day.attendance, 0);
      await analytics.save();
    }
    
    return res.json({
      success: true,
      message: "Attendance data updated successfully",
      analytics: {
        attendance_data: analytics.attendance_data,
        total_attendance: analytics.total_attendance
      }
    });
  } catch (error) {
    console.error("Error updating attendance data:", error);
    return res.status(500).json({ error: "Internal server error" });
  }
});

/**
 * Generate CSV export of analytics
 * Admin only endpoint
 */
router.get("/:eventId/export", validateToken, async (req, res) => {
  try {
    if (!req.isAdmin) {
      return res.status(403).json({ error: "Access denied" });
    }
    
    const { eventId } = req.params;
    const { format } = req.query; // 'csv', 'json'
    
    // Get event details
    const event = await Events.findByPk(eventId);
    if (!event) {
      return res.status(404).json({ error: "Event not found" });
    }
    
    // Get reviews
    const reviews = await Reviews.findAll({
      where: { EventId: eventId },
      attributes: ["id", "review_text", "rating", "sentiment", "username", "createdAt"]
    });
    
    // Get analytics
    const analytics = await EventAnalytics.findOne({
      where: { event_id: eventId }
    });
    
    if (format === 'json') {
      // Return JSON format
      return res.json({
        event,
        reviews,
        analytics
      });
    } else {
      // Default to CSV
      // Generate CSV header
      let csv = "Review ID,Username,Rating,Sentiment,Date,Review Text\n";
      
      // Add each review as a row
      reviews.forEach(review => {
        // Escape quotes in review text
        const escapedText = review.review_text.replace(/"/g, '""');
        
        csv += `${review.id},"${review.username}",${review.rating},"${review.sentiment}","${review.createdAt.toISOString()}","${escapedText}"\n`;
      });
      
      // Set headers for file download
      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', `attachment; filename="${event.title.replace(/[^a-z0-9]/gi, '_')}_reviews.csv"`);
      
      return res.send(csv);
    }
  } catch (error) {
    console.error("Error exporting analytics:", error);
    return res.status(500).json({ error: "Internal server error" });
  }
});

module.exports = router;
</file>

<file path="server/routes/Dashboard.js">
const express = require("express")
const { Users, Events, Reviews, Notifications } = require("../models")
const { validateToken } = require("../middlewares/AuthMiddleware")

const router = express.Router()

router.get("/dashboard", validateToken, async (req, res) => {
  if (!req.isAdmin) {
    return res.status(403).json({ error: "Access denied. Admins only." })
  }

  try {
    const [users, events, reviews, notifications] = await Promise.all([
      Users.findAll(),
      Events.findAll(),
      Reviews.findAll(),
      Notifications.findAll({ where: { isAdminNotification: true } }),
    ])

    const unreadNotificationsCount = notifications.filter((n) => !n.isRead).length

    res.json({
      users,
      events,
      reviews,
      unreadNotificationsCount,
    })
  } catch (error) {
    console.error("Error fetching dashboard data:", error)
    res.status(500).json({ error: "Failed to fetch dashboard data" })
  }
})

module.exports = router
</file>

<file path="server/routes/Registrations.js">
const express = require("express");
const router = express.Router();
const { Registrations, Events, Users, Notifications } = require("../models");
const { validateToken } = require("../middlewares/AuthMiddleware");
const uuid = require("uuid");
const nodemailer = require("nodemailer");
require("dotenv").config();

// Configure mail transporter
const transporter = nodemailer.createTransport({
  service: process.env.EMAIL_SERVICE || "gmail",
  auth: {
    user: process.env.EMAIL_USER || "your-email@gmail.com",
    pass: process.env.EMAIL_PASSWORD || "your-app-password",
  },
});

// Helper function to send confirmation emails
const sendConfirmationEmail = async (registration, event) => {
  try {
    // Email content
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: registration.email,
      subject: `Registration Confirmation for ${event.title}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background-color: #1A2A56; color: white; padding: 20px; text-align: center;">
            <h1>Registration Confirmed!</h1>
          </div>
          <div style="padding: 20px; border: 1px solid #e0e0e0; border-top: none;">
            <p>Dear ${registration.fullName},</p>
            <p>Thank you for registering for <strong>${event.title}</strong>.</p>
            <p><strong>Event Details:</strong></p>
            <ul>
              <li><strong>Date:</strong> ${new Date(event.date).toLocaleDateString()}</li>
              <li><strong>Time:</strong> ${event.time}</li>
              <li><strong>Location:</strong> ${event.location}</li>
              <li><strong>Tickets:</strong> ${registration.ticketQuantity}</li>
              ${registration.totalAmount > 0 ? `<li><strong>Total Paid:</strong> $${registration.totalAmount}</li>` : ''}
            </ul>
            <p><strong>Confirmation Code:</strong> ${registration.confirmationCode}</p>
            <p>Please keep this email for your records. You may be asked to show this confirmation when checking in at the event.</p>
            <p>If you have any questions, please contact us at support@eventhub.com.</p>
            <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e0e0e0; text-align: center;">
              <p style="font-size: 12px; color: #666;">
                © ${new Date().getFullYear()} EventHub. All rights reserved.
              </p>
            </div>
          </div>
        </div>
      `,
    };

    // Send email
    await transporter.sendMail(mailOptions);
    console.log(`Confirmation email sent to ${registration.email}`);
    return true;
  } catch (error) {
    console.error("Error sending confirmation email:", error);
    return false;
  }
};

// Create a new registration
router.post("/", async (req, res) => {
  try {
    const {
      eventId,
      userId,
      fullName,
      email,
      phone,
      address,
      city,
      state,
      zipCode,
      specialRequirements,
      ticketQuantity,
      paymentStatus,
      totalAmount,
    } = req.body;

    // Validate required fields
    if (!eventId || !fullName || !email || !phone) {
      return res.status(400).json({ error: "Missing required fields" });
    }

    // Verify the event exists
    const event = await Events.findByPk(eventId);
    if (!event) {
      return res.status(404).json({ error: "Event not found" });
    }

    // Generate a unique confirmation code
    const confirmationCode = uuid.v4().substring(0, 8).toUpperCase();

    // Create the registration
    const registration = await Registrations.create({
      EventId: eventId,
      UserId: userId || null,
      fullName,
      email,
      phone,
      address,
      city,
      state,
      zipCode,
      specialRequirements,
      ticketQuantity: ticketQuantity || 1,
      paymentStatus: paymentStatus || "pending",
      totalAmount: totalAmount || 0.00,
      confirmationCode,
    });

    // If it's a free event, send confirmation email immediately
    if (paymentStatus === "free") {
      sendConfirmationEmail(registration, event);
    }

    // Notify event organizer of new registration
    try {
      // Create a notification for the event organizer
      if (event.username) {
        const organizer = await Users.findOne({ where: { username: event.username } });
        if (organizer) {
          await Notifications.create({
            message: `New registration from ${fullName} for your event "${event.title}"`,
            type: "registration",
            relatedId: registration.id,
            userId: organizer.id,
            isRead: false,
          });

          // Send real-time notification if socket.io is configured
          if (req.app.io) {
            req.app.io.to(`user-${organizer.id}`).emit("notification", {
              message: `New registration from ${fullName} for your event "${event.title}"`,
              type: "registration",
              relatedId: registration.id,
            });
          }
        }
      }
    } catch (notificationError) {
      console.error("Error sending notification:", notificationError);
      // Continue with the response even if notification fails
    }

    res.status(201).json({
      message: "Registration successful",
      id: registration.id,
      confirmationCode: registration.confirmationCode,
    });
  } catch (error) {
    console.error("Error creating registration:", error);
    res.status(500).json({ error: "Registration failed", details: error.message });
  }
});

// Update payment status
router.put("/:registrationId/payment", async (req, res) => {
  try {
    const { registrationId } = req.params;
    const { paymentStatus, paymentMethod, transactionId } = req.body;

    const registration = await Registrations.findByPk(registrationId, {
      include: [{ model: Events }],
    });

    if (!registration) {
      return res.status(404).json({ error: "Registration not found" });
    }

    // Update payment information
    await registration.update({
      paymentStatus,
      paymentMethod,
      transactionId,
      paymentDate: new Date(),
    });

    // Send confirmation email if payment is completed
    if (paymentStatus === "completed") {
      sendConfirmationEmail(registration, registration.Event);
    }

    res.json({
      message: "Payment status updated",
      registration: {
        id: registration.id,
        paymentStatus: registration.paymentStatus,
        confirmationCode: registration.confirmationCode,
      },
    });
  } catch (error) {
    console.error("Error updating payment status:", error);
    res.status(500).json({ error: "Failed to update payment status" });
  }
});

// Get all registrations for an event (admin/organizer only)
router.get("/event/:eventId", validateToken, async (req, res) => {
  try {
    const { eventId } = req.params;

    // Find the event
    const event = await Events.findByPk(eventId);
    if (!event) {
      return res.status(404).json({ error: "Event not found" });
    }

    // Check if user is authorized (admin or event organizer)
    if (!req.user.isAdmin && req.user.username !== event.username) {
      return res.status(403).json({ error: "Not authorized" });
    }

    // Get all registrations for this event
    const registrations = await Registrations.findAll({
      where: { EventId: eventId },
      order: [["registrationDate", "DESC"]],
    });

    res.json(registrations);
  } catch (error) {
    console.error("Error fetching registrations:", error);
    res.status(500).json({ error: "Failed to fetch registrations" });
  }
});

// Get a specific registration by ID
router.get("/:registrationId", validateToken, async (req, res) => {
  try {
    const { registrationId } = req.params;
    const registration = await Registrations.findByPk(registrationId, {
      include: [{ model: Events }],
    });

    if (!registration) {
      return res.status(404).json({ error: "Registration not found" });
    }

    // Check if user is authorized (admin, event organizer, or the registered user)
    const event = registration.Event;
    if (
      !req.user.isAdmin &&
      req.user.username !== event.username &&
      req.user.id !== registration.UserId
    ) {
      return res.status(403).json({ error: "Not authorized" });
    }

    res.json(registration);
  } catch (error) {
    console.error("Error fetching registration:", error);
    res.status(500).json({ error: "Failed to fetch registration" });
  }
});

// Get all registrations for a user
router.get("/user/me", validateToken, async (req, res) => {
  try {
    const userId = req.user.id;

    const registrations = await Registrations.findAll({
      where: { UserId: userId },
      include: [{ model: Events }],
      order: [["registrationDate", "DESC"]],
    });

    res.json(registrations);
  } catch (error) {
    console.error("Error fetching user registrations:", error);
    res.status(500).json({ error: "Failed to fetch registrations" });
  }
});

// Add to server/routes/Registrations.js if not already there

// Get all registrations (admin only)
router.get("/all", validateToken, async (req, res) => {
  try {
    // Check if user is admin
    if (!req.user.isAdmin) {
      return res.status(403).json({ error: "Not authorized. Admin access required." });
    }

    // Get all registrations with event info
    const registrations = await Registrations.findAll({
      include: [{ model: Events, attributes: ['id', 'title', 'date'] }],
      order: [["registrationDate", "DESC"]],
    });

    res.json(registrations);
  } catch (error) {
    console.error("Error fetching all registrations:", error);
    res.status(500).json({ error: "Failed to fetch registrations" });
  }
});

// Resend confirmation email
router.post("/:registrationId/resend-email", validateToken, async (req, res) => {
  try {
    const { registrationId } = req.params;
    
    // Check if user is admin
    if (!req.user.isAdmin) {
      return res.status(403).json({ error: "Not authorized. Admin access required." });
    }
    
    const registration = await Registrations.findByPk(registrationId, {
      include: [{ model: Events }],
    });
    
    if (!registration) {
      return res.status(404).json({ error: "Registration not found" });
    }
    
    // Send confirmation email
    const emailSent = await sendConfirmationEmail(registration, registration.Event);
    
    if (emailSent) {
      res.json({ message: "Confirmation email sent successfully" });
    } else {
      res.status(500).json({ error: "Failed to send confirmation email" });
    }
  } catch (error) {
    console.error("Error resending confirmation email:", error);
    res.status(500).json({ error: "Failed to resend confirmation email" });
  }
});

// Update check-in status route in server/routes/Registrations.js
router.put("/:registrationId/check-in", validateToken, async (req, res) => {
  try {
    const { registrationId } = req.params;
    const { checkInStatus } = req.body; // Get the new status from the request
    
    const registration = await Registrations.findByPk(registrationId, {
      include: [{ model: Events }],
    });

    if (!registration) {
      return res.status(404).json({ error: "Registration not found" });
    }

    // Check if user is authorized (admin or event organizer)
    const event = registration.Event;
    if (!req.user.isAdmin && req.user.username !== event.username) {
      return res.status(403).json({ error: "Not authorized" });
    }

    // Update check-in status
    const newCheckInStatus = checkInStatus === undefined ? true : checkInStatus;
    
    await registration.update({
      checkInStatus: newCheckInStatus,
      checkInTime: newCheckInStatus ? new Date() : null, // Set or clear time based on status
    });

    res.json({
      message: newCheckInStatus ? "Check-in successful" : "Check-out successful",
      registration: {
        id: registration.id,
        checkInStatus: registration.checkInStatus,
        checkInTime: registration.checkInTime,
      },
    });
  } catch (error) {
    console.error("Error updating check-in status:", error);
    res.status(500).json({ error: "Failed to update check-in status" });
  }
});

// Cancel a registration
router.delete("/:registrationId", validateToken, async (req, res) => {
  try {
    const { registrationId } = req.params;
    const registration = await Registrations.findByPk(registrationId, {
      include: [{ model: Events }],
    });

    if (!registration) {
      return res.status(404).json({ error: "Registration not found" });
    }

    // Check if user is authorized (admin, event organizer, or the registered user)
    const event = registration.Event;
    if (
      !req.user.isAdmin &&
      req.user.username !== event.username &&
      req.user.id !== registration.UserId
    ) {
      return res.status(403).json({ error: "Not authorized" });
    }

    // Delete the registration
    await registration.destroy();

    res.json({ message: "Registration cancelled successfully" });
  } catch (error) {
    console.error("Error cancelling registration:", error);
    res.status(500).json({ error: "Failed to cancel registration" });
  }
});

module.exports = router;
</file>

<file path="server/routes/Response.js">
const express = require("express");
const router = express.Router();
const { Reviews } = require("../models"); // Import models
const { validateToken } = require("../middlewares/AuthMiddleware");

// Add admin response to a review
router.put("/respond/:reviewId", validateToken, async (req, res) => {
  try {
    // Check if user is an admin
    if (!req.user.isAdmin) {
      return res.status(403).json({ error: "Admin privileges required" });
    }

    const { reviewId } = req.params;
    const { adminResponse } = req.body;

    // Validate input
    if (!adminResponse || !adminResponse.trim()) {
      return res.status(400).json({ error: "Response text is required" });
    }

    const review = await Reviews.findByPk(reviewId);
    if (!review) {
      return res.status(404).json({ error: "Review not found" });
    }

    // Update the response field
    review.admin_response = adminResponse;
    await review.save();

    return res.json({
      message: "Admin response added successfully.",
      response: review.admin_response,
    });
  } catch (error) {
    console.error("Error updating review response:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

module.exports = router;
</file>

<file path="client/src/pages/Chatbot.js">
import React, { useContext, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { AuthContext } from "../helpers/AuthContext";
import ChatbotUI from "../components/ChatbotUI";

export default function Chatbot() {
  const { authState } = useContext(AuthContext);
  const navigate = useNavigate();

  useEffect(() => {
    if (!authState.status) {
      navigate("/login");
    }
  }, [authState, navigate]);

  return (
    <div className="container" style={{ paddingTop: "40px" }}>
      <div className="row">
        <div className="col-md-8 mx-auto">
          <div className="card shadow-sm">
            <div className="card-header text-white" style={{ backgroundColor: "#001F3F" }}>
              <h2 className="mb-0">
                <i className="bi bi-chat-dots me-2"></i>
                Event App Assistant
              </h2>
            </div>
            <div className="card-body p-4">
              <p className="lead">
                Welcome to the Event App Assistant! This AI-powered chatbot can help you:
              </p>
              <ul className="list-group list-group-flush mb-4">
                <li className="list-group-item">
                  <i className="bi bi-arrow-right-circle-fill me-2" style={{ color: "#FF6B6B" }}></i>
                  Navigate through the application
                </li>
                <li className="list-group-item">
                  <i className="bi bi-arrow-right-circle-fill me-2" style={{ color: "#FF6B6B" }}></i>
                  Learn how to use features effectively
                </li>
                <li className="list-group-item">
                  <i className="bi bi-arrow-right-circle-fill me-2" style={{ color: "#FF6B6B" }}></i>
                  Get answers about events and reviews
                </li>
                <li className="list-group-item">
                  <i className="bi bi-arrow-right-circle-fill me-2" style={{ color: "#FF6B6B" }}></i>
                  Contact admins when needed
                </li>
              </ul>
              
              <div className="alert" style={{ backgroundColor: "#F8F9FA" }}>
                <div className="d-flex">
                  <div className="me-3">
                    <i className="bi bi-info-circle-fill fs-3" style={{ color: "#001F3F" }}></i>
                  </div>
                  <div>
                    <h5>Try asking questions like:</h5>
                    <ul className="mb-0">
                      <li>"How do I find events near me?"</li>
                      <li>"How can I leave a review for an event?"</li>
                      <li>"Where can I see my notifications?"</li>
                      <li>"How do I contact an admin?"</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Add this line to render the ChatbotUI component */}
      <ChatbotUI />
    </div>
  );
}
</file>

<file path="server/models/Notifications.js">
module.exports = (sequelize, DataTypes) => {
  const Notifications = sequelize.define("Notifications", {
    message: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    type: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    relatedId: {
      type: DataTypes.INTEGER,
      allowNull: true,
    },
    isAdminNotification: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: false,
    },
    isRead: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: false,
    },
  });

  Notifications.associate = (models) => {
    Notifications.belongsTo(models.Users, {
      foreignKey: "userId",
      as: "user",
    });
  };

  return Notifications;
};
</file>

<file path="server/models/Users.js">
module.exports = (sequelize, DataTypes) => {
    const Users = sequelize.define("Users", {
        username: {
            type: DataTypes.STRING,
            allowNull: false,
            unique: true,
        },
        password: {
            type: DataTypes.STRING,
            allowNull: false,
        },
        isAdmin: {
            type: DataTypes.BOOLEAN,
            allowNull: false,
            defaultValue: false,
        },
        resetPasswordToken: {
            type: DataTypes.STRING,
            allowNull: true,
        },
        resetPasswordExpires: {
            type: DataTypes.DATE,
            allowNull: true,
        }
    });

    Users.associate = (models) => {
        // Association with Events (if needed)
        Users.belongsTo(models.Events, {
            foreignKey: "eventId",
            onDelete: "CASCADE",
            allowNull: true,
        });

        // Association with Reviews
        Users.hasMany(models.Reviews, {
            foreignKey: "userId",
            onDelete: "CASCADE",
        });
    };

    return Users;
};
</file>

<file path="server/routes/Chatbot.js">
const express = require("express");
const router = express.Router();

// Updated comprehensive response patterns
const responsePatterns = [
  {
    patterns: ["hello", "hi", "hey", "greetings"],
    response: "👋 Hello! How can I help you with the Event App today? I can assist with finding events, managing reviews, or using our analytics dashboard."
  },
  {
    patterns: ["event", "find events", "search", "search events"],
    response: "You can search for events by using the search bar at the top of the home page. You can filter by date, location, or category. Recent events are also featured on your dashboard."
  },
  {
    patterns: ["review", "leave review", "rate", "rating"],
    response: "To leave a review, navigate to the event page and scroll down to the reviews section. You'll need to be logged in to leave a review. Your review will include a star rating and written feedback."
  },
  {
    patterns: ["calendar", "schedule", "my events"],
    response: "You can view your events in calendar view by clicking on 'Calendar' in the main navigation menu. Events you're attending will be highlighted. You can also export your schedule as a CSV file."
  },
  {
    patterns: ["account", "profile", "settings"],
    response: "You can manage your account settings by clicking on your profile picture in the top right corner and selecting 'Settings'. From there, you can update your profile information and notification preferences."
  },
  {
    patterns: ["create event", "host event", "new event"],
    response: "To create a new event, you need admin permissions. If you're an admin, you can access the event creation form from the admin dashboard. Once created, the event will be available in the analytics dashboard."
  },
  {
    patterns: ["notify", "notification", "alert", "reminder"],
    response: "You'll receive notifications about events you're interested in, updates to events, and responses to your reviews. Check your notification settings in your profile to customize what alerts you receive."
  },
  {
    patterns: ["help", "support", "contact"],
    response: "For additional help, you can contact our support team by clicking on 'Support' in the footer of the app. Our team typically responds within 24 hours."
  },
  // New analytics-related patterns
  {
    patterns: ["analytics", "dashboard", "stats", "statistics", "metrics"],
    response: "The Analytics Dashboard lets you view comprehensive event statistics. Access it from the admin panel to see sentiment analysis, review volumes, and overall ratings for each event. You can filter data by different time ranges: week, month, or quarter."
  },
  {
    patterns: ["report", "export", "download", "csv", "data export"],
    response: "You can generate and download reports from the Analytics Dashboard. Select the report type (Complete, Sentiment, Ratings, or Comments), choose your preferred format (CSV or JSON), set a date range, and click 'Generate Report'. The file will automatically download to your device."
  },
  {
    patterns: ["sentiment", "sentiment analysis", "sentiment score", "positive reviews"],
    response: "Our system analyzes review sentiment automatically. In the Analytics Dashboard, you'll see sentiment scores displayed as percentages of positive, neutral, and negative reviews. The sentiment trend chart tracks how opinion about your event changes over time."
  },
  {
    patterns: ["ai", "auto respond", "automatic response", "ai response"],
    response: "As an admin, you can use our AI auto-response feature to quickly reply to user reviews. On the Reviews tab, click 'AI Response' next to any review or use 'Auto-respond to All' to handle multiple reviews at once. Each response is tailored to the content of the review."
  },
  {
    patterns: ["chart", "graph", "visualization", "trend", "volume"],
    response: "The Analytics Dashboard includes several visualizations: sentiment trend lines, review volume bar charts, sentiment distribution pie charts, and rating distribution graphs. These help you understand user feedback patterns at a glance."
  },
  {
    patterns: ["schedule report", "weekly report", "automatic report", "recurring report"],
    response: "We're currently developing a feature to schedule automatic weekly reports. Soon, you'll be able to have analytics reports delivered directly to your email on a regular basis. Stay tuned for this upcoming feature!"
  },
  {
    patterns: ["filter data", "date range", "time period", "filter reviews"],
    response: "You can filter analytics data by different time periods: week, month, or quarter. For reports, you can set specific start and end dates to analyze exactly the time period you're interested in."
  },
  {
    patterns: ["event selection", "choose event", "switch event", "select event"],
    response: "In the Analytics Dashboard, you'll see a list of events on the left side. Click on any event to load its specific data. The system will display analytics for the selected event across all dashboard tabs."
  },
  {
    patterns: ["generate report", "create report", "make report", "report generation"],
    response: "To generate a report, go to the Reports tab in the Analytics Dashboard. Select your desired report type, format (CSV or JSON), specify a date range, and click 'Generate Report'. The file will be downloaded automatically to your computer."
  },
  {
    patterns: ["overall rating", "average rating", "star rating", "event rating"],
    response: "Each event has an overall rating displayed at the top of the Analytics Dashboard. This is calculated as the average of all individual review ratings and is shown with a star visualization for quick reference."
  },
  {
    patterns: ["total reviews", "review count", "number of reviews"],
    response: "You can see the total number of reviews for each event in the metrics cards at the top of the Analytics Dashboard. This helps you understand how much feedback you've received for your event."
  }
];

// Updated fallback response
const fallbackResponse = "I'm not sure I understand. Could you please rephrase your question about the Event App? I can help with finding events, reviewing events, using the calendar, accessing the analytics dashboard, or generating reports.";

// Function to find the best matching response
function findResponse(userMessage) {
  const userMessageLower = userMessage.toLowerCase();
  
  for (const item of responsePatterns) {
    for (const pattern of item.patterns) {
      if (userMessageLower.includes(pattern)) {
        return item.response;
      }
    }
  }
  
  return fallbackResponse;
}

// Enhanced response function with more natural language understanding
function findBestResponse(userMessage) {
  const userMessageLower = userMessage.toLowerCase();
  let bestMatch = null;
  let bestMatchScore = 0;
  
  // Try to find direct matches first
  for (const item of responsePatterns) {
    for (const pattern of item.patterns) {
      if (userMessageLower.includes(pattern)) {
        // Calculate match quality based on pattern length relative to message
        const matchScore = pattern.length / userMessageLower.length;
        if (matchScore > bestMatchScore) {
          bestMatch = item.response;
          bestMatchScore = matchScore;
        }
      }
    }
  }
  
  // If we have a good match, return it
  if (bestMatchScore > 0.2) {
    return bestMatch;
  }
  
  // If no good match, try word-by-word matching
  const userWords = userMessageLower.split(/\s+/);
  const patternMatches = {};
  
  for (const item of responsePatterns) {
    patternMatches[item.response] = 0;
    
    for (const pattern of item.patterns) {
      const patternWords = pattern.split(/\s+/);
      
      for (const userWord of userWords) {
        if (userWord.length > 3 && patternWords.includes(userWord)) {
          patternMatches[item.response]++;
        }
      }
    }
  }
  
  // Find response with most word matches
  let maxMatches = 0;
  let bestResponse = null;
  
  for (const [response, matches] of Object.entries(patternMatches)) {
    if (matches > maxMatches) {
      maxMatches = matches;
      bestResponse = response;
    }
  }
  
  // Return best match or fallback
  return (maxMatches > 0) ? bestResponse : fallbackResponse;
}

// Chat endpoint with improved SSE handling
router.get("/", (req, res) => {
  // Set up SSE headers
  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive',
    'Access-Control-Allow-Origin': '*'  // Add CORS support
  });
  
  try {
    // Check if messages query parameter exists
    if (!req.query.messages) {
      return res.status(400).send(`data: ${JSON.stringify({ 
        content: "Error: No messages provided", 
        role: "assistant" 
      })}\n\n`);
    }
    
    let messages;
    try {
      messages = JSON.parse(req.query.messages);
    } catch (e) {
      console.error("Error parsing messages:", e);
      return res.status(400).send(`data: ${JSON.stringify({ 
        content: "Error: Invalid messages format", 
        role: "assistant" 
      })}\n\n`);
    }
    
    // Get the latest user message
    const userMessage = messages.filter(msg => msg.role === 'user').pop();
    
    if (!userMessage) {
      return res.status(400).send(`data: ${JSON.stringify({ 
        content: "Error: No user message found", 
        role: "assistant" 
      })}\n\n`);
    }
    
    // Find appropriate response using enhanced algorithm
    const responseText = findBestResponse(userMessage.content);
    
    // Send response in chunks to simulate typing
    const chunks = responseText.split(' ');
    
    // Send the response word by word with a small delay
    let index = 0;
    
    function sendNextChunk() {
      if (index < chunks.length) {
        res.write(`data: ${JSON.stringify({ 
          content: chunks[index] + ' ',
          role: "assistant" 
        })}\n\n`);
        
        index++;
        setTimeout(sendNextChunk, 50); // 50ms delay between words
      } else {
        res.write('data: [DONE]\n\n');
        res.end();
      }
    }
    
    sendNextChunk();
    
  } catch (error) {
    console.error("General error in chat endpoint:", error);
    res.write(`data: ${JSON.stringify({ 
      content: "An unexpected error occurred. Please try again later.",
      role: "assistant" 
    })}\n\n`);
    res.write('data: [DONE]\n\n');
    res.end();
  }
});

// POST endpoint for compatibility
router.post("/", (req, res) => {
  // Set up SSE headers
  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive',
    'Access-Control-Allow-Origin': '*'  // Add CORS support
  });
  
  try {
    const { messages } = req.body;
    
    if (!messages || !Array.isArray(messages)) {
      return res.status(400).json({ error: "Invalid or missing messages" });
    }
    
    // Get the latest user message
    const userMessage = messages.filter(msg => msg.role === 'user').pop();
    
    if (!userMessage) {
      return res.status(400).send(`data: ${JSON.stringify({ 
        content: "Error: No user message found", 
        role: "assistant" 
      })}\n\n`);
    }
    
    // Find appropriate response using enhanced algorithm
    const responseText = findBestResponse(userMessage.content);
    
    // Send response in chunks to simulate typing
    const chunks = responseText.split(' ');
    
    // Send the response word by word with a small delay
    let index = 0;
    
    function sendNextChunk() {
      if (index < chunks.length) {
        res.write(`data: ${JSON.stringify({ 
          content: chunks[index] + ' ',
          role: "assistant" 
        })}\n\n`);
        
        index++;
        setTimeout(sendNextChunk, 50); // 50ms delay between words
      } else {
        res.write('data: [DONE]\n\n');
        res.end();
      }
    }
    
    sendNextChunk();
    
  } catch (error) {
    console.error("General error in chat endpoint:", error);
    res.write(`data: ${JSON.stringify({ 
      content: "An unexpected error occurred. Please try again later.",
      role: "assistant" 
    })}\n\n`);
    res.write('data: [DONE]\n\n');
    res.end();
  }
});

module.exports = router;
</file>

<file path="client/src/helpers/NotificationContext.js">
"use client";

import { createContext, useState, useContext, useEffect } from "react";
import io from "socket.io-client";

const NotificationContext = createContext();
export const useNotifications = () => useContext(NotificationContext);

export const NotificationProvider = ({ children }) => {
  const [notifications, setNotifications] = useState([]);
  const [userNotifications, setUserNotifications] = useState([]);
  const [adminNotifications, setAdminNotifications] = useState([]);
  const [socket, setSocket] = useState(null);

  useEffect(() => {
    const newSocket = io("http://localhost:3001");
    setSocket(newSocket);

    return () => newSocket.close();
  }, []);

  useEffect(() => {
    if (!socket) return;

    const token = localStorage.getItem("accessToken");
    if (token) {
      socket.emit("authenticate", token);
    }

    // Listen for general notifications
    socket.on("notification", (notification) => {
      setNotifications((prev) => [notification, ...prev]);
    });

    // Listen for user-specific notifications
    socket.on("user-notification", (notification) => {
      setUserNotifications((prev) => [notification, ...prev]);
    });

    // Listen for admin notifications
    socket.on("admin-notification", (notification) => {
      setAdminNotifications((prev) => [notification, ...prev]);
    });

    return () => {
      socket.off("notification");
      socket.off("user-notification");
      socket.off("admin-notification");
    };
  }, [socket]);

  const markAsRead = async (notificationId) => {
    try {
      const token = localStorage.getItem("accessToken");
      await fetch(`http://localhost:3001/notifications/${notificationId}/read`, {
        method: "PUT",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      setNotifications((prev) =>
        prev.map((n) => (n.id === notificationId ? { ...n, isRead: true } : n))
      );
    } catch (error) {
      console.error("Error marking notification as read:", error);
    }
  };

  const markAllAsRead = async () => {
    try {
      const token = localStorage.getItem("accessToken");
      await fetch("http://localhost:3001/notifications/read-all", {
        method: "PUT",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      setNotifications((prev) => prev.map((n) => ({ ...n, isRead: true })));
    } catch (error) {
      console.error("Error marking all notifications as read:", error);
    }
  };

  return (
    <NotificationContext.Provider
      value={{
        notifications,
        userNotifications,
        adminNotifications,
        markAsRead,
        markAllAsRead,
      }}
    >
      {children}
    </NotificationContext.Provider>
  );
};
</file>

<file path="client/src/index.js">
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { NotificationProvider } from './helpers/NotificationContext'; // Adjust path accordingly

// Creating a root element to render the app
const root = ReactDOM.createRoot(document.getElementById('root'));

// Rendering the app with NotificationProvider and BrowserRouter
root.render(
  <React.StrictMode>
    <BrowserRouter>
      <NotificationProvider>
        <App />
      </NotificationProvider>
    </BrowserRouter>
  </React.StrictMode>
);

// Calling reportWebVitals for performance measurements
reportWebVitals();
</file>

<file path="client/src/pages/AdminAIReviewsDashboard.js">
// src/pages/AdminAIReviewsDashboard.js
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Line, Bar, Pie } from 'react-chartjs-2';
import axios from 'axios';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import 'bootstrap/dist/css/bootstrap.min.css';

// Register ChartJS components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend
);

// Define the colors
const colors = {
  primary: "#FF5A8E",
  secondary: "#0D1B40",
  accent: "#41C9E2",
  dark: "#081029",
  light: "#FFF5F8",
  text: "#0D1B40",
  textLight: "#6C7A9C",
  chart: ["#FF5A8E", "#0D1B40", "#41C9E2", "#FF9E6D", "#8676FF", "#44D7B6"]
};

// Loading spinner component
const LoadingSpinner = () => (
  <div className="d-flex justify-content-center my-4">
    <div className="spinner-border" role="status" style={{ color: colors.primary }}>
      <span className="visually-hidden">Loading...</span>
    </div>
  </div>
);

// Error alert component
const ErrorAlert = ({ message }) => (
  <div className="container py-3">
    <div className="alert alert-danger" role="alert">
      <h4 className="alert-heading">Error Loading Data</h4>
      <p>{message || 'An unexpected error occurred. Please try again later.'}</p>
    </div>
  </div>
);

const AdminAIReviewsDashboard = () => {
  const navigate = useNavigate();
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [timeRange, setTimeRange] = useState('week');
  const [sentimentTrend, setSentimentTrend] = useState([]);
  const [reviewVolume, setReviewVolume] = useState([]);
  const [eventReviews, setEventReviews] = useState([]);
  const [reportDate, setReportDate] = useState({
    startDate: new Date().toISOString().split('T')[0],
    endDate: new Date().toISOString().split('T')[0]
  });

  // Function to fetch events from the API
  const fetchEvents = async () => {
    try {
      const accessToken = localStorage.getItem('accessToken');
      if (!accessToken) {
        navigate('/login');
        return;
      }

      const response = await axios.get('http://localhost:3001/events', {
        headers: { Authorization: `Bearer ${accessToken}` }
      });

      // Process event data to include additional metrics
      const processedEvents = await Promise.all(response.data.map(async (event) => {
        // Fetch reviews for this event
        const reviewsResponse = await axios.get(`http://localhost:3001/events/${event.id}`, {
          headers: { Authorization: `Bearer ${accessToken}` }
        });
        
        const reviews = reviewsResponse.data.reviews || [];
        
        // Calculate metrics
        const reviewCount = reviews.length;
        const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
        const avgRating = reviewCount > 0 ? (totalRating / reviewCount).toFixed(1) : 0;
        
        // Calculate sentiment score
        const positiveReviews = reviews.filter(review => review.sentiment === 'positive').length;
        const sentimentScore = reviewCount > 0 ? Math.round((positiveReviews / reviewCount) * 100) : 0;
        
        return {
          ...event,
          reviewCount,
          avgRating: parseFloat(avgRating),
          sentimentScore,
          attendanceTotal: Math.floor(Math.random() * 1000) + 200 // Placeholder for attendance data
        };
      }));

      setEvents(processedEvents);
      
      // Select the first event by default if available
      if (processedEvents.length > 0 && !selectedEvent) {
        setSelectedEvent(processedEvents[0]);
        fetchEventAnalytics(processedEvents[0].id);
      }
      
      setLoading(false);
    } catch (err) {
      console.error('Error fetching events:', err);
      setError(err.response?.data?.error || 'Failed to load events');
      setLoading(false);
    }
  };

  // Function to fetch reviews for a specific event
  const fetchEventReviews = async (eventId) => {
    try {
      const accessToken = localStorage.getItem('accessToken');
      const response = await axios.get(`http://localhost:3001/events/${eventId}`, {
        headers: { Authorization: `Bearer ${accessToken}` }
      });
      
      setEventReviews(response.data.reviews || []);
    } catch (err) {
      console.error('Error fetching reviews:', err);
      // Set error state if needed, but don't disrupt the whole dashboard
    }
  };

  // Fetch event analytics based on time range
  const fetchEventAnalytics = async (eventId) => {
    try {
      const accessToken = localStorage.getItem('accessToken');
      if (!accessToken) {
        navigate('/login');
        return;
      }

      // Calculate date range based on selected timeRange
      const endDate = new Date();
      let startDate = new Date();
      
      if (timeRange === 'week') {
        startDate.setDate(endDate.getDate() - 7);
      } else if (timeRange === 'month') {
        startDate.setMonth(endDate.getMonth() - 1);
      } else if (timeRange === 'quarter') {
        startDate.setMonth(endDate.getMonth() - 3);
      }
      
      // Fetch reviews for this time period
      const response = await axios.get(`http://localhost:3001/events/${eventId}`, {
        headers: { Authorization: `Bearer ${accessToken}` }
      });
      
      const reviews = response.data.reviews || [];
      
      // Filter reviews by date range
      const filteredReviews = reviews.filter(review => {
        const reviewDate = new Date(review.createdAt);
        return reviewDate >= startDate && reviewDate <= endDate;
      });
      
      // Generate sentiment trend data
      const dateMap = new Map();
      let currentDate = new Date(startDate);
      
      while (currentDate <= endDate) {
        const dateStr = currentDate.toISOString().split('T')[0];
        dateMap.set(dateStr, { date: dateStr, score: 0, count: 0 });
        currentDate.setDate(currentDate.getDate() + 1);
      }
      
      // Calculate sentiments by date
      filteredReviews.forEach(review => {
        const dateStr = new Date(review.createdAt).toISOString().split('T')[0];
        if (dateMap.has(dateStr)) {
          const dateData = dateMap.get(dateStr);
          
          // Update sentiment score (positive = 100, neutral = 50, negative = 0)
          const sentimentValue = 
            review.sentiment === 'positive' ? 100 :
            review.sentiment === 'neutral' ? 50 : 0;
          
          dateData.score = dateData.count > 0 
            ? (dateData.score * dateData.count + sentimentValue) / (dateData.count + 1)
            : sentimentValue;
            
          dateData.count += 1;
        }
      });
      
      // Convert to arrays for chart data
      const sentimentData = Array.from(dateMap.values())
        .sort((a, b) => new Date(a.date) - new Date(b.date))
        .map(item => ({ 
          date: item.date, 
          score: item.count > 0 ? Math.round(item.score) : null 
        }));
        
      const volumeData = Array.from(dateMap.values())
        .sort((a, b) => new Date(a.date) - new Date(b.date))
        .map(item => ({ 
          date: item.date, 
          count: item.count 
        }));
      
      // Fill in missing values with interpolation
      let lastValidScore = null;
      for (let i = 0; i < sentimentData.length; i++) {
        if (sentimentData[i].score !== null) {
          lastValidScore = sentimentData[i].score;
        } else if (lastValidScore !== null) {
          sentimentData[i].score = lastValidScore;
        } else {
          sentimentData[i].score = 70; // Default starting value
        }
      }

      setSentimentTrend(sentimentData);
      setReviewVolume(volumeData);
      
      // Also update the reviews for this event
      setEventReviews(reviews);
      
    } catch (err) {
      console.error('Error fetching event analytics:', err);
      // Generate some default data if the API fails
      generateDemoData();
    }
  };

  // Generate mock data for demos or when API calls fail
  const generateDemoData = () => {
    // Create mock sentiment data
    const daysInRange = timeRange === 'week' ? 7 : timeRange === 'month' ? 30 : 90;
    const sentimentData = [];
    const volumeData = [];
    
    for (let i = 0; i < daysInRange; i++) {
      const date = new Date();
      date.setDate(date.getDate() - (daysInRange - i - 1));
      
      sentimentData.push({
        date: date.toISOString().split('T')[0],
        score: Math.floor(Math.random() * 30) + 70 // Random score between 70-100
      });
      
      volumeData.push({
        date: date.toISOString().split('T')[0],
        count: Math.floor(Math.random() * 10) + 1 // Random count between 1-10
      });
    }
    
    setSentimentTrend(sentimentData);
    setReviewVolume(volumeData);
  };

  // Handle admin response to review
  const handleAdminResponse = async (reviewId) => {
    try {
      const accessToken = localStorage.getItem('accessToken');
      if (!accessToken) {
        navigate('/login');
        return;
      }
      
      // Generate AI response (in a real application, this would use an AI service)
      const aiResponse = "Thank you for your feedback! We appreciate your input and will use it to improve our future events.";
      
      // Send response to the API
      await axios.put(`http://localhost:3001/reviews/respond/${reviewId}`, 
        { adminResponse: aiResponse },
        { headers: { Authorization: `Bearer ${accessToken}` }}
      );
      
      // Update reviews with the response
      setEventReviews(prevReviews => 
        prevReviews.map(review => 
          review.id === reviewId 
            ? { ...review, admin_response: aiResponse } 
            : review
        )
      );
      
      alert("AI response has been added successfully!");
    } catch (err) {
      console.error('Error sending AI response:', err);
      alert("Failed to add AI response. Please try again.");
    }
  };

  // Initialize with real data
  useEffect(() => {
    fetchEvents();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Update data when time range changes
  useEffect(() => {
    if (selectedEvent) {
      fetchEventAnalytics(selectedEvent.id);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [timeRange, selectedEvent]);

  // Handle event selection
  const selectEvent = (event) => {
    setSelectedEvent(event);
    fetchEventAnalytics(event.id);
    fetchEventReviews(event.id);
  };

  // Handle tab changes
  const handleTabChange = (tabId) => {
    setActiveTab(tabId);
    
    // Fetch reviews when switching to the reviews tab
    if (tabId === 'reviews' && selectedEvent) {
      fetchEventReviews(selectedEvent.id);
    }
  };

  // Handle time range change
  const handleTimeRangeChange = (range) => {
    setTimeRange(range);
  };

// Export report function
const exportReport = (format) => {
  if (!selectedEvent) return;
  
  // Get the report type from the dropdown
  const reportTypeSelect = document.querySelector('select.form-select');
  const reportType = reportTypeSelect ? reportTypeSelect.value : 'full';
  
  // Filter reviews by selected date range
  const startDate = new Date(reportDate.startDate);
  const endDate = new Date(reportDate.endDate);
  endDate.setHours(23, 59, 59, 999); // Set to end of day
  
  const filteredReviews = eventReviews.filter(review => {
    const reviewDate = new Date(review.createdAt);
    return reviewDate >= startDate && reviewDate <= endDate;
  });
  
  let csvContent = '';
  let filename = `${selectedEvent.title.replace(/\s+/g, '_')}_${reportType}_report_${new Date().toISOString().split('T')[0]}`;
  
  // Generate CSV header and content based on report type
  if (reportType === 'full' || reportType === 'comments') {
    csvContent = 'User,Review,Rating,Sentiment,Date,Response\n';
    
    filteredReviews.forEach(review => {
      // Escape quotes and commas in text fields
      const username = (review.username || 'Anonymous').replace(/"/g, '""');
      const reviewText = (review.review_text || '').replace(/"/g, '""');
      const adminResponse = (review.admin_response || '').replace(/"/g, '""');
      
      csvContent += `"${username}","${reviewText}",${review.rating},"${review.sentiment || 'neutral'}","${new Date(review.createdAt).toISOString().split('T')[0]}","${adminResponse}"\n`;
    });
  } 
  else if (reportType === 'sentiment') {
    // Calculate sentiment statistics
    const sentimentCounts = { positive: 0, neutral: 0, negative: 0 };
    
    filteredReviews.forEach(review => {
      if (review.sentiment) {
        sentimentCounts[review.sentiment] += 1;
      } else {
        sentimentCounts.neutral += 1;
      }
    });
    
    const totalReviews = filteredReviews.length || 1; // Avoid division by zero
    
    csvContent = 'Sentiment,Count,Percentage\n';
    csvContent += `"Positive",${sentimentCounts.positive},${Math.round((sentimentCounts.positive / totalReviews) * 100)}%\n`;
    csvContent += `"Neutral",${sentimentCounts.neutral},${Math.round((sentimentCounts.neutral / totalReviews) * 100)}%\n`;
    csvContent += `"Negative",${sentimentCounts.negative},${Math.round((sentimentCounts.negative / totalReviews) * 100)}%\n`;
  }
  else if (reportType === 'ratings') {
    // Calculate rating statistics
    const ratingCounts = { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0 };
    
    filteredReviews.forEach(review => {
      if (review.rating >= 1 && review.rating <= 5) {
        ratingCounts[review.rating.toString()] += 1;
      }
    });
    
    csvContent = 'Rating,Count\n';
    csvContent += `"1 Star",${ratingCounts['1']}\n`;
    csvContent += `"2 Stars",${ratingCounts['2']}\n`;
    csvContent += `"3 Stars",${ratingCounts['3']}\n`;
    csvContent += `"4 Stars",${ratingCounts['4']}\n`;
    csvContent += `"5 Stars",${ratingCounts['5']}\n`;
  }
  
  // Handle different export formats
  if (format === 'csv') {
    // Create a blob with the CSV content
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    
    // Create download link and trigger click
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    
    link.setAttribute('href', url);
    link.setAttribute('download', `${filename}.csv`);
    link.style.visibility = 'hidden';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  } 
  else if (format === 'json') {
    // Create JSON data based on report type
    let jsonData;
    
    if (reportType === 'full' || reportType === 'comments') {
      jsonData = filteredReviews.map(review => ({
        username: review.username || 'Anonymous',
        review_text: review.review_text || '',
        rating: review.rating,
        sentiment: review.sentiment || 'neutral',
        date: new Date(review.createdAt).toISOString().split('T')[0],
        admin_response: review.admin_response || ''
      }));
    } 
    else if (reportType === 'sentiment') {
      const sentimentCounts = { positive: 0, neutral: 0, negative: 0 };
      
      filteredReviews.forEach(review => {
        if (review.sentiment) {
          sentimentCounts[review.sentiment] += 1;
        } else {
          sentimentCounts.neutral += 1;
        }
      });
      
      const totalReviews = filteredReviews.length || 1;
      
      jsonData = [
        { sentiment: 'Positive', count: sentimentCounts.positive, percentage: Math.round((sentimentCounts.positive / totalReviews) * 100) },
        { sentiment: 'Neutral', count: sentimentCounts.neutral, percentage: Math.round((sentimentCounts.neutral / totalReviews) * 100) },
        { sentiment: 'Negative', count: sentimentCounts.negative, percentage: Math.round((sentimentCounts.negative / totalReviews) * 100) }
      ];
    }
    else if (reportType === 'ratings') {
      const ratingCounts = { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0 };
      
      filteredReviews.forEach(review => {
        if (review.rating >= 1 && review.rating <= 5) {
          ratingCounts[review.rating.toString()] += 1;
        }
      });
      
      jsonData = [
        { rating: '1 Star', count: ratingCounts['1'] },
        { rating: '2 Stars', count: ratingCounts['2'] },
        { rating: '3 Stars', count: ratingCounts['3'] },
        { rating: '4 Stars', count: ratingCounts['4'] },
        { rating: '5 Stars', count: ratingCounts['5'] }
      ];
    }
    
    // Create a blob with the JSON content
    const blob = new Blob([JSON.stringify(jsonData, null, 2)], { type: 'application/json' });
    
    // Create download link and trigger click
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    
    link.setAttribute('href', url);
    link.setAttribute('download', `${filename}.json`);
    link.style.visibility = 'hidden';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
  else {
    alert(`Export to ${format} format is not currently supported.`);
  }
};

  // Render overview tab
  const renderOverviewTab = () => {
    if (!selectedEvent) return null;

    // Prepare chart data for sentiment trend
    const sentimentChartData = {
      labels: sentimentTrend.map(item => item.date),
      datasets: [
        {
          label: 'Sentiment Score',
          data: sentimentTrend.map(item => item.score),
          borderColor: colors.primary,
          backgroundColor: `rgba(255, 90, 142, 0.1)`,
          tension: 0.4,
          fill: true
        }
      ]
    };

    // Prepare chart data for review volume
    const volumeChartData = {
      labels: reviewVolume.map(item => item.date),
      datasets: [
        {
          label: 'Review Count',
          data: reviewVolume.map(item => item.count),
          backgroundColor: colors.accent,
          borderRadius: 4
        }
      ]
    };

    // Chart options
    const lineOptions = {
      responsive: true,
      plugins: {
        legend: { display: false },
        tooltip: { mode: 'index', intersect: false }
      },
      scales: {
        y: {
          min: 0,
          max: 100,
          ticks: { stepSize: 20 }
        }
      }
    };

    const barOptions = {
      responsive: true,
      plugins: {
        legend: { display: false },
        tooltip: { mode: 'index', intersect: false }
      },
      scales: {
        y: { beginAtZero: true }
      }
    };

    return (
      <div className="tab-pane fade show active">
        <h4 className="mb-4" style={{ color: colors.secondary }}>
          Overview Dashboard for {selectedEvent.title}
        </h4>
        
        {/* Key Metrics Cards */}
        <div className="row g-3 mb-4">
          <div className="col-md-3 col-sm-6">
            <div className="p-3 rounded text-center h-100 shadow-sm" 
                 style={{ backgroundColor: `rgba(255, 90, 142, 0.1)` }}>
              <div style={{ color: colors.primary, fontSize: '2rem', fontWeight: '700' }}>
                {selectedEvent.avgRating}
              </div>
              <div style={{ color: colors.secondary, fontSize: '0.9rem', fontWeight: '500' }}>
                Overall Rating
              </div>
              <div style={{ color: colors.primary }} aria-hidden="true">
                {"★".repeat(Math.round(selectedEvent.avgRating || 0))}
              </div>
            </div>
          </div>
          
          <div className="col-md-3 col-sm-6">
            <div className="p-3 rounded text-center h-100 shadow-sm" 
                 style={{ backgroundColor: `rgba(13, 27, 64, 0.1)` }}>
              <div style={{ color: colors.secondary, fontSize: '2rem', fontWeight: '700' }}>
                {selectedEvent.reviewCount}
              </div>
              <div style={{ color: colors.secondary, fontSize: '0.9rem', fontWeight: '500' }}>
                Total Reviews
              </div>
            </div>
          </div>
          
          <div className="col-md-3 col-sm-6">
            <div className="p-3 rounded text-center h-100 shadow-sm" 
                 style={{ backgroundColor: `rgba(65, 201, 226, 0.1)` }}>
              <div style={{ color: colors.accent, fontSize: '2rem', fontWeight: '700' }}>
                {selectedEvent.sentimentScore}%
              </div>
              <div style={{ color: colors.secondary, fontSize: '0.9rem', fontWeight: '500' }}>
                Positive Sentiment
              </div>
            </div>
          </div>
          
          <div className="col-md-3 col-sm-6">
            <div className="p-3 rounded text-center h-100 shadow-sm" 
                 style={{ backgroundColor: 'rgba(255, 158, 109, 0.1)' }}>
              <div style={{ color: '#FF9E6D', fontSize: '2rem', fontWeight: '700' }}>
                {selectedEvent.attendanceTotal?.toLocaleString() || 0}
              </div>
              <div style={{ color: colors.secondary, fontSize: '0.9rem', fontWeight: '500' }}>
                Total Attendance
              </div>
            </div>
          </div>
        </div>
        
        {/* Time Range Selector */}
        <div className="d-flex justify-content-end mb-3">
          <div className="btn-group">
            <button 
              className={`btn btn-sm ${timeRange === 'week' ? 'btn-primary' : 'btn-outline-primary'}`}
              onClick={() => handleTimeRangeChange('week')}
              style={{ 
                backgroundColor: timeRange === 'week' ? colors.primary : 'white',
                borderColor: colors.primary,
                color: timeRange === 'week' ? 'white' : colors.primary
              }}
            >
              Week
            </button>
            <button 
              className={`btn btn-sm ${timeRange === 'month' ? 'btn-primary' : 'btn-outline-primary'}`}
              onClick={() => handleTimeRangeChange('month')}
              style={{ 
                backgroundColor: timeRange === 'month' ? colors.primary : 'white',
                borderColor: colors.primary,
                color: timeRange === 'month' ? 'white' : colors.primary
              }}
            >
              Month
            </button>
            <button 
              className={`btn btn-sm ${timeRange === 'quarter' ? 'btn-primary' : 'btn-outline-primary'}`}
              onClick={() => handleTimeRangeChange('quarter')}
              style={{ 
                backgroundColor: timeRange === 'quarter' ? colors.primary : 'white',
                borderColor: colors.primary,
                color: timeRange === 'quarter' ? 'white' : colors.primary
              }}
            >
              Quarter
            </button>
          </div>
        </div>
        
        {/* Charts Row */}
        <div className="row mb-4">
          <div className="col-md-6">
            <div className="card shadow-sm h-100">
              <div className="card-header" style={{ backgroundColor: colors.light }}>
                <h5 className="card-title mb-0" style={{ color: colors.secondary }}>Sentiment Trend</h5>
              </div>
              <div className="card-body">
                <Line data={sentimentChartData} options={lineOptions} />
              </div>
            </div>
          </div>
          <div className="col-md-6">
            <div className="card shadow-sm h-100">
              <div className="card-header" style={{ backgroundColor: colors.light }}>
                <h5 className="card-title mb-0" style={{ color: colors.secondary }}>Review Volume</h5>
              </div>
              <div className="card-body">
                <Bar data={volumeChartData} options={barOptions} />
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Render reviews tab
  const renderReviewsTab = () => {
    if (!selectedEvent) return null;

    return (
      <div className="tab-pane fade show active">
        <div className="d-flex justify-content-between align-items-center mb-4">
          <h4 style={{ color: colors.secondary }}>
            Reviews for {selectedEvent.title}
          </h4>
          <button 
            className="btn btn-sm"
            style={{ backgroundColor: colors.primary, color: 'white' }}
            onClick={() => {
              // Auto-respond to all unresponded reviews
              eventReviews.forEach(review => {
                if (!review.admin_response) {
                  handleAdminResponse(review.id);
                }
              });
            }}
          >
            Auto-respond to All
          </button>
        </div>
        
        <div className="card shadow-sm">
          <div className="card-body p-0">
            <div className="table-responsive">
              <table className="table table-hover mb-0">
                <thead style={{ backgroundColor: colors.light }}>
                  <tr>
                    <th style={{ color: colors.secondary }}>User</th>
                    <th style={{ color: colors.secondary }}>Review</th>
                    <th style={{ color: colors.secondary }}>Rating</th>
                    <th style={{ color: colors.secondary }}>Sentiment</th>
                    <th style={{ color: colors.secondary }}>Date</th>
                    <th style={{ color: colors.secondary }}>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {eventReviews.length > 0 ? (
                    eventReviews.map((review) => (
                      <tr key={review.id}>
                        <td>
                          <div className="d-flex align-items-center">
                            <div 
                              className="rounded-circle me-2 d-flex align-items-center justify-content-center"
                              style={{ 
                                width: '30px', 
                                height: '30px', 
                                backgroundColor: colors.primary, 
                                color: 'white' 
                              }}
                            >
                              {review.username?.charAt(0).toUpperCase() || 'A'}
                            </div>
                            <span>{review.username || 'Anonymous'}</span>
                          </div>
                        </td>
                        <td style={{ maxWidth: '300px' }}>
                          <div style={{ fontSize: '0.9rem', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>
                            {review.review_text}
                          </div>
                          {review.admin_response && (
                            <span className="badge bg-success ms-2" style={{ fontSize: '0.7rem' }}>
                              Responded
                            </span>
                          )}
                        </td>
                        <td>
                          <span style={{ color: colors.primary }}>
                            {review.rating} {"★".repeat(review.rating)}
                          </span>
                        </td>
                        <td>
                          <span 
                            className={`badge ${
                              review.sentiment === 'positive' 
                                ? 'bg-success' 
                                : review.sentiment === 'negative' 
                                  ? 'bg-danger' 
                                  : 'bg-secondary'
                            }`}
                          >
                            {review.sentiment || 'neutral'}
                          </span>
                        </td>
                        <td>{new Date(review.createdAt).toLocaleDateString()}</td>
                        <td>
                          <div className="btn-group">
                            <button 
                              className="btn btn-sm"
                              style={{ 
                                backgroundColor: review.admin_response ? '#6c757d' : colors.accent, 
                                color: 'white'
                              }}
                              onClick={() => handleAdminResponse(review.id)}
                              disabled={!!review.admin_response}
                            >
                              {review.admin_response ? 'Responded' : 'AI Response'}
                            </button>
                            <button 
                              className="btn btn-sm btn-outline-secondary"
                              onClick={() => alert(`View details for review #${review.id}`)}
                            >
                              View
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan="6" className="text-center py-4">
                        <p style={{ color: colors.secondary }}>No reviews found for this event.</p>
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Render reports tab
  const renderReportsTab = () => {
    if (!selectedEvent) return null;

    // Calculate sentiment distribution from reviews
    const sentimentCounts = { positive: 0, neutral: 0, negative: 0 };
    const ratingCounts = { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0 };
    
    eventReviews.forEach(review => {
      // Count sentiments
      if (review.sentiment) {
        sentimentCounts[review.sentiment] += 1;
      } else {
        sentimentCounts.neutral += 1;
      }
      
      // Count ratings
      if (review.rating >= 1 && review.rating <= 5) {
        ratingCounts[review.rating.toString()] += 1;
      }
    });
    
    // Calculate percentages
    const totalReviews = eventReviews.length || 1; // Avoid division by zero
    const sentimentData = {
      labels: ['Positive', 'Neutral', 'Negative'],
      datasets: [{
        data: [
          Math.round((sentimentCounts.positive / totalReviews) * 100),
          Math.round((sentimentCounts.neutral / totalReviews) * 100),
          Math.round((sentimentCounts.negative / totalReviews) * 100)
        ],
        backgroundColor: [colors.chart[0], colors.chart[2], colors.chart[4]]
      }]
    };

    const ratingData = {
      labels: ['1 Star', '2 Stars', '3 Stars', '4 Stars', '5 Stars'],
      datasets: [{
        data: [
          ratingCounts['1'],
          ratingCounts['2'],
          ratingCounts['3'],
          ratingCounts['4'],
          ratingCounts['5']
        ],
        backgroundColor: colors.chart
      }]
    };

    // Chart options
    const pieOptions = {
      responsive: true,
      plugins: {
        legend: { position: 'right' }
      }
    };

    const barOptions = {
      responsive: true,
      plugins: {
        legend: { display: false }
      },
      scales: {
        y: { beginAtZero: true }
      }
    };

    return (
      <div className="tab-pane fade show active">
        <h4 className="mb-4" style={{ color: colors.secondary }}>
          Analytics Reports for {selectedEvent.title}
        </h4>
        
        {/* Charts Row */}
        <div className="row mb-4">
          <div className="col-md-6">
            <div className="card shadow-sm h-100">
              <div className="card-header" style={{ backgroundColor: colors.light }}>
                <h5 className="card-title mb-0" style={{ color: colors.secondary }}>Sentiment Distribution</h5>
              </div>
              <div className="card-body">
                <Pie data={sentimentData} options={pieOptions} />
              </div>
            </div>
          </div>
          <div className="col-md-6">
            <div className="card shadow-sm h-100">
              <div className="card-header" style={{ backgroundColor: colors.light }}>
                <h5 className="card-title mb-0" style={{ color: colors.secondary }}>Rating Distribution</h5>
              </div>
              <div className="card-body">
                <Bar data={ratingData} options={barOptions} />
              </div>
            </div>
          </div>
        </div>
        
        {/* Export Options */}
        <div className="card shadow-sm">
          <div className="card-header" style={{ backgroundColor: colors.light }}>
            <h5 className="card-title mb-0" style={{ color: colors.secondary }}>Export Reports</h5>
          </div>
          <div className="card-body">
            <div className="row">
              <div className="col-md-6">
                <div className="mb-3">
                  <label className="form-label">Report Type</label>
                  <select className="form-select" defaultValue="full">
                    <option value="full">Complete Analytics Report</option>
                    <option value="sentiment">Sentiment Analysis</option>
                    <option value="ratings">Ratings Distribution</option>
                    <option value="comments">Review Comments</option>
                  </select>
                </div>
              </div>
              <div className="col-md-6">
                <div className="mb-3">
                  <label className="form-label">Format</label>
                  <select className="form-select" id="exportFormat" defaultValue="csv">
                    <option value="csv">CSV File</option>
                    <option value="json">JSON Data</option>
                    <option value="pdf" disabled>PDF Document (Coming Soon)</option>
                    <option value="excel" disabled>Excel Spreadsheet (Coming Soon)</option>
                  </select>
                </div>
              </div>
            </div>
            <div className="mb-3">
              <label className="form-label">Date Range</label>
              <div className="row">
                <div className="col-md-6">
                  <input 
                    type="date" 
                    className="form-control" 
                    placeholder="Start Date" 
                    value={reportDate.startDate}
                    onChange={(e) => setReportDate({...reportDate, startDate: e.target.value})}
                  />
                </div>
                <div className="col-md-6">
                  <input 
                    type="date" 
                    className="form-control" 
                    placeholder="End Date" 
                    value={reportDate.endDate}
                    onChange={(e) => setReportDate({...reportDate, endDate: e.target.value})}
                  />
                </div>
              </div>
            </div>
            <div className="d-flex">
              <button 
                className="btn me-2"
                style={{ backgroundColor: colors.primary, color: 'white' }}
                onClick={() => exportReport(document.getElementById('exportFormat').value)}
              >
                Generate Report
              </button>
              <button 
                className="btn btn-outline-secondary"
                onClick={() => alert("Weekly report scheduling feature coming soon!")}
              >
                Schedule Weekly Reports
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Main render function
  if (loading) {
    return (
      <div className="container-fluid py-4">
        <LoadingSpinner />
      </div>
    );
  }

  if (error) {
    return <ErrorAlert message={error} />;
  }

  // Updated background and header styles
const backgroundStyle = {
  background: `linear-gradient(135deg, 
    ${colors.light} 0%, 
    ${colors.accent}10 50%, 
    ${colors.primary}10 100%)`,
  minHeight: '100vh',
  paddingTop: '2rem',
  paddingBottom: '2rem'
};

  return (
    <div style={backgroundStyle} className="container-fluid">
    <div className="container">
      <div className="row mb-5">
        <div className="col-12 text-center">
          <h1 
            style={{ 
              color: colors.secondary, 
              fontWeight: '700',
              fontSize: '2.5rem',
              marginBottom: '0.5rem',
              letterSpacing: '-0.5px',
              textShadow: '1px 1px 2px rgba(13, 27, 64, 0.05)'
            }}
          >
            Analytics Dashboard
          </h1>
          <p 
            className="lead text-muted"
            style={{
              fontWeight: '300',
              color: `${colors.textLight}`,
              letterSpacing: '0.5px',
              maxWidth: '600px',
              margin: '0 auto'
            }}
          >
            Transforming event feedback into actionable insights
          </p>
        </div>
      </div>
      </div>

      <div className="row">
        <div className="col-md-3">
          <div className="card shadow-sm">
            <div className="card-header" style={{ backgroundColor: colors.light }}>
              <h5 className="card-title mb-0" style={{ color: colors.secondary }}>Events</h5>
            </div>
            <div className="card-body p-0">
              <div className="list-group list-group-flush">
                {events.length > 0 ? (
                  events.map((event) => (
                    <button
                      key={event.id}
                      className={`list-group-item list-group-item-action d-flex justify-content-between align-items-center ${
                        selectedEvent && selectedEvent.id === event.id ? 'active' : ''
                      }`}
                      style={{
                        backgroundColor: selectedEvent && selectedEvent.id === event.id ? colors.primary : 'white',
                        color: selectedEvent && selectedEvent.id === event.id ? 'white' : colors.text
                      }}
                      onClick={() => selectEvent(event)}
                    >
                      <div>
                        <div style={{ fontWeight: '500' }}>{event.title}</div>
                        <small style={{ opacity: 0.8 }}>{new Date(event.date).toLocaleDateString()}</small>
                      </div>
                      <span 
                        className={`badge rounded-pill ${selectedEvent && selectedEvent.id === event.id ? 'bg-white text-primary' : 'bg-primary text-white'}`}
                      >
                        {event.reviewCount}
                      </span>
                    </button>
                  ))
                ) : (
                  <div className="text-center py-4">
                    <p className="text-muted mb-0">No events available</p>
                  </div>
                )}
              </div>
            </div>
            <div className="card-footer" style={{ backgroundColor: colors.light }}>
              <button 
                className="btn btn-sm"
                style={{ backgroundColor: colors.primary, color: 'white' }}
                onClick={() => navigate('/create_event')}
              >
                <i className="bi bi-plus-circle me-1"></i> Add Event
              </button>
            </div>
          </div>
        </div>

        <div className="col-md-9">
          {selectedEvent ? (
            <div className="card shadow-sm">
              <div className="card-header" style={{ backgroundColor: colors.light }}>
                <ul className="nav nav-tabs card-header-tabs">
                  <li className="nav-item">
                    <button
                      className={`nav-link ${activeTab === 'overview' ? 'active' : ''}`}
                      style={{
                        color: activeTab === 'overview' ? colors.primary : colors.textLight,
                        fontWeight: activeTab === 'overview' ? '500' : '400'
                      }}
                      onClick={() => handleTabChange('overview')}
                    >
                      Overview
                    </button>
                  </li>
                  <li className="nav-item">
                    <button
                      className={`nav-link ${activeTab === 'reviews' ? 'active' : ''}`}
                      style={{
                        color: activeTab === 'reviews' ? colors.primary : colors.textLight,
                        fontWeight: activeTab === 'reviews' ? '500' : '400'
                      }}
                      onClick={() => handleTabChange('reviews')}
                    >
                      Reviews
                    </button>
                  </li>
                  <li className="nav-item">
                    <button
                      className={`nav-link ${activeTab === 'reports' ? 'active' : ''}`}
                      style={{
                        color: activeTab === 'reports' ? colors.primary : colors.textLight,
                        fontWeight: activeTab === 'reports' ? '500' : '400'
                      }}
                      onClick={() => handleTabChange('reports')}
                    >
                      Reports
                    </button>
                  </li>
                </ul>
              </div>
              <div className="card-body">
                {activeTab === 'overview' && renderOverviewTab()}
                {activeTab === 'reviews' && renderReviewsTab()}
                {activeTab === 'reports' && renderReportsTab()}
              </div>
            </div>
          ) : (
            <div className="card shadow-sm">
              <div className="card-body text-center py-5">
                <p className="text-muted mb-4">Select an event to view analytics</p>
                <button 
                  className="btn"
                  style={{ backgroundColor: colors.primary, color: 'white' }}
                  onClick={() => navigate('/create-event')}
                >
                  <i className="bi bi-plus-circle me-1"></i> Add Your First Event
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default AdminAIReviewsDashboard;
</file>

<file path="client/src/pages/EditEvent.js">
import React, { useState, useEffect, useContext } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { AuthContext } from '../helpers/AuthContext';
import { FaCalendarAlt, FaImage, FaMapMarkerAlt, FaArrowLeft, 
         FaSave, FaTimes, FaInfoCircle, FaCheck,
         FaHeart, FaClock, FaTags, FaEdit, FaDollarSign,
         FaTicketAlt, FaCalendarCheck, FaUsers, FaUserPlus } from 'react-icons/fa';

function EditEvent() {
  const { id } = useParams();
  const navigate = useNavigate();
  const { authState } = useContext(AuthContext);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [successMsg, setSuccessMsg] = useState('');

  // Form state
  const [title, setTitle] = useState('');
  const [location, setLocation] = useState('');
  const [description, setDescription] = useState('');
  const [date, setDate] = useState('');
  const [time, setTime] = useState('');
  const [category, setCategory] = useState('');
  const [imageFile, setImageFile] = useState(null);
  const [imagePreview, setImagePreview] = useState('');
  const [currentImage, setCurrentImage] = useState('');
  
  // New fields for paid events
  const [isPaid, setIsPaid] = useState(false);
  const [price, setPrice] = useState(0);
  const [ticketsAvailable, setTicketsAvailable] = useState(100);
  const [registrationDeadline, setRegistrationDeadline] = useState('');
  const [maxRegistrations, setMaxRegistrations] = useState('');
  const [minRegistrations, setMinRegistrations] = useState(1);
  const [status, setStatus] = useState('active');

  // Options for category dropdown
  const categoryOptions = [
    'Conference', 'Workshop', 'Seminar', 'Networking', 
    'Social Gathering', 'Corporate Event', 'Trade Show', 
    'Charity', 'Festival', 'Concert', 'Sports', 'Other'
  ];
  
  // Options for status dropdown
  const statusOptions = [
    'active', 'cancelled', 'completed', 'draft'
  ];

  // Custom color constants
  const colors = {
    navy: "#001F3F",
    coral: "#FF6B6B",
    white: "#FFFFFF",
    lightGray: "#F5F7FA",
    gray: "#E2E8F0",
    darkGray: "#718096",
    errorRed: "#FF4D6A",
    successGreen: "#2DD4BF"
  };

  useEffect(() => {
    // Check authentication
    if (!authState.status || !authState.isAdmin) {
      navigate("/login");
      return;
    }

    const fetchEventData = async () => {
      setLoading(true);
      try {
        const response = await axios.get(`http://localhost:3001/events/${id}`);
        const eventData = response.data.event;
        
        if (!eventData) {
          setError('Event not found');
          return;
        }

        // Set form fields with existing data
        setTitle(eventData.title);
        setLocation(eventData.location);
        setDescription(eventData.description);
        setDate(formatDateForInput(eventData.date));
        setTime(eventData.time);
        setCategory(eventData.category);
        
        // Set fields for paid events
        setIsPaid(eventData.isPaid || false);
        setPrice(eventData.price || 0);
        setTicketsAvailable(eventData.ticketsAvailable || 100);
        
        if (eventData.registrationDeadline) {
          setRegistrationDeadline(formatDateForInput(eventData.registrationDeadline));
        }
        
        setMaxRegistrations(eventData.maxRegistrations || '');
        setMinRegistrations(eventData.minRegistrations || 1);
        setStatus(eventData.status || 'active');
        
        if (eventData.image) {
          setCurrentImage(getImageUrl(eventData.image));
        }
        
      } catch (err) {
        console.error('Error fetching event:', err);
        setError('Failed to load event data. Please try again.');
      } finally {
        setLoading(false);
      }
    };

    fetchEventData();
  }, [id, authState, navigate]);

  // Format date for input field (YYYY-MM-DD)
  const formatDateForInput = (dateString) => {
    const date = new Date(dateString);
    return date.toISOString().split('T')[0];
  };

  // Function to correct the image path
  const getImageUrl = (imagePath) => {
    if (!imagePath) return null;
    
    if (imagePath.startsWith('http')) return imagePath;
    
    if (imagePath.startsWith('/uploads/events/')) {
      return `http://localhost:3001${imagePath}`;
    }
    
    return `http://localhost:3001/${imagePath}`;
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImageFile(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const validateForm = () => {
    if (!title.trim()) return 'Title is required';
    if (!location.trim()) return 'Location is required';
    if (!description.trim()) return 'Description is required';
    if (!date) return 'Date is required';
    if (!time) return 'Time is required';
    if (!category) return 'Category is required';
    if (!status) return 'Status is required';
    if (isPaid && (price <= 0)) return 'Price must be greater than 0 for paid events';
    if (ticketsAvailable < 1) return 'Tickets available must be at least 1';
    if (minRegistrations < 1) return 'Minimum registrations must be at least 1';
    if (maxRegistrations && maxRegistrations < minRegistrations) {
      return 'Maximum registrations cannot be less than minimum registrations';
    }
    return null;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validate form
    const validationError = validateForm();
    if (validationError) {
      setError(validationError);
      return;
    }

    setError('');
    setSuccessMsg('');
    setLoading(true);

    try {
      const accessToken = localStorage.getItem('accessToken');
      
      if (!accessToken) {
        setError('Authorization required. Please log in again.');
        setLoading(false);
        return;
      }

      // Create form data for file upload
      const formData = new FormData();
      formData.append('title', title);
      formData.append('location', location);
      formData.append('description', description);
      formData.append('date', date);
      formData.append('time', time);
      formData.append('category', category);
      formData.append('status', status);
      
      // Add fields for paid events
      formData.append('isPaid', isPaid);
      formData.append('price', isPaid ? price : 0);
      formData.append('ticketsAvailable', ticketsAvailable);
      
      if (registrationDeadline) {
        formData.append('registrationDeadline', registrationDeadline);
      }
      
      if (maxRegistrations) {
        formData.append('maxRegistrations', maxRegistrations);
      }
      
      formData.append('minRegistrations', minRegistrations);
      
      if (imageFile) {
        formData.append('image', imageFile);
      }

      // Update event with form data
      await axios.put(`http://localhost:3001/events/${id}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          Authorization: `Bearer ${accessToken}`
        }
      });

      setSuccessMsg('Event updated successfully!');
      
      // Scroll to top to show success message
      window.scrollTo(0, 0);
      
      // Navigate back to event page after a short delay
      setTimeout(() => {
        navigate(`/event/${id}`);
      }, 2000);
      
    } catch (err) {
      console.error('Error updating event:', err);
      const errorMessage = err.response?.data?.error || 'Failed to update event. Please try again.';
      setError(errorMessage);
      window.scrollTo(0, 0);
    } finally {
      setLoading(false);
    }
  };

  const cancelEdit = () => {
    navigate(`/event/${id}`);
  };
  
  // Footer component
  const Footer = () => {
    const currentYear = new Date().getFullYear();
    
    return (
      <footer style={{ 
        backgroundColor: colors.navy, 
        color: colors.white, 
        padding: "1.5rem", 
        textAlign: "center", 
        width: "100%", 
        boxShadow: "0 -5px 10px rgba(0,0,0,0.05)" 
      }}>
        <div style={{ 
          display: "flex", 
          flexDirection: "column", 
          alignItems: "center", 
          justifyContent: "center", 
          maxWidth: "800px", 
          margin: "0 auto" 
        }}>
          <p style={{ 
            margin: "0.5rem 0", 
            fontWeight: "600", 
            fontSize: "1rem" 
          }}>
            <FaHeart style={{ color: colors.coral, marginRight: "0.5rem" }} /> EventHub Community
          </p>
          <p style={{ margin: "0.5rem 0", fontSize: "0.9rem", color: colors.lightGray }}>
            Connect with event organizers and attendees from around the world
          </p>
          <p style={{ margin: "0.5rem 0", fontSize: "0.9rem", color: colors.lightGray }}>
            <button 
              onClick={() => navigate("/terms")} 
              style={{
                color: colors.coral, 
                textDecoration: "none", 
                fontWeight: "500", 
                transition: "color 0.3s ease",
                background: "none", 
                border: "none", 
                cursor: "pointer", 
                padding: 0
              }}
            >
              Terms
            </button> •
            <button 
              onClick={() => navigate("/privacy")} 
              style={{
                color: colors.coral, 
                textDecoration: "none", 
                fontWeight: "500", 
                transition: "color 0.3s ease",
                background: "none", 
                border: "none", 
                cursor: "pointer", 
                margin: "0 0.5rem", 
                padding: 0
              }}
            >
              Privacy
            </button> •
            <button 
              onClick={() => navigate("/support")} 
              style={{
                color: colors.coral, 
                textDecoration: "none", 
                fontWeight: "500", 
                transition: "color 0.3s ease",
                background: "none", 
                border: "none", 
                cursor: "pointer", 
                padding: 0
              }}
            >
              Support
            </button>
          </p>
          <p style={{ marginTop: "0.5rem", fontSize: "0.8rem", color: colors.lightGray }}>
            © {currentYear} EventHub. All rights reserved.
          </p>
        </div>
      </footer>
    );
  };

  if (loading && !title) {
    return (
      <div className="container d-flex justify-content-center align-items-center" style={{ minHeight: "60vh", paddingTop: "70px" }}>
        <div className="spinner-border" role="status" style={{ color: colors.coral }}>
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  return (
    <div style={{ display: "flex", flexDirection: "column", minHeight: "100vh" }}>
      <div className="container my-5">
        <div className="d-flex justify-content-between align-items-center mb-4">
          <h2 style={{ color: colors.navy }}>
            <FaEdit className="me-2" style={{ color: colors.coral }} />
            Edit Event
          </h2>
          <button 
            className="btn"
            onClick={cancelEdit}
            style={{ 
              backgroundColor: "transparent", 
              borderColor: colors.navy,
              color: colors.navy
            }}
          >
            <FaArrowLeft className="me-2" />
            Back to Event
          </button>
        </div>

        {error && (
          <div className="alert alert-danger d-flex align-items-center" role="alert">
            <FaInfoCircle className="me-2" />
            {error}
          </div>
        )}

        {successMsg && (
          <div className="alert alert-success d-flex align-items-center" role="alert">
            <FaCheck className="me-2" />
            {successMsg}
          </div>
        )}
        
        <div className="card shadow-sm mb-4">
          <div className="card-header" style={{ backgroundColor: colors.navy, color: "white" }}>
            <div className="d-flex align-items-center">
              <FaCalendarAlt className="me-2" style={{ color: colors.coral }} />
              <span>Event Information</span>
            </div>
          </div>
          <div className="card-body">
            <form onSubmit={handleSubmit}>
              {/* Title */}
              <div className="mb-3">
                <label htmlFor="title" className="form-label" style={{ color: colors.navy, fontWeight: "500" }}>
                  Event Title*
                </label>
                <input
                  type="text"
                  className="form-control"
                  id="title"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  required
                  style={{ borderColor: colors.gray }}
                />
              </div>
              
              {/* Location */}
              <div className="mb-3">
                <label htmlFor="location" className="form-label" style={{ color: colors.navy, fontWeight: "500" }}>
                  <FaMapMarkerAlt className="me-2" style={{ color: colors.coral }} />
                  Location*
                </label>
                <input
                  type="text"
                  className="form-control"
                  id="location"
                  value={location}
                  onChange={(e) => setLocation(e.target.value)}
                  required
                  style={{ borderColor: colors.gray }}
                />
              </div>
              
              {/* Date and Time */}
              <div className="row mb-3">
                <div className="col-md-6 mb-3 mb-md-0">
                  <label htmlFor="date" className="form-label" style={{ color: colors.navy, fontWeight: "500" }}>
                    <FaCalendarAlt className="me-2" style={{ color: colors.coral }} />
                    Date*
                  </label>
                  <input
                    type="date"
                    className="form-control"
                    id="date"
                    value={date}
                    onChange={(e) => setDate(e.target.value)}
                    required
                    style={{ borderColor: colors.gray }}
                  />
                </div>
                <div className="col-md-6">
                  <label htmlFor="time" className="form-label" style={{ color: colors.navy, fontWeight: "500" }}>
                    <FaClock className="me-2" style={{ color: colors.coral }} />
                    Time*
                  </label>
                  <input
                    type="time"
                    className="form-control"
                    id="time"
                    value={time}
                    onChange={(e) => setTime(e.target.value)}
                    required
                    style={{ borderColor: colors.gray }}
                  />
                </div>
              </div>
              
              {/* Category */}
              <div className="mb-3">
                <label htmlFor="category" className="form-label" style={{ color: colors.navy, fontWeight: "500" }}>
                  <FaTags className="me-2" style={{ color: colors.coral }} />
                  Category*
                </label>
                <select
                  className="form-select"
                  id="category"
                  value={category}
                  onChange={(e) => setCategory(e.target.value)}
                  required
                  style={{ borderColor: colors.gray }}
                >
                  <option value="">Select a category</option>
                  {categoryOptions.map((cat) => (
                    <option key={cat} value={cat}>
                      {cat}
                    </option>
                  ))}
                </select>
              </div>
              
              {/* Status */}
              <div className="mb-3">
                <label htmlFor="status" className="form-label" style={{ color: colors.navy, fontWeight: "500" }}>
                  <FaCalendarCheck className="me-2" style={{ color: colors.coral }} />
                  Status*
                </label>
                <select
                  className="form-select"
                  id="status"
                  value={status}
                  onChange={(e) => setStatus(e.target.value)}
                  required
                  style={{ borderColor: colors.gray }}
                >
                  {statusOptions.map((statusOption) => (
                    <option key={statusOption} value={statusOption}>
                      {statusOption.charAt(0).toUpperCase() + statusOption.slice(1)}
                    </option>
                  ))}
                </select>
              </div>
              
              {/* Description */}
              <div className="mb-3">
                <label htmlFor="description" className="form-label" style={{ color: colors.navy, fontWeight: "500" }}>
                  Description*
                </label>
                <textarea
                  className="form-control"
                  id="description"
                  rows="4"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  required
                  style={{ borderColor: colors.gray }}
                />
              </div>
              
              {/* Paid Event Toggle */}
              <div className="mb-3">
                <div className="form-check">
                  <input
                    type="checkbox"
                    className="form-check-input"
                    id="isPaid"
                    checked={isPaid}
                    onChange={(e) => setIsPaid(e.target.checked)}
                    style={{ cursor: "pointer" }}
                  />
                  <label 
                    className="form-check-label" 
                    htmlFor="isPaid"
                    style={{ color: colors.navy, fontWeight: "500", cursor: "pointer" }}
                  >
                    <FaDollarSign className="me-2" style={{ color: colors.coral }} />
                    This is a paid event
                  </label>
                </div>
              </div>
              
              {/* Price - Show only if paid event is checked */}
              {isPaid && (
                <div className="mb-3">
                  <label htmlFor="price" className="form-label" style={{ color: colors.navy, fontWeight: "500" }}>
                    Price*
                  </label>
                  <div className="input-group">
                    <span className="input-group-text">$</span>
                    <input
                      type="number"
                      className="form-control"
                      id="price"
                      value={price}
                      onChange={(e) => setPrice(parseFloat(e.target.value) || 0)}
                      min="0.01"
                      step="0.01"
                      required={isPaid}
                      style={{ borderColor: colors.gray }}
                    />
                  </div>
                </div>
              )}
              
              {/* Ticket Information */}
              <div className="row mb-3">
                <div className="col-md-6 mb-3 mb-md-0">
                  <label htmlFor="ticketsAvailable" className="form-label" style={{ color: colors.navy, fontWeight: "500" }}>
                    <FaTicketAlt className="me-2" style={{ color: colors.coral }} />
                    Available Tickets*
                  </label>
                  <input
                    type="number"
                    className="form-control"
                    id="ticketsAvailable"
                    value={ticketsAvailable}
                    onChange={(e) => setTicketsAvailable(parseInt(e.target.value) || 0)}
                    min="1"
                    required
                    style={{ borderColor: colors.gray }}
                  />
                </div>
                <div className="col-md-6">
                  <label htmlFor="registrationDeadline" className="form-label" style={{ color: colors.navy, fontWeight: "500" }}>
                    <FaCalendarCheck className="me-2" style={{ color: colors.coral }} />
                    Registration Deadline
                  </label>
                  <input
                    type="date"
                    className="form-control"
                    id="registrationDeadline"
                    value={registrationDeadline}
                    onChange={(e) => setRegistrationDeadline(e.target.value)}
                    style={{ borderColor: colors.gray }}
                  />
                </div>
              </div>
              
              {/* Min and Max Registration */}
              <div className="row mb-3">
                <div className="col-md-6 mb-3 mb-md-0">
                  <label htmlFor="minRegistrations" className="form-label" style={{ color: colors.navy, fontWeight: "500" }}>
                    <FaUserPlus className="me-2" style={{ color: colors.coral }} />
                    Minimum Registrations*
                  </label>
                  <input
                    type="number"
                    className="form-control"
                    id="minRegistrations"
                    value={minRegistrations}
                    onChange={(e) => setMinRegistrations(parseInt(e.target.value) || 1)}
                    min="1"
                    required
                    style={{ borderColor: colors.gray }}
                  />
                </div>
                <div className="col-md-6">
                  <label htmlFor="maxRegistrations" className="form-label" style={{ color: colors.navy, fontWeight: "500" }}>
                    <FaUsers className="me-2" style={{ color: colors.coral }} />
                    Maximum Registrations
                  </label>
                  <input
                    type="number"
                    className="form-control"
                    id="maxRegistrations"
                    value={maxRegistrations}
                    onChange={(e) => setMaxRegistrations(e.target.value ? parseInt(e.target.value) : '')}
                    min={minRegistrations}
                    style={{ borderColor: colors.gray }}
                  />
                </div>
              </div>
              
              {/* Image Upload */}
              <div className="mb-4">
                <label htmlFor="image" className="form-label" style={{ color: colors.navy, fontWeight: "500" }}>
                  <FaImage className="me-2" style={{ color: colors.coral }} />
                  Event Image
                </label>
                <input
                  type="file"
                  className="form-control"
                  id="image"
                  accept="image/*"
                  onChange={handleImageChange}
                  style={{ borderColor: colors.gray }}
                />
                <div className="form-text" style={{ color: colors.darkGray }}>
                  Upload a new image to replace the current one, or leave empty to keep existing image.
                </div>
                
                {/* Image preview */}
                <div className="mt-3 d-flex gap-3 flex-wrap">
                  {currentImage && !imagePreview && (
                    <div>
                      <p className="mb-2" style={{ color: colors.navy }}>Current Image:</p>
                      <img 
                        src={currentImage} 
                        alt="Current event" 
                        className="img-thumbnail" 
                        style={{ maxHeight: "150px" }} 
                      />
                    </div>
                  )}
                  
                  {imagePreview && (
                    <div>
                      <p className="mb-2" style={{ color: colors.navy }}>New Image:</p>
                      <img 
                        src={imagePreview} 
                        alt="Preview" 
                        className="img-thumbnail" 
                        style={{ maxHeight: "150px" }} 
                      />
                    </div>
                  )}
                </div>
              </div>
              
              {/* Submit and Cancel buttons */}
              <div className="d-flex justify-content-end gap-3 mt-4">
                <button
                  type="button"
                  className="btn"
                  onClick={cancelEdit}
                  style={{ 
                    backgroundColor: colors.lightGray,
                    color: colors.navy
                  }}
                >
                  <FaTimes className="me-2" /> Cancel
                </button>
                <button
                  type="submit"
                  className="btn"
                  disabled={loading}
                  style={{ 
                    backgroundColor: colors.navy,
                    color: colors.white
                  }}
                >
                  {loading ? (
                    <>
                      <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                      Saving...
                    </>
                  ) : (
                    <>
                      <FaSave className="me-2" /> Save Changes
                    </>
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      {/* Footer */}
      <Footer />
    </div>
  );
}

export default EditEvent;
</file>

<file path="client/src/pages/Profile.js">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import "bootstrap/dist/css/bootstrap.min.css";
import { format } from "date-fns";

const Profile = () => {
  const [user, setUser] = useState(null);
  const [reviews, setReviews] = useState([]);
  const [adminEvents, setAdminEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState("me");
  const [editMode, setEditMode] = useState(false);
  const [aboutMeText, setAboutMeText] = useState("");
  const [newUsername, setNewUsername] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [notificationSettings, setNotificationSettings] = useState({
    emailNotifications: true,
    pushNotifications: false,
    eventReminders: true,
    reviewRequests: true,
  });
  const [privacySettings, setPrivacySettings] = useState({
    showProfile: true,
    showReviews: true,
    showEvents: true,
  });
  const [themeSettings, setThemeSettings] = useState({
    darkMode: false,
    fontSize: "medium",
  });
  const navigate = useNavigate();

  // Helper function to generate avatar initials
  const getInitials = (username) => {
    return username ? username.charAt(0).toUpperCase() : "U";
  };
  
  // Helper function to render star rating
  const renderStars = (rating) => {
    const stars = [];
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    
    for (let i = 0; i < fullStars; i++) {
      stars.push(<span key={`star-${i}`} style={styles.ratingStars}>★</span>);
    }
    
    if (hasHalfStar) {
      stars.push(<span key="half-star" style={styles.ratingStars}>✮</span>);
    }
    
    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
    for (let i = 0; i < emptyStars; i++) {
      stars.push(<span key={`empty-${i}`} style={{...styles.ratingStars, color: "#e0e0e0"}}>☆</span>);
    }
    
    return stars;
  };

  // Function to correct the image path - reusing from other components
  const getImageUrl = (imagePath) => {
    if (!imagePath) return null;
    
    // If the path already starts with http, return as is
    if (imagePath.startsWith('http')) return imagePath;
    
    // If the path begins with "/uploads/events/", remove the leading slash
    if (imagePath.startsWith('/uploads/events/')) {
      return `http://localhost:3001${imagePath}`;
    }
    
    // For any other case, just append the path to the base URL
    return `http://localhost:3001/${imagePath}`;
  };

  useEffect(() => {
    const fetchUserProfile = async () => {
      try {
        const token = localStorage.getItem("accessToken");
        if (!token) {
          throw new Error("Authentication token missing");
        }

        const response = await axios.get("http://localhost:3001/api/user/profile", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        setUser({
          id: response.data.id,
          username: response.data.username,
          isAdmin: response.data.isAdmin,
        });
        
        // Assuming the API returns enhanced review data with event information
        // If not, you would need to fetch events separately or modify your backend
        const enhancedReviews = response.data.reviews || [];
        setReviews(enhancedReviews.map(review => ({
          ...review,
          // Mock data for demonstration - replace with actual data from your API
          event: review.event || {
            id: review.eventId || Math.floor(Math.random() * 1000),
            name: review.eventName || `Event ${Math.floor(Math.random() * 100)}`,
            date: review.eventDate || new Date().toISOString().split('T')[0],
            location: review.eventLocation || "Virtual Event",
            category: review.eventCategory || "Conference"
          }
        })));
        
        setAboutMeText(response.data.aboutMe || "");
        setNewUsername(response.data.username || "");

        // If user is an admin, fetch their created events
        if (response.data.isAdmin) {
          fetchAdminEvents(token);
        }
        
        setLoading(false);
      } catch (err) {
        console.error("Error fetching profile:", err);
        let errorMessage = "An unexpected error occurred.";

        if (err.response) {
          if (err.response.status === 401 || err.response.status === 403) {
            errorMessage = "Your session has expired. Please log in again.";
            setTimeout(() => navigate("/login"), 2000);
          } else {
            errorMessage = `Error ${err.response.status}: ${err.response.data?.message || err.message}`;
          }
        } else if (err.message === "Authentication token missing") {
          errorMessage = "Please login.";
          setTimeout(() => navigate("/login"), 2000);
        } else {
          errorMessage = err.message;
        }

        setError(errorMessage);
        setLoading(false);
      }
    };

    // Fetch events created by the admin
    const fetchAdminEvents = async (token) => {
      try {
        // This endpoint should return events created by the current user
        // You may need to adjust based on your actual API
        const response = await axios.get("http://localhost:3001/events", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        // Assuming the API returns all events, filter for those created by the current user
        // Adjust based on your actual data structure
        const userEvents = response.data.filter(event => 
          event.username === user?.username || // Match by username
          event.userId === user?.id // Or match by user ID if available
        );
        
        setAdminEvents(userEvents);
      } catch (err) {
        console.error("Error fetching admin events:", err);
        // Continue silently - we'll just show empty events
      }
    };

    fetchUserProfile();
  }, [navigate, user?.id, user?.username]);

  const handleAboutMeChange = (e) => {
    setAboutMeText(e.target.value);
  };

  const handleUsernameChange = (e) => {
    setNewUsername(e.target.value);
  };

  const handlePasswordChange = (e) => {
    setNewPassword(e.target.value);
  };

  const handleSaveProfile = async () => {
    try {
      const token = localStorage.getItem("accessToken");
      if (!token) {
        throw new Error("Authentication token missing");
      }

      const profileData = {
        aboutMe: aboutMeText,
      };

      if (newUsername) {
        profileData.username = newUsername;
      }

      if (newPassword) {
        profileData.password = newPassword;
      }

      const response = await axios.put("http://localhost:3001/api/user/profile", profileData, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (response.status === 200) {
        setUser({ ...user, username: newUsername || user.username });
        setEditMode(false);
        setNewPassword("");
        alert("Profile updated successfully.");
      }
    } catch (err) {
      console.error("Error saving profile:", err);
      setError("An error occurred while saving your profile.");
    }
  };

  // Fetch event details for a specific review
  // const fetchEventForReview = async (review) => {
  //   if (!review.eventId) return null;
    
  //   try {
  //     const response = await axios.get(`http://localhost:3001/events/${review.eventId}`);
  //     return response.data;
  //   } catch (err) {
  //     console.error(`Error fetching event for review ${review.id}:`, err);
  //     return null;
  //   }
  // };

  const toggleNotificationSetting = (setting) => {
    setNotificationSettings({
      ...notificationSettings,
      [setting]: !notificationSettings[setting],
    });
  };

  const togglePrivacySetting = (setting) => {
    setPrivacySettings({
      ...privacySettings,
      [setting]: !privacySettings[setting],
    });
  };

  const handleThemeChange = (setting, value) => {
    setThemeSettings({
      ...themeSettings,
      [setting]: value,
    });
  };

  const saveSettings = () => {
    // Here you would typically make an API call to save the settings
    // For now just show a success message
    alert("Settings saved successfully!");
  };

  const navigateToEvent = (eventId) => {
    // Navigate to event details page
    navigate(`/event/${eventId}`);
  };

  const navigateToResponse = (eventId) => {
    // Navigate to admin response page for an event
    navigate(`/response/${eventId}`);
  };

  const formatDateString = (dateString) => {
    try {
      return format(new Date(dateString), "MMM dd, yyyy");
    } catch (error) {
      return dateString || "Unknown date";
    }
  };

  // Custom toggle switch component
  const ToggleSwitch = ({ isOn, onToggle }) => (
    <div style={styles.switchContainer}>
      <input
        type="checkbox"
        checked={isOn}
        onChange={onToggle}
        style={styles.switchInput}
      />
      <span
        style={{
          ...styles.switchSlider,
          backgroundColor: isOn ? "#ff6b6b" : "#ccc", // Pink when on
        }}
      >
        <span
          style={{
            ...styles.switchSliderBefore,
            transform: isOn ? "translateX(24px)" : "translateX(0)",
          }}
        />
      </span>
    </div>
  );

  // Improved color scheme and consistent styling
  const styles = {
    container: {
      backgroundColor: "#f8f9fa",
      minHeight: "100vh",
      paddingTop: "30px",
      paddingBottom: "50px",
      fontFamily: "'Roboto', sans-serif",
    },
    card: {
      border: "none",
      borderRadius: "12px",
      boxShadow: "0 4px 12px rgba(0, 0, 0, 0.08)",
      marginBottom: "30px",
      overflow: "hidden", // Ensures no content spills outside the rounded corners
    },
    largeProfileCard: {
      border: "none",
      borderRadius: "12px",
      boxShadow: "0 4px 12px rgba(0, 0, 0, 0.08)",
      marginBottom: "30px",
      overflow: "hidden",
      height: "100%", // Make card fill the height of its container
    },
    cardHeader: {
      backgroundColor: "#0a2463", // Navy
      color: "#fff",
      padding: "15px 20px",
      borderTopLeftRadius: "12px",
      borderTopRightRadius: "12px",
      fontWeight: "500",
    },
    cardBody: {
      padding: "25px",
      backgroundColor: "#fff",
      borderBottomLeftRadius: "12px",
      borderBottomRightRadius: "12px",
    },
    profileHeader: {
      fontSize: "28px", // Increased size
      fontWeight: "bold",
      marginBottom: "20px",
      color: "#0a2463", // Navy
    },
    badge: {
      padding: "8px 12px",
      fontSize: "14px",
      borderRadius: "50px",
      backgroundColor: "#ff6b6b", // Pink
      color: "#fff",
      display: "inline-block",
      marginBottom: "8px",
      margin: "0 5px",
    },
    tabButton: {
      fontSize: "16px",
      border: "none",
      backgroundColor: "transparent",
      padding: "15px 25px",
      cursor: "pointer",
      color: "#0a2463", // Navy
      borderBottom: "2px solid transparent",
      transition: "all 0.3s ease",
      fontWeight: "500",
    },
    tabButtonActive: {
      fontSize: "16px",
      border: "none",
      backgroundColor: "transparent",
      padding: "15px 25px",
      cursor: "pointer",
      color: "#ff6b6b", // Pink
      borderBottom: "2px solid #ff6b6b", // Pink
      fontWeight: "600",
    },
    reviewItem: {
      padding: "25px",
      borderRadius: "10px",
      marginBottom: "20px",
      backgroundColor: "#fff",
      boxShadow: "0 2px 8px rgba(0, 0, 0, 0.05)",
      transition: "transform 0.2s, box-shadow 0.2s",
      border: "1px solid #eaeaea",
    },
    reviewTitle: {
      fontSize: "18px",
      fontWeight: "bold",
      color: "#0a2463", // Navy
      marginBottom: "8px",
    },
    reviewText: {
      color: "#6c757d",
      lineHeight: "1.6",
      fontSize: "15px",
      marginBottom: "15px",
    },
    eventInfo: {
      backgroundColor: "#f8f9fa",
      padding: "12px 15px",
      borderRadius: "8px",
      marginTop: "10px",
      borderLeft: "4px solid #0a2463",
    },
    eventName: {
      fontWeight: "600",
      color: "#0a2463",
      marginBottom: "5px",
      fontSize: "16px",
      cursor: "pointer",
    },
    eventDetail: {
      color: "#6c757d",
      fontSize: "14px",
      marginBottom: "3px",
    },
    reviewDate: {
      fontStyle: "italic",
      color: "#adb5bd",
      fontSize: "14px",
      textAlign: "right",
    },
    noReviews: {
      padding: "40px 0",
      textAlign: "center",
      fontSize: "16px",
      color: "#6c757d",
    },
    textArea: {
      width: "100%",
      padding: "12px",
      borderRadius: "8px",
      border: "1px solid #ddd",
      fontSize: "16px",
      marginBottom: "15px",
      transition: "border 0.3s",
    },
    inputField: {
      width: "100%",
      padding: "12px",
      borderRadius: "8px",
      border: "1px solid #ddd",
      fontSize: "16px",
      marginBottom: "15px",
      transition: "border 0.3s",
    },
    button: {
      marginTop: "10px",
      marginRight: "10px",
      backgroundColor: "#ff6b6b", // Pink
      color: "white",
      padding: "12px 24px",
      border: "none",
      borderRadius: "8px",
      cursor: "pointer",
      transition: "background-color 0.3s ease",
      fontWeight: "500",
    },
    secondaryButton: {
      marginTop: "10px",
      backgroundColor: "#0a2463", // Navy
      color: "white",
      padding: "12px 24px",
      border: "none",
      borderRadius: "8px",
      cursor: "pointer",
      transition: "background-color 0.3s ease",
      fontWeight: "500",
    },
    settingItem: {
      padding: "15px 0",
      borderBottom: "1px solid #f0f0f0",
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center",
    },
    switchContainer: {
      position: "relative",
      display: "inline-block",
      width: "50px",
      height: "26px",
    },
    switchInput: {
      opacity: 0,
      width: 0,
      height: 0,
    },
    switchSlider: {
      position: "absolute",
      cursor: "pointer",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: "#ccc",
      transition: "0.4s",
      borderRadius: "34px",
    },
    switchSliderBefore: {
      position: "absolute",
      content: "",
      height: "18px",
      width: "18px",
      left: "4px",
      bottom: "4px",
      backgroundColor: "white",
      transition: "0.4s",
      borderRadius: "50%",
    },
    selectField: {
      padding: "10px 15px",
      borderRadius: "8px",
      border: "1px solid #ddd",
      fontSize: "16px",
      minWidth: "150px",
      backgroundColor: "#fff",
    },
    sectionHeading: {
      fontSize: "20px",
      fontWeight: "600",
      color: "#0a2463", // Navy
      marginTop: "25px",
      marginBottom: "20px",
      paddingBottom: "10px",
      borderBottom: "1px solid #eaeaea",
    },
    tabsContainer: {
      display: "flex",
      justifyContent: "flex-start",
      marginBottom: "25px",
      borderBottom: "1px solid #e9ecef",
    },
    userInfoContainer: {
      textAlign: "center",
      padding: "30px 20px", // Increased padding
    },
    userAvatar: {
      width: "120px", // Larger avatar
      height: "120px",
      borderRadius: "50%",
      margin: "0 auto 20px",
      backgroundColor: "#e9ecef",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      fontSize: "36px",
      color: "#0a2463",
      fontWeight: "bold",
    },
    labelText: {
      fontWeight: "500",
      marginBottom: "8px",
      color: "#0a2463",
    },
    settingsContainer: {
      marginBottom: "30px",
    },
    aboutMeText: {
      fontSize: "16px",
      lineHeight: "1.7",
      color: "#495057",
      marginBottom: "25px",
      padding: "0 15px",
    },
    badgeContainer: {
      marginTop: "15px",
      marginBottom: "15px",
    },
    ratingStars: {
      color: "#ffc107",
      fontSize: "20px",
      marginRight: "3px",
    },
    rating: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      marginBottom: "15px",
    },
    eventCard: {
      borderRadius: "10px",
      overflow: "hidden",
      marginBottom: "20px",
      boxShadow: "0 2px 8px rgba(0, 0, 0, 0.1)",
      transition: "transform 0.3s ease, box-shadow 0.3s ease",
    },
    eventCardImage: {
      height: "180px",
      objectFit: "cover",
      width: "100%",
    },
    eventCardImagePlaceholder: {
      height: "180px",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      backgroundColor: "#f0f0f0",
      color: "#aaa",
      fontSize: "3rem",
    },
    eventCardContent: {
      padding: "15px",
    },
    eventCardTitle: {
      fontSize: "18px",
      fontWeight: "600",
      color: "#0a2463",
      marginBottom: "10px",
    },
    eventCardDetail: {
      display: "flex",
      alignItems: "center",
      marginBottom: "8px",
      color: "#6c757d",
      fontSize: "14px",
    },
    eventCardActions: {
      display: "flex",
      justifyContent: "space-between",
      padding: "10px 15px",
      borderTop: "1px solid #f0f0f0",
    },
    eventCardCategory: {
      position: "absolute",
      top: "10px",
      right: "10px",
      backgroundColor: "rgba(255, 255, 255, 0.9)",
      padding: "5px 10px",
      borderRadius: "20px",
      fontSize: "12px",
      fontWeight: "500",
      color: "#0a2463",
    },
  };

  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center" style={{ height: "100vh" }}>
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Loading profile...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mt-5">
        <div className="alert alert-danger text-center" role="alert">
          {error}
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="container mt-5">
        <div className="alert alert-warning text-center" role="alert">
          User data not found.
        </div>
      </div>
    );
  }

  return (
    <div style={styles.container}>
      <div className="container py-4">
        <div className="row">
          {/* Left Sidebar: User Info - MADE LARGER */}
          <div className="col-lg-3 col-md-4 mb-4">
            <div className="card" style={styles.largeProfileCard}>
              <div className="card-header" style={styles.cardHeader}>
                <h4 className="mb-0">Profile</h4>
              </div>
              <div className="card-body" style={{...styles.cardBody, ...styles.userInfoContainer}}>
                <div style={styles.userAvatar}>
                  {getInitials(user.username)}
                </div>
                <h2 className="h3" style={styles.profileHeader}>{user.username}</h2>
                
                <div style={styles.badgeContainer}>
                  {user.isAdmin ? (
                    <span className="badge" style={{ ...styles.badge, backgroundColor: "#0a2463" }}>
                      Admin
                    </span>
                  ) : (
                    <span className="badge" style={{ ...styles.badge, backgroundColor: "#6c757d" }}>
                      User
                    </span>
                  )}
                  
                  <span className="badge d-inline-block" style={styles.badge}>
                    {reviews.length} Reviews
                  </span>
                </div>
                
                <div style={styles.rating} title="User Rating">
                  {renderStars(4.5)}
                </div>
                
                <p style={styles.aboutMeText}>
                  {aboutMeText || "No description provided. Click 'Edit Profile' to add information about yourself."}
                </p>
                
                {!editMode && (
                  <button onClick={() => setEditMode(true)} className="btn w-100" style={styles.button}>
                    Edit Profile
                  </button>
                )}
              </div>
            </div>
          </div>

          {/* Right Content: Tabs */}
          <div className="col-lg-9 col-md-8">
            {/* Tabs Header */}
            <div style={styles.tabsContainer}>
              <button
                onClick={() => setActiveTab("me")}
                style={activeTab === "me" ? styles.tabButtonActive : styles.tabButton}
              >
                Me
              </button>
              <button
                onClick={() => setActiveTab("events")}
                style={activeTab === "events" ? styles.tabButtonActive : styles.tabButton}
              >
                My Events
              </button>
              <button
                onClick={() => setActiveTab("reviews")}
                style={activeTab === "reviews" ? styles.tabButtonActive : styles.tabButton}
              >
                My Reviews
              </button>
              <button
                onClick={() => setActiveTab("settings")}
                style={activeTab === "settings" ? styles.tabButtonActive : styles.tabButton}
              >
                Settings
              </button>
            </div>

            {/* Tab Content */}
            <div>
              {activeTab === "me" && (
                <div className="card" style={styles.card}>
                  <div className="card-header" style={styles.cardHeader}>
                    <h4 className="mb-0">Account Details</h4>
                  </div>
                  <div className="card-body" style={styles.cardBody}>
                    {editMode ? (
                      <div>
                        <h5 style={styles.sectionHeading}>Edit Profile</h5>
                        <div className="mb-3">
                          <label className="form-label" style={styles.labelText}>Username</label>
                          <input
                            type="text"
                            value={newUsername}
                            onChange={handleUsernameChange}
                            style={styles.inputField}
                            placeholder="Enter new username"
                            className="form-control"
                          />
                        </div>
                        <div className="mb-3">
                          <label className="form-label" style={styles.labelText}>New Password</label>
                          <input
                            type="password"
                            value={newPassword}
                            onChange={handlePasswordChange}
                            style={styles.inputField}
                            placeholder="Enter new password"
                            className="form-control"
                          />
                        </div>
                        <div className="mb-3">
                          <label className="form-label" style={styles.labelText}>About Me</label>
                          <textarea
                            value={aboutMeText}
                            onChange={handleAboutMeChange}
                            style={styles.textArea}
                            rows="6"
                            className="form-control"
                            placeholder="Tell others about yourself..."
                          />
                        </div>
                        <div className="d-flex">
                          <button onClick={handleSaveProfile} className="btn" style={styles.button}>
                            Save Profile
                          </button>
                          <button 
                            onClick={() => setEditMode(false)} 
                            className="btn"
                            style={{ ...styles.secondaryButton, marginLeft: "10px" }}
                          >
                            Cancel
                          </button>
                        </div>
                      </div>
                    ) : (
                      <div className="text-center py-5">
                        <h5 style={{color: "#6c757d"}}>
                          Edit your profile by clicking the "Edit Profile" button in the left panel.
                        </h5>
                      </div>
                    )}
                  </div>
                </div>
              )}
              
              {activeTab === "events" && (
                <div className="card" style={styles.card}>
                  <div className="card-header" style={styles.cardHeader}>
                    <h4 className="mb-0">My Events</h4>
                  </div>
                  <div className="card-body" style={styles.cardBody}>
                    {adminEvents.length === 0 ? (
                      <div style={styles.noReviews}>
                        {user.isAdmin 
                          ? "You haven't created any events yet."
                          : "You don't have access to create events. Only administrators can create events."}
                      </div>
                    ) : (
                      <div className="row">
                        {adminEvents.map((event) => (
                          <div className="col-md-6 col-lg-4 mb-3" key={event.id}>
                            <div className="card" style={styles.eventCard}>
                              {/* Position the category badge */}
                              {event.category && (
                                <div style={styles.eventCardCategory}>
                                  {event.category}
                                </div>
                              )}
                              
                              {/* Event image */}
                              {event.image ? (
                                <img 
                                  src={getImageUrl(event.image)}
                                  alt={event.title}
                                  className="card-img-top"
                                  style={styles.eventCardImage}
                                />
                              ) : (
                                <div style={styles.eventCardImagePlaceholder}>
                                  <i className="bi bi-image"></i>
                                </div>
                              )}
                              
                              {/* Event details */}
                              <div style={styles.eventCardContent}>
                                <h5 style={styles.eventCardTitle}>{event.title}</h5>
                                
                                <div style={styles.eventCardDetail}>
                                  <i className="bi bi-calendar me-2"></i>
                                  {formatDateString(event.date)}
                                </div>
                                
                                <div style={styles.eventCardDetail}>
                                  <i className="bi bi-clock me-2"></i>
                                  {event.time || "Time not specified"}
                                </div>
                                
                                <div style={styles.eventCardDetail}>
                                  <i className="bi bi-geo-alt me-2"></i>
                                  {event.location}
                                </div>
                                
                                <p className="mt-2 mb-1" style={{
                                  fontSize: "14px",
                                  color: "#6c757d",
                                  overflow: "hidden",
                                  textOverflow: "ellipsis",
                                  display: "-webkit-box",
                                  WebkitLineClamp: 2,
                                  WebkitBoxOrient: "vertical"
                                }}>
                                  {event.description}
                                </p>
                              </div>
                              
                              {/* Action buttons */}
                              <div style={styles.eventCardActions}>
                                <button 
                                  className="btn btn-sm" 
                                  onClick={() => navigateToEvent(event.id)}
                                  style={{
                                    backgroundColor: "#0a2463",
                                    color: "white"
                                  }}
                                >
                                  <i className="bi bi-eye me-1"></i> View
                                </button>
                                
                                <button 
                                  className="btn btn-sm" 
                                  onClick={() => navigateToResponse(event.id)}
                                  style={{
                                    backgroundColor: "#ff6b6b",
                                    color: "white"
                                  }}
                                >
                                  <i className="bi bi-chat-text me-1"></i> Reviews
                                </button>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              )}
              
              {activeTab === "reviews" && (
                <div className="card" style={styles.card}>
                  <div className="card-header" style={styles.cardHeader}>
                    <h4 className="mb-0">My Reviews</h4>
                  </div>
                  <div className="card-body" style={styles.cardBody}>
                    {reviews.length === 0 ? (
                      <div style={styles.noReviews}>No reviews available.</div>
                    ) : (
                      <div className="review-list">
                        {reviews.map((review, index) => (
                          <div key={index} style={styles.reviewItem}>
                            <div className="d-flex justify-content-between align-items-start">
                              <h5 style={styles.reviewTitle}>{review.title || `Review #${index + 1}`}</h5>
                              <div style={{display: "flex", alignItems: "center"}}>
                                {renderStars(review.rating || 4)}
                              </div>
                            </div>
                            <p style={styles.reviewText}>{review.review_text || review.text || "No review text available."}</p>
                            
                            {/* Event information section */}
                            <div style={styles.eventInfo}>
                              <div 
                                onClick={() => review.event?.id && navigateToEvent(review.event.id)} 
                                style={styles.eventName}
                              >
                                Event: {review.event?.title || review.event?.name || "Unknown Event"}
                              </div>
                              <div style={styles.eventDetail}>
                                <strong>Date:</strong> {formatDateString(review.event?.date)}
                              </div>
                              <div style={styles.eventDetail}>
                                <strong>Location:</strong> {review.event?.location || "N/A"}
                              </div>
                              <div style={styles.eventDetail}>
                                <strong>Category:</strong> {review.event?.category || "N/A"}
                              </div>
                              {review.admin_response && (
                                <div style={{
                                  marginTop: "10px",
                                  padding: "10px",
                                  backgroundColor: "#f0f7ff",
                                  borderRadius: "6px",
                                  border: "1px solid #cce5ff"
                                }}>
                                  <strong style={{color: "#0a2463"}}>Admin Response:</strong>
                                  <p style={{margin: "5px 0 0 0", fontSize: "14px"}}>{review.admin_response}</p>
                                </div>
                              )}
                            </div>
                            
                            <div style={styles.reviewDate}>
                              Reviewed on: {formatDateString(review.date || review.createdAt)}
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              )}
              
              {activeTab === "settings" && (
                <div className="card" style={styles.card}>
                  <div className="card-header" style={styles.cardHeader}>
                    <h4 className="mb-0">Settings</h4>
                  </div>
                  <div className="card-body" style={styles.cardBody}>
                    {/* Notifications Settings */}
                    <div style={styles.settingsContainer}>
                      <h5 style={styles.sectionHeading}>Notification Preferences</h5>
                      <div style={styles.settingItem}>
                        <span>Email Notifications</span>
                        <ToggleSwitch 
                          isOn={notificationSettings.emailNotifications} 
                          onToggle={() => toggleNotificationSetting('emailNotifications')}
                        />
                      </div>
                      <div style={styles.settingItem}>
                        <span>Push Notifications</span>
                        <ToggleSwitch 
                          isOn={notificationSettings.pushNotifications} 
                          onToggle={() => toggleNotificationSetting('pushNotifications')}
                        />
                      </div>
                      <div style={styles.settingItem}>
                        <span>Event Reminders</span>
                        <ToggleSwitch 
                          isOn={notificationSettings.eventReminders} 
                          onToggle={() => toggleNotificationSetting('eventReminders')}
                        />
                      </div>
                      <div style={styles.settingItem}>
                        <span>Review Requests</span>
                        <ToggleSwitch 
                          isOn={notificationSettings.reviewRequests} 
                          onToggle={() => toggleNotificationSetting('reviewRequests')}
                        />
                      </div>
                    </div>

                    {/* Privacy Settings */}
                    <div style={styles.settingsContainer}>
                      <h5 style={styles.sectionHeading}>Privacy Settings</h5>
                      <div style={styles.settingItem}>
                        <span>Show Profile to Other Users</span>
                        <ToggleSwitch 
                          isOn={privacySettings.showProfile} 
                          onToggle={() => togglePrivacySetting('showProfile')}
                        />
                      </div>
                      <div style={styles.settingItem}>
                        <span>Make Reviews Public</span>
                        <ToggleSwitch 
                          isOn={privacySettings.showReviews} 
                          onToggle={() => togglePrivacySetting('showReviews')}
                        />
                      </div>
                      <div style={styles.settingItem}>
                        <span>Show Events I'm Attending</span>
                        <ToggleSwitch 
                          isOn={privacySettings.showEvents} 
                          onToggle={() => togglePrivacySetting('showEvents')}
                        />
                      </div>
                    </div>

                    {/* Theme Settings */}
                    <div style={styles.settingsContainer}>
                      <h5 style={styles.sectionHeading}>Display Settings</h5>
                      <div style={styles.settingItem}>
                        <span>Dark Mode</span>
                        <ToggleSwitch 
                          isOn={themeSettings.darkMode} 
                          onToggle={() => handleThemeChange('darkMode', !themeSettings.darkMode)}
                        />
                      </div>
                      <div style={styles.settingItem}>
                        <span>Font Size</span>
                        <select 
                          value={themeSettings.fontSize} 
                          onChange={(e) => handleThemeChange('fontSize', e.target.value)}
                          style={styles.selectField}
                          className="form-select"
                        >
                          <option value="small">Small</option>
                          <option value="medium">Medium</option>
                          <option value="large">Large</option>
                        </select>
                      </div>
                    </div>

                    {/* Save Settings Button */}
                    <div className="mt-4 text-end">
                      <button onClick={saveSettings} className="btn" style={styles.button}>
                        Save Settings
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Profile;
</file>

<file path="client/src/pages/UserNotificationIcon.js">
import { useState, useEffect, useRef, useContext } from "react";
import { useNavigate } from "react-router-dom";
import { io } from "socket.io-client";
import { AuthContext } from "../helpers/AuthContext";
import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap-icons/font/bootstrap-icons.css";

const UserNotificationIcon = () => {
  const { authState } = useContext(AuthContext);
  const [userNotifications, setUserNotifications] = useState([]);
  const [unreadUserCount, setUnreadUserCount] = useState(0);
  const [showDropdown, setShowDropdown] = useState(false);
  const dropdownRef = useRef(null);
  const buttonRef = useRef(null);
  const socketRef = useRef(null);
  const navigate = useNavigate();

  useEffect(() => {
    // Close dropdown when clicking outside
    function handleClickOutside(event) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target) && buttonRef.current !== event.target) {
        setShowDropdown(false);
      }
    }

    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  useEffect(() => {
    if (!authState.status) return;

    const fetchUserNotifications = async () => {
      try {
        const accessToken = localStorage.getItem("accessToken");
        if (!accessToken) return;

        const response = await fetch("http://localhost:3001/notifications", {
          headers: { Authorization: `Bearer ${accessToken}` },
        });

        if (response.ok) {
          const data = await response.json();

          // Get read notification IDs from localStorage
          const readNotificationIds = JSON.parse(localStorage.getItem("readNotifications") || "[]");

          // Mark notifications as read if they're in localStorage
          const updatedNotifications = data.map((notification) => ({
            ...notification,
            isRead: notification.isRead || readNotificationIds.includes(notification.id),
          }));

          setUserNotifications(updatedNotifications);
          setUnreadUserCount(updatedNotifications.filter((n) => !n.isRead).length);
        }
      } catch (error) {
        console.error("Failed to fetch notifications", error);
      }
    };

    fetchUserNotifications();

    socketRef.current = io("http://localhost:3001");

    socketRef.current.on("connect", () => {
      const accessToken = localStorage.getItem("accessToken");
      if (accessToken && authState.id) {
        socketRef.current.emit("authenticate", { token: accessToken, userId: authState.id });
        socketRef.current.emit("join-user-room", authState.id);
      }
    });

    socketRef.current.on("user-notification", (notification) => {
      // Play notification sound
      try {
        const notificationSound = new Audio("/notification-sound.mp3");
        notificationSound.play().catch(err => console.log("Audio play error:", err));
      } catch (e) {
        console.log("Audio error:", e);
      }
      
      setUserNotifications((prev) => (prev.some((n) => n.id === notification.id) ? prev : [notification, ...prev]));
      setUnreadUserCount((prev) => prev + 1);
    });

    return () => socketRef.current && socketRef.current.disconnect();
  }, [authState.status, authState.id]);

  const markUserNotificationAsRead = async (notification) => {
    try {
      const accessToken = localStorage.getItem("accessToken");
      const response = await fetch(`http://localhost:3001/notifications/${notification.id}/read`, {
        method: "PUT",
        headers: { Authorization: `Bearer ${accessToken}` },
      });

      if (response.ok) {
        // Update state
        setUserNotifications((prev) => prev.map((n) => (n.id === notification.id ? { ...n, isRead: true } : n)));
        setUnreadUserCount((prev) => Math.max(0, prev - 1));

        // Store read status in localStorage
        const readNotificationIds = JSON.parse(localStorage.getItem("readNotifications") || "[]");
        if (!readNotificationIds.includes(notification.id)) {
          localStorage.setItem("readNotifications", JSON.stringify([...readNotificationIds, notification.id]));
        }
      }
    } catch (error) {
      console.error("Failed to mark as read", error);
    }
  };

  const markAllAsRead = async () => {
    try {
      const accessToken = localStorage.getItem("accessToken");
      const response = await fetch(`http://localhost:3001/notifications/read-all`, {
        method: "PUT",
        headers: { Authorization: `Bearer ${accessToken}` },
      });

      if (response.ok) {
        // Get all notification IDs
        const allNotificationIds = userNotifications.map((n) => n.id);

        // Update state
        setUserNotifications((prev) => prev.map((n) => ({ ...n, isRead: true })));
        setUnreadUserCount(0);

        // Store all notification IDs in localStorage
        localStorage.setItem("readNotifications", JSON.stringify(allNotificationIds));
      }
    } catch (error) {
      console.error("Failed to mark all as read", error);
    }
  };
  
  const handleNotificationClick = (notification) => {
    markUserNotificationAsRead(notification);
    setShowDropdown(false);
    
    // Navigate based on notification type
    if (notification.type === "event") {
      navigate(`/event/${notification.relatedId}`);
    } else if (notification.type === "review_response") {
      navigate(`/event/${notification.relatedId}`);
    } else if (notification.type === "general") {
      // For general notifications, you might want to navigate to a default page or stay on the current page
      // navigate('/home');
    }
  };

  return (
    <div className="position-relative">
      <button
        ref={buttonRef}
        className="btn btn-light position-relative"
        onClick={() => setShowDropdown((prev) => !prev)}
      >
        <i className="bi bi-bell-fill fs-5"></i>
        {unreadUserCount > 0 && (
          <span className="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
            {unreadUserCount > 99 ? "99+" : unreadUserCount}
          </span>
        )}
      </button>

      {showDropdown && (
        <div
          ref={dropdownRef}
          className="dropdown-menu dropdown-menu-end shadow-sm p-2 show"
          style={{
            width: "320px",
            position: "absolute",
            right: 0,
            top: "100%",
            zIndex: 1050,
          }}
        >
          <div className="d-flex justify-content-between align-items-center p-2 border-bottom">
            <span className="fw-bold">Notifications</span>
            {unreadUserCount > 0 && (
              <button className="btn btn-sm btn-link text-decoration-none" onClick={markAllAsRead}>
                Mark all as read
              </button>
            )}
          </div>

          <div className="list-group list-group-flush" style={{ maxHeight: "300px", overflowY: "auto" }}>
            {userNotifications.length === 0 ? (
              <div className="text-center text-muted py-3">No notifications</div>
            ) : (
              userNotifications.map((notification) => (
                <button
                  key={notification.id}
                  className={`list-group-item list-group-item-action d-flex justify-content-between align-items-start ${notification.isRead ? "bg-white" : "bg-light"}`}
                  onClick={() => handleNotificationClick(notification)}
                >
                  <div className="w-100">
                    <p className="mb-1 text-truncate" title={notification.message}>
                      {notification.message}
                    </p>
                    <small className="text-muted">{new Date(notification.createdAt).toLocaleTimeString()}</small>
                  </div>
                  {!notification.isRead && <span className="badge bg-primary rounded-pill">New</span>}
                </button>
              ))
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default UserNotificationIcon;
</file>

<file path="server/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.env

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

/config/config.json
</file>

<file path="client/src/pages/AdminCalendar.js">
import React, { useEffect, useState, useContext } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
// No Calendar import since we're creating our own calendar view
import "bootstrap/dist/css/bootstrap.min.css";
import { Tooltip } from "bootstrap";
import "bootstrap-icons/font/bootstrap-icons.min.css";
import { FaHeart } from "react-icons/fa";
import { AuthContext } from "../helpers/AuthContext";

export default function CalendarView() {
  const [listOfEvents, setListOfEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [dateSelected, setDateSelected] = useState(new Date());
  const [viewMode, setViewMode] = useState("calendar"); // calendar or list
  const [currentMonthEvents, setCurrentMonthEvents] = useState([]);
  const [hoverEvent, setHoverEvent] = useState(null);
  const [hoverPosition, setHoverPosition] = useState({ top: 0, left: 0 });
  const { authState } = useContext(AuthContext);
  const navigate = useNavigate();

  // Color palette
  const colors = {
    navy: "#001F3F",
    coral: "#FF6B6B",
    white: "#FFFFFF",
    lightGray: "#F5F7FA",
    gray: "#E2E8F0",
    darkGray: "#718096",
  };

  useEffect(() => {
    if (!authState.status) {
      navigate("/login");
    } else {
      axios
        .get("http://localhost:3001/events")
        .then((response) => {
          setListOfEvents(response.data);
          setLoading(false);
          
          // Set initial current month events
          filterCurrentMonthEvents(response.data, dateSelected);
        })
        .catch((error) => {
          setError("There was an error loading events. Please try again later.");
          setLoading(false);
        });
    }
  }, [authState, navigate, dateSelected]); // Added dateSelected to dependency array

  useEffect(() => {
    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
    tooltipTriggerList.forEach((tooltip) => new Tooltip(tooltip));
  }, [listOfEvents]);

  // Filter events for current month view
  const filterCurrentMonthEvents = (events, date) => {
    const year = date.getFullYear();
    const month = date.getMonth();
    
    const filteredEvents = events.filter(event => {
      const eventDate = new Date(event.date);
      return eventDate.getFullYear() === year && eventDate.getMonth() === month;
    });
    
    setCurrentMonthEvents(filteredEvents);
  };

  // Handle month change in calendar - we'll use this in the UI buttons instead
  const changeMonth = (increment) => {
    const newDate = new Date(dateSelected);
    newDate.setMonth(newDate.getMonth() + increment);
    setDateSelected(newDate);
    filterCurrentMonthEvents(listOfEvents, newDate);
  };

  if (loading) return (
    <div className="d-flex justify-content-center align-items-center" style={{ height: "80vh", paddingTop: "70px" }}>
      <div className="spinner-border" role="status" style={{ color: colors.coral }}>
        <span className="visually-hidden">Loading...</span>
      </div>
    </div>
  );

  if (error) return (
    <div className="alert alert-danger mx-auto mt-5" style={{ maxWidth: "600px" }}>
      <i className="bi bi-exclamation-triangle-fill me-2"></i>
      {error}
    </div>
  );

  // Get upcoming events for list view
  const upcomingEvents = [...listOfEvents]
    .filter(event => new Date(event.date) >= new Date())
    .sort((a, b) => new Date(a.date) - new Date(b.date))
    .slice(0, 5);

  // Function to group events by date for the month view
  const groupEventsByDate = () => {
    const grouped = {};
    
    currentMonthEvents.forEach(event => {
      const date = new Date(event.date);
      const day = date.getDate();
      
      if (!grouped[day]) {
        grouped[day] = [];
      }
      
      grouped[day].push(event);
    });
    
    return grouped;
  };

  const eventsByDay = groupEventsByDate();
  
  // Get days in current month
  const getDaysInMonth = (year, month) => {
    return new Date(year, month + 1, 0).getDate();
  };
  
  const getCurrentMonthDays = () => {
    const currentDate = new Date(dateSelected);
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = getDaysInMonth(year, month);
    
    const days = [];
    
    // Fill in days from previous month
    const prevMonthDays = firstDay === 0 ? 6 : firstDay - 1; // Adjust for Monday as first day
    const prevMonth = month === 0 ? 11 : month - 1;
    const prevMonthYear = month === 0 ? year - 1 : year;
    const daysInPrevMonth = getDaysInMonth(prevMonthYear, prevMonth);
    
    for (let i = 0; i < prevMonthDays; i++) {
      days.push({
        date: new Date(prevMonthYear, prevMonth, daysInPrevMonth - prevMonthDays + i + 1),
        isCurrentMonth: false
      });
    }
    
    // Current month days
    for (let day = 1; day <= daysInMonth; day++) {
      days.push({
        date: new Date(year, month, day),
        isCurrentMonth: true
      });
    }
    
    // Next month days to fill 6 rows (42 cells)
    const remainingCells = 42 - days.length;
    const nextMonth = month === 11 ? 0 : month + 1;
    const nextMonthYear = month === 11 ? year + 1 : year;
    
    for (let day = 1; day <= remainingCells; day++) {
      days.push({
        date: new Date(nextMonthYear, nextMonth, day),
        isCurrentMonth: false
      });
    }
    
    return days;
  };

  // Footer component from Create Event page
  const Footer = () => {
    const currentYear = new Date().getFullYear();
    
    return (
      <footer style={{ 
        backgroundColor: colors.navy, 
        color: colors.white, 
        padding: "1.5rem", 
        textAlign: "center", 
        width: "100%", 
        boxShadow: "0 -5px 10px rgba(0,0,0,0.05)" 
      }}>
        <div style={{ 
          display: "flex", 
          flexDirection: "column", 
          alignItems: "center", 
          justifyContent: "center", 
          maxWidth: "800px", 
          margin: "0 auto" 
        }}>
          <p style={{ 
            margin: "0.5rem 0", 
            fontWeight: "600", 
            fontSize: "1rem" 
          }}>
            <FaHeart style={{ color: colors.coral, marginRight: "0.5rem" }} /> EventHub Community
          </p>
          <p style={{ margin: "0.5rem 0", fontSize: "0.9rem", color: colors.lightGray }}>
            Connect with event organizers and attendees from around the world
          </p>
          <p style={{ margin: "0.5rem 0", fontSize: "0.9rem", color: colors.lightGray }}>
            <button 
              onClick={() => navigate("/terms")} 
              style={{
                color: colors.coral, 
                textDecoration: "none", 
                fontWeight: "500", 
                transition: "color 0.3s ease",
                background: "none", 
                border: "none", 
                cursor: "pointer", 
                padding: 0
              }}
            >
              Terms
            </button> •
            <button 
              onClick={() => navigate("/privacy")} 
              style={{
                color: colors.coral, 
                textDecoration: "none", 
                fontWeight: "500", 
                transition: "color 0.3s ease",
                background: "none", 
                border: "none", 
                cursor: "pointer", 
                margin: "0 0.5rem", 
                padding: 0
              }}
            >
              Privacy
            </button> •
            <button 
              onClick={() => navigate("/support")} 
              style={{
                color: colors.coral, 
                textDecoration: "none", 
                fontWeight: "500", 
                transition: "color 0.3s ease",
                background: "none", 
                border: "none", 
                cursor: "pointer", 
                padding: 0
              }}
            >
              Support
            </button>
          </p>
          <p style={{ marginTop: "0.5rem", fontSize: "0.8rem", color: colors.lightGray }}>
            © {currentYear} EventHub. All rights reserved.
          </p>
        </div>
      </footer>
    );
  };

  // Function to correct the image path - following the same pattern from AdminDashboard
  const getImageUrl = (imagePath) => {
    if (!imagePath) return null;
    
    // If the path already starts with http, return as is
    if (imagePath.startsWith('http')) return imagePath;
    
    // If the path begins with "/uploads/events/", remove the leading slash
    if (imagePath.startsWith('/uploads/events/')) {
      return `http://localhost:3001${imagePath}`;
    }
    
    // For any other case, just append the path to the base URL
    return `http://localhost:3001/${imagePath}`;
  };

  // This function renders event popup content directly in the return statement
  // No need for a separate component definition

  // Event card component for month view
  const EventCard = ({ event }) => {
    return (
      <div 
        className="event-card"
        onClick={() => navigate(`/response/${event.id}`)}
        onMouseEnter={(e) => {
          setHoverEvent(event);
          setHoverPosition({ 
            top: e.clientY, 
            left: e.clientX + 20 // offset to prevent overlap with cursor
          });
        }}
        onMouseLeave={() => setHoverEvent(null)}
        style={{
          backgroundColor: colors.white,
          borderLeft: `3px solid ${colors.coral}`,
          padding: "0.5rem",
          marginBottom: "0.25rem",
          borderRadius: "4px",
          boxShadow: "0 1px 2px rgba(0,0,0,0.1)",
          cursor: "pointer",
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap"
        }}
      >
        <div style={{ fontSize: "0.75rem", color: colors.coral, fontWeight: "bold" }}>
          {new Date(event.date).toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit'
          })}
        </div>
        <div style={{ fontWeight: "500", color: colors.navy }}>
          {event.title}
        </div>
        <div style={{ fontSize: "0.75rem", color: colors.darkGray }}>
          <i className="bi bi-geo-alt-fill me-1"></i>
          {event.location}
        </div>
        {event.category && (
          <span 
            style={{ 
              display: "inline-block",
              fontSize: "0.7rem", 
              backgroundColor: `${colors.lightGray}`,
              color: colors.navy,
              padding: "0.1rem 0.5rem",
              borderRadius: "20px",
              marginTop: "0.25rem"
            }}
          >
            {event.category}
          </span>
        )}
      </div>
    );
  };

  return (
    <div style={{ display: "flex", flexDirection: "column", minHeight: "100vh" }}>
      <div className="container">
        <div className="row mb-4">
          <div className="col-md-6">
            <h2 className="text-primary">
              <i className="bi bi-calendar-event me-2" style={{ color: colors.coral }}></i>
              <span style={{ color: colors.coral }}>Events </span>
              <span style={{ color: colors.navy }}>Calendar</span>
            </h2>
          </div>
          <div className="col-md-6 text-end">
            <div className="btn-group me-2">
              <button
                className={`btn ${viewMode === 'calendar' ? 'btn-primary' : 'btn-outline-primary'}`}
                onClick={() => setViewMode("calendar")}
                style={{ 
                  backgroundColor: viewMode === 'calendar' ? colors.navy : 'white', 
                  borderColor: colors.navy,
                  color: viewMode === 'calendar' ? 'white' : colors.navy
                }}
              >
                <i className="bi bi-calendar3 me-1" style={{ color: viewMode === 'calendar' ? colors.coral : colors.navy }}></i> Calendar
              </button>

              <button
                className={`btn ${viewMode === 'list' ? 'btn-primary' : 'btn-outline-primary'}`}
                onClick={() => setViewMode("list")}
                style={{ 
                  backgroundColor: viewMode === 'list' ? colors.navy : 'white', 
                  borderColor: colors.navy,
                  color: viewMode === 'list' ? 'white' : colors.navy
                }}
              >
                <i className="bi bi-list-ul me-1" style={{ color: viewMode === 'list' ? colors.coral : colors.navy }}></i> List
              </button>
            </div>
            <button
              className="btn text-white"
              onClick={() => navigate("/create_event")}
              style={{ backgroundColor: colors.coral }}
            >
              <i className="bi bi-plus-circle me-1"></i> New Event
            </button>
          </div>
        </div>

        {viewMode === "calendar" ? (
          <div className="row mb-4">
            <div className="col-12">
              <div className="card shadow-sm">
                <div className="card-header bg-white">
                  <div className="d-flex justify-content-between align-items-center">
                    <h5 className="mb-0">
                      <i className="bi bi-calendar3-week me-2" style={{ color: colors.coral }}></i>
                      <span style={{ color: colors.navy }}>
                        {dateSelected.toLocaleString('default', { month: 'long', year: 'numeric' })}
                      </span>
                    </h5>
                    <div>
                      <button 
                        className="btn btn-sm"
                        onClick={() => changeMonth(-1)}
                        style={{ 
                          backgroundColor: "white", 
                          borderColor: colors.navy,
                          color: colors.navy,
                          marginRight: "0.5rem"
                        }}
                      >
                        <i className="bi bi-chevron-left"></i>
                      </button>
                      <button 
                        className="btn btn-sm"
                        onClick={() => {
                          const newDate = new Date();
                          setDateSelected(newDate);
                          filterCurrentMonthEvents(listOfEvents, newDate);
                        }}
                        style={{ 
                          backgroundColor: colors.navy, 
                          color: "white",
                          marginRight: "0.5rem"
                        }}
                      >
                        Today
                      </button>
                      <button 
                        className="btn btn-sm"
                        onClick={() => changeMonth(1)}
                        style={{ 
                          backgroundColor: "white", 
                          borderColor: colors.navy,
                          color: colors.navy
                        }}
                      >
                        <i className="bi bi-chevron-right"></i>
                      </button>
                    </div>
                  </div>
                </div>
                <div className="card-body p-0">
                  {/* New calendar grid layout to match screenshots */}
                  <div className="table-responsive">
                    <table className="table table-bordered mb-0" style={{ tableLayout: 'fixed' }}>
                      <thead>
                        <tr style={{ backgroundColor: colors.navy, color: "white" }}>
                          <th className="text-center" style={{ width: "14.28%" }}>Mon</th>
                          <th className="text-center" style={{ width: "14.28%" }}>Tue</th>
                          <th className="text-center" style={{ width: "14.28%" }}>Wed</th>
                          <th className="text-center" style={{ width: "14.28%" }}>Thu</th>
                          <th className="text-center" style={{ width: "14.28%" }}>Fri</th>
                          <th className="text-center" style={{ width: "14.28%" }}>Sat</th>
                          <th className="text-center" style={{ width: "14.28%" }}>Sun</th>
                        </tr>
                      </thead>
                      <tbody>
                        {/* Generate calendar rows */}
                        {Array.from({ length: 6 }, (_, weekIndex) => {
                          const days = getCurrentMonthDays().slice(weekIndex * 7, (weekIndex + 1) * 7);
                          
                          return (
                            <tr key={`week-${weekIndex}`} style={{ height: "120px" }}>
                              {days.map((dayInfo, dayIndex) => {
                                const day = dayInfo.date.getDate();
                                const isCurrentMonth = dayInfo.isCurrentMonth;
                                const isToday = new Date().toDateString() === dayInfo.date.toDateString();
                                // Only get events for the current month to avoid conflicts with day numbers
                                const dayEvents = isCurrentMonth 
                                  ? (eventsByDay[day] || []) 
                                  : [];
                                
                                return (
                                  <td 
                                    key={`day-${dayIndex}`} 
                                    className={`position-relative ${isCurrentMonth ? '' : 'text-muted'}`}
                                    style={{ 
                                      backgroundColor: isToday ? `rgba(255, 107, 107, 0.1)` : 
                                                     !isCurrentMonth ? `rgba(0, 0, 0, 0.03)` : 
                                                     'white',
                                      padding: "0.25rem",
                                      verticalAlign: "top",
                                      overflow: "hidden"
                                    }}
                                    onClick={() => setDateSelected(dayInfo.date)}
                                  >
                                    <div 
                                      style={{ 
                                        color: isCurrentMonth ? (isToday ? colors.coral : colors.coral) : '#aaa',
                                        fontWeight: isToday ? 'bold' : 'normal',
                                        fontSize: '1.1rem',
                                        padding: '0.25rem',
                                        textAlign: 'right',
                                        borderBottom: isCurrentMonth && dayEvents.length > 0 ? '1px solid #eee' : 'none'
                                      }}
                                    >
                                      {day}
                                    </div>
                                    
                                    <div style={{ 
                                      maxHeight: "85px", 
                                      overflowY: "auto",
                                      paddingTop: "0.25rem"
                                    }}>
                                      {isCurrentMonth && dayEvents.slice(0, 3).map((event) => (
                                        <EventCard key={`event-${event.id}`} event={event} />
                                      ))}
                                      
                                      {isCurrentMonth && dayEvents.length > 3 && (
                                        <div 
                                          style={{ 
                                            fontSize: "0.75rem", 
                                            color: colors.navy, 
                                            textAlign: "center",
                                            marginTop: "0.25rem",
                                            fontWeight: "500"
                                          }}
                                        >
                                          + {dayEvents.length - 3} more
                                        </div>
                                      )}
                                    </div>
                                  </td>
                                );
                              })}
                            </tr>
                          );
                        })}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ) : (
          // List View (keeping original code)
          <div className="row">
            <div className="col-md-8">
              <div className="card shadow-sm">
                <div className="card-header bg-white">
                  <h5 className="mb-0">
                    <i className="bi bi-calendar-range me-2" style={{ color: colors.coral }}></i>
                    <span style={{ color: colors.navy }}>Upcoming Events</span>
                  </h5>
                </div>
                <div className="card-body p-0">
                  <div className="table-responsive">
                    <table className="table table-hover">
                      <thead className="table-light">
                        <tr style={{ color: colors.navy }}>
                          <th scope="col">Date</th>
                          <th scope="col">Event</th>
                          <th scope="col">Location</th>
                          <th scope="col">Category</th>
                          <th scope="col">Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        {upcomingEvents.length > 0 ? (
                          upcomingEvents.map((event) => (
                            <tr key={event.id} style={{ cursor: "pointer" }}>
                              <td>
                                <div className="d-flex align-items-center">
                                  <div className="text-center me-2" style={{ lineHeight: "1" }}>
                                    <div className="fw-bold" style={{ fontSize: "1.2rem", color: colors.coral }}>
                                      {new Date(event.date).getDate()}
                                    </div>
                                    <div className="small text-muted text-uppercase">
                                      {new Date(event.date).toLocaleString('default', { month: 'short' })}
                                    </div>
                                  </div>
                                </div>
                              </td>
                              <td>
                                <div className="fw-bold" style={{ color: colors.navy }}>{event.title}</div>
                                <div className="small text-muted">
                                  {new Date(event.date).toLocaleTimeString([], {
                                    hour: '2-digit',
                                    minute: '2-digit'
                                  })}
                                </div>
                              </td>
                              <td>
                                <i className="bi bi-geo-alt-fill me-1" style={{ color: colors.coral }}></i>
                                {event.location}
                              </td>
                              <td>
                                <span className="badge bg-light" style={{ color: colors.navy }}>
                                  {event.category || "General"}
                                </span>
                              </td>
                              <td>
                                <div className="btn-group btn-group-sm">
                                  <button
                                    className="btn"
                                    onClick={() => navigate(`/event/${event.id}`)}
                                    style={{ borderColor: colors.navy, color: colors.navy }}
                                  >
                                    <i className="bi bi-eye"></i>
                                  </button>
                                  <button className="btn" style={{ borderColor: colors.coral, color: colors.coral }}>
                                    <i className="bi bi-calendar-plus"></i>
                                  </button>
                                </div>
                              </td>
                            </tr>
                          ))
                        ) : (
                          <tr>
                            <td colSpan="5" className="text-center py-4 text-muted">
                              No upcoming events found
                            </td>
                          </tr>
                        )}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>

            <div className="col-md-4">
              <div className="card shadow-sm mb-4">
                <div className="card-header text-white" style={{ backgroundColor: colors.navy }}>
                  <h5 className="mb-0">
                    <i className="bi bi-funnel me-2" style={{ color: colors.coral }}></i>
                    Filter Events
                  </h5>
                </div>
                <div className="card-body">
                  <form>
                    <div className="mb-3">
                      <label htmlFor="categoryFilter" className="form-label" style={{ color: colors.navy }}>Category</label>
                      <select className="form-select" id="categoryFilter" style={{ borderColor: colors.coral }}>
                        <option value="">All Categories</option>
                        <option value="social">Social</option>
                        <option value="business">Business</option>
                        <option value="education">Education</option>
                        <option value="sports">Sports</option>
                        <option value="webinar">Webinar</option>
                        <option value="conference">Conference</option>
                        <option value="workshop">Workshop</option>
                      </select>
                    </div>
                    <div className="mb-3">
                      <label htmlFor="dateRangeFilter" className="form-label" style={{ color: colors.navy }}>Date Range</label>
                      <select className="form-select" id="dateRangeFilter" style={{ borderColor: colors.coral }}>
                        <option value="all">All Dates</option>
                        <option value="today">Today</option>
                        <option value="tomorrow">Tomorrow</option>
                        <option value="week">This Week</option>
                        <option value="month">This Month</option>
                      </select>
                    </div>
                    <div className="d-grid">
                      <button type="submit" className="btn text-white" style={{ backgroundColor: colors.coral }}>
                        <i className="bi bi-search me-1"></i> Apply Filters
                      </button>
                    </div>
                  </form>
                </div>
              </div>

              <div className="card shadow-sm">
                <div className="card-header text-white" style={{ backgroundColor: colors.coral }}>
                  <h5 className="mb-0">
                    <i className="bi bi-info-circle me-2"></i>
                    Quick Stats
                  </h5>
                </div>
                <div className="card-body">
                  <div className="row text-center">
                    <div className="col-6 mb-3">
                      <div className="p-3 bg-light rounded">
                        <h2 style={{ color: colors.navy }}>{listOfEvents.length}</h2>
                        <p className="mb-0 text-muted">Total Events</p>
                      </div>
                    </div>
                    <div className="col-6 mb-3">
                      <div className="p-3 bg-light rounded">
                        <h2 style={{ color: colors.coral }}>{upcomingEvents.length}</h2>
                        <p className="mb-0 text-muted">Upcoming</p>
                      </div>
                    </div>
                    <div className="col-6">
                      <div className="p-3 bg-light rounded">
                        <h2 style={{ color: colors.navy }}>
                          {
                            new Set(
                              listOfEvents.map(event =>
                                new Date(event.date).toLocaleDateString('en-US', { month: 'short' })
                              )
                            ).size
                          }
                        </h2>
                        <p className="mb-0 text-muted">Active Months</p>
                      </div>
                    </div>
                    <div className="col-6">
                      <div className="p-3 bg-light rounded">
                        <h2 style={{ color: colors.coral }}>
                          {
                            new Set(
                              listOfEvents.map(event => event.location)
                            ).size
                          }
                        </h2>
                        <p className="mb-0 text-muted">Locations</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
      
      {/* Apply Footer from Create Event Page */}
      <Footer />
      
      {/* Event details popup on hover - direct implementation instead of using a separate component */}
      {hoverEvent && (
        <div 
          className="event-popup"
          style={{
            position: "fixed",
            top: `${hoverPosition.top}px`,
            left: `${hoverPosition.left}px`,
            backgroundColor: colors.white,
            boxShadow: "0 4px 12px rgba(0, 0, 0, 0.15)",
            borderRadius: "8px",
            padding: "12px",
            zIndex: 1050,
            width: "280px",
            pointerEvents: "none", // Prevent the popup from intercepting mouse events
          }}
        >
          {hoverEvent.image && (
            <div 
              style={{
                width: "100%",
                height: "140px",
                borderRadius: "6px",
                marginBottom: "10px",
                backgroundImage: `url(${getImageUrl(hoverEvent.image)})`,
                backgroundSize: "cover",
                backgroundPosition: "center",
                backgroundRepeat: "no-repeat",
                backgroundColor: "#f0f0f0"
              }}
            />
          )}
          
          <h5 style={{ margin: "0 0 5px 0", color: colors.navy }}>{hoverEvent.title}</h5>
          
          <div style={{ fontSize: "0.85rem", marginBottom: "5px", color: colors.coral, fontWeight: "500" }}>
            <i className="bi bi-clock me-2"></i>
            {new Date(hoverEvent.date).toLocaleString([], {
              weekday: 'short',
              month: 'short',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            })}
          </div>
          
          <div style={{ fontSize: "0.85rem", marginBottom: "5px", color: colors.darkGray }}>
            <i className="bi bi-geo-alt-fill me-2"></i>
            {hoverEvent.location}
          </div>
          
          {hoverEvent.category && (
            <div style={{ marginTop: "8px" }}>
              <span
                style={{
                  fontSize: "0.75rem",
                  backgroundColor: colors.lightGray,
                  color: colors.navy,
                  padding: "3px 8px",
                  borderRadius: "12px",
                  display: "inline-block"
                }}
              >
                {hoverEvent.category}
              </span>
            </div>
          )}
          
          {hoverEvent.description && (
            <div style={{ 
              fontSize: "0.8rem", 
              marginTop: "8px", 
              color: colors.darkGray,
              maxHeight: "60px",
              overflow: "hidden",
              textOverflow: "ellipsis",
              display: "-webkit-box",
              WebkitLineClamp: 3,
              WebkitBoxOrient: "vertical"
            }}>
              {hoverEvent.description}
            </div>
          )}
        </div>
      )}
    </div>
  );
}
</file>

<file path="client/src/pages/Calendar.js">
import React, { useEffect, useState, useContext } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import "bootstrap/dist/css/bootstrap.min.css";
import { Tooltip } from "bootstrap";
import "bootstrap-icons/font/bootstrap-icons.min.css";
import { FaHeart } from "react-icons/fa";
import { AuthContext } from "../helpers/AuthContext";

export default function ImprovedCalendarView() {
  const [listOfEvents, setListOfEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [dateSelected, setDateSelected] = useState(new Date());
  const [viewMode, setViewMode] = useState("calendar"); // calendar or list
  const [currentMonthEvents, setCurrentMonthEvents] = useState([]);
  const [hoverEvent, setHoverEvent] = useState(null);
  const [hoverPosition, setHoverPosition] = useState({ top: 0, left: 0 });
  const [calendarAddSuccess, setCalendarAddSuccess] = useState(false);
  const { authState } = useContext(AuthContext);
  const navigate = useNavigate();

  // Color palette
  const colors = {
    navy: "#1A2A56",
    navyLight: "#2A3A66",
    pink: "#FF6B6B",
    pinkLight: "#FF6B6B",
    white: "#FFFFFF",
    lightGray: "#F5F7FA",
    gray: "#E2E8F0",
    darkGray: "#718096",
    errorRed: "#FF4D6A",
    successGreen: "#2DD4BF",
    eventBackground: "#FFF3E0", // Light orange background like in the screenshot
  };
  
  // Footer styles
  const footerStyle = {
    backgroundColor: colors.navy,
    color: colors.white,
    padding: "1.5rem",
    textAlign: "center",
    width: "100%",
    boxShadow: "0 -5px 10px rgba(0,0,0,0.05)",
    position: "relative",
    marginTop: "50px",
    bottom: 0,
    left: 0,
    right: 0
  };

  const footerContentStyle = {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    maxWidth: "800px",
    margin: "0 auto",
  };

  const footerTextStyle = {
    margin: "0.5rem 0",
    fontSize: "0.9rem",
    color: colors.lightGray,
  };

  const footerLinkStyle = {
    color: colors.pinkLight,
    textDecoration: "none",
    fontWeight: "500",
    transition: "color 0.3s ease",
  };

  const footerIconStyle = {
    color: colors.pink,
    marginRight: "0.5rem",
    verticalAlign: "middle",
  };

  useEffect(() => {
    if (!authState.status) {
      navigate("/login");
    } else {
      axios
        .get("http://localhost:3001/events")
        .then((response) => {
          setListOfEvents(response.data);
          setLoading(false);
          
          // Set initial current month events
          filterCurrentMonthEvents(response.data, dateSelected);
        })
        .catch((error) => {
          setError("There was an error loading events. Please try again later.");
          setLoading(false);
        });
    }
  }, [authState, navigate, dateSelected]);

  useEffect(() => {
    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
    tooltipTriggerList.forEach((tooltip) => new Tooltip(tooltip));
  }, [listOfEvents]);

  // Filter events for current month view
  const filterCurrentMonthEvents = (events, date) => {
    const year = date.getFullYear();
    const month = date.getMonth();
    
    const filteredEvents = events.filter(event => {
      const eventDate = new Date(event.date);
      return eventDate.getFullYear() === year && eventDate.getMonth() === month;
    });
    
    setCurrentMonthEvents(filteredEvents);
  };

  // Handle month change in calendar
  const changeMonth = (increment) => {
    const newDate = new Date(dateSelected);
    newDate.setMonth(newDate.getMonth() + increment);
    setDateSelected(newDate);
    filterCurrentMonthEvents(listOfEvents, newDate);
  };

  if (loading) return (
    <div className="d-flex justify-content-center align-items-center" style={{ height: "80vh", paddingTop: "70px" }}>
      <div className="spinner-border" role="status" style={{ color: colors.pink }}>
        <span className="visually-hidden">Loading...</span>
      </div>
    </div>
  );

  if (error) return (
    <div className="alert alert-danger mx-auto mt-5" style={{ maxWidth: "600px" }}>
      <i className="bi bi-exclamation-triangle-fill me-2"></i>
      {error}
    </div>
  );

  // Get upcoming events for list view
  const upcomingEvents = [...listOfEvents]
    .filter(event => new Date(event.date) >= new Date())
    .sort((a, b) => new Date(a.date) - new Date(b.date))
    .slice(0, 5);

  // Function to group events by date for the month view
  const groupEventsByDate = () => {
    const grouped = {};
    
    currentMonthEvents.forEach(event => {
      const date = new Date(event.date);
      const day = date.getDate();
      
      if (!grouped[day]) {
        grouped[day] = [];
      }
      
      grouped[day].push(event);
    });
    
    return grouped;
  };

  const eventsByDay = groupEventsByDate();
  
  // Get days in current month
  const getDaysInMonth = (year, month) => {
    return new Date(year, month + 1, 0).getDate();
  };
  
  const getCurrentMonthDays = () => {
    const currentDate = new Date(dateSelected);
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = getDaysInMonth(year, month);
    
    const days = [];
    
    // Fill in days from previous month
    const prevMonthDays = firstDay === 0 ? 6 : firstDay - 1; // Adjust for Monday as first day
    const prevMonth = month === 0 ? 11 : month - 1;
    const prevMonthYear = month === 0 ? year - 1 : year;
    const daysInPrevMonth = getDaysInMonth(prevMonthYear, prevMonth);
    
    for (let i = 0; i < prevMonthDays; i++) {
      days.push({
        date: new Date(prevMonthYear, prevMonth, daysInPrevMonth - prevMonthDays + i + 1),
        isCurrentMonth: false
      });
    }
    
    // Current month days
    for (let day = 1; day <= daysInMonth; day++) {
      days.push({
        date: new Date(year, month, day),
        isCurrentMonth: true
      });
    }
    
    // Next month days to fill 6 rows (42 cells)
    const remainingCells = 42 - days.length;
    const nextMonth = month === 11 ? 0 : month + 1;
    const nextMonthYear = month === 11 ? year + 1 : year;
    
    for (let day = 1; day <= remainingCells; day++) {
      days.push({
        date: new Date(nextMonthYear, nextMonth, day),
        isCurrentMonth: false
      });
    }
    
    return days;
  };

  // Function to add event to user's calendar
  const addToCalendar = (event) => {
    // Format event details for calendar
    const eventTitle = encodeURIComponent(event.title);
    const eventStart = encodeURIComponent(new Date(event.date).toISOString());
    const eventEnd = encodeURIComponent(new Date(new Date(event.date).getTime() + 2*60*60*1000).toISOString()); // Default 2 hours
    const eventLocation = encodeURIComponent(event.location || '');
    const eventDetails = encodeURIComponent(event.description || '');
    
    // Create calendar URLs for different providers
    const googleUrl = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${eventTitle}&dates=${eventStart.replace(/[-:]/g, '').replace(/\.\d+/g, '')}/${eventEnd.replace(/[-:]/g, '').replace(/\.\d+/g, '')}&details=${eventDetails}&location=${eventLocation}&sf=true&output=xml`;
    
    const yahooUrl = `https://calendar.yahoo.com/?v=60&title=${eventTitle}&st=${eventStart}&et=${eventEnd}&desc=${eventDetails}&in_loc=${eventLocation}`;
    
    const outlookUrl = `https://outlook.live.com/calendar/0/deeplink/compose?subject=${eventTitle}&startdt=${eventStart}&enddt=${eventEnd}&body=${eventDetails}&location=${eventLocation}`;
    
    const icalContent = [
      'BEGIN:VCALENDAR',
      'VERSION:2.0',
      'BEGIN:VEVENT',
      `SUMMARY:${event.title}`,
      `DTSTART:${new Date(event.date).toISOString().replace(/[-:]/g, '').replace(/\.\d+/g, '')}`,
      `DTEND:${new Date(new Date(event.date).getTime() + 2*60*60*1000).toISOString().replace(/[-:]/g, '').replace(/\.\d+/g, '')}`,
      `DESCRIPTION:${event.description || ''}`,
      `LOCATION:${event.location || ''}`,
      'END:VEVENT',
      'END:VCALENDAR'
    ].join('\\n');
    
    // Create modal to let user choose calendar type
    const modal = document.createElement('div');
    modal.style.position = 'fixed';
    modal.style.left = '0';
    modal.style.top = '0';
    modal.style.width = '100%';
    modal.style.height = '100%';
    modal.style.backgroundColor = 'rgba(0,0,0,0.5)';
    modal.style.display = 'flex';
    modal.style.alignItems = 'center';
    modal.style.justifyContent = 'center';
    modal.style.zIndex = '1060';
    
    const modalContent = document.createElement('div');
    modalContent.style.backgroundColor = 'white';
    modalContent.style.borderRadius = '8px';
    modalContent.style.padding = '20px';
    modalContent.style.maxWidth = '400px';
    modalContent.style.width = '90%';
    modalContent.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
    
    modalContent.innerHTML = `
      <h4 style="color: ${colors.navy}; margin-bottom: 20px;">Add to Calendar</h4>
      <p style="margin-bottom: 20px; color: ${colors.darkGray};">Choose your calendar provider:</p>
      <div style="display: flex; flex-direction: column; gap: 10px;">
        <a href="${googleUrl}" target="_blank" style="text-decoration: none; color: white; background-color: ${colors.navy}; padding: 10px; border-radius: 4px; text-align: center;">
          <i class="bi bi-google me-2"></i>Google Calendar
        </a>
        <a href="${outlookUrl}" target="_blank" style="text-decoration: none; color: white; background-color: ${colors.navy}; padding: 10px; border-radius: 4px; text-align: center;">
          <i class="bi bi-microsoft me-2"></i>Outlook
        </a>
        <a href="${yahooUrl}" target="_blank" style="text-decoration: none; color: white; background-color: ${colors.navy}; padding: 10px; border-radius: 4px; text-align: center;">
          <i class="bi bi-calendar me-2"></i>Yahoo Calendar
        </a>
        <a href="data:text/calendar;charset=utf8,${encodeURIComponent(icalContent)}" download="${event.title.replace(/\s+/g, '_')}.ics" style="text-decoration: none; color: white; background-color: ${colors.pink}; padding: 10px; border-radius: 4px; text-align: center;">
          <i class="bi bi-file-earmark-arrow-down me-2"></i>Download ICS File
        </a>
      </div>
      <div style="text-align: right; margin-top: 20px;">
        <button id="close-modal" style="background-color: #f0f0f0; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer;">Close</button>
      </div>
    `;
    
    modal.appendChild(modalContent);
    document.body.appendChild(modal);
    
    document.getElementById('close-modal').addEventListener('click', () => {
      document.body.removeChild(modal);
      // Show success message
      setCalendarAddSuccess(true);
      setTimeout(() => setCalendarAddSuccess(false), 3000);
    });
    
    // Log event for analytics (you could connect this to your backend)
    console.log(`User requested to add event to calendar: ${event.id} - ${event.title}`);
    
    // You could also track this event with an API call
    /*
    axios.post('http://localhost:3001/events/calendar-add', {
      eventId: event.id,
      userId: authState.id
    }).catch(error => console.error('Error logging calendar add:', error));
    */
  };

  // Function to correct the image path
  const getImageUrl = (imagePath) => {
    if (!imagePath) return null;
    
    if (imagePath.startsWith('http')) return imagePath;
    
    if (imagePath.startsWith('/uploads/events/')) {
      return `http://localhost:3001${imagePath}`;
    }
    
    return `http://localhost:3001/${imagePath}`;
  };

  // Simplified event display for the calendar cell
  const EventLabel = ({ event }) => {
    return (
      <div 
        className="event-label mb-1"
        onClick={(e) => {
          e.stopPropagation();
          navigate(`/event/${event.id}`);
        }}
        onMouseEnter={(e) => {
          setHoverEvent(event);
          setHoverPosition({ 
            top: e.clientY, 
            left: e.clientX + 20
          });
        }}
        onMouseLeave={() => setHoverEvent(null)}
        style={{
          backgroundColor: colors.eventBackground,
          borderLeft: `3px solid ${colors.pink}`,
          padding: "4px 6px",
          borderRadius: "3px",
          cursor: "pointer",
          fontSize: "0.8rem",
          whiteSpace: "nowrap",
          overflow: "hidden",
          textOverflow: "ellipsis",
          color: colors.navy,
          fontWeight: "500"
        }}
      >
        <div style={{ display: "flex", alignItems: "center" }}>
          <span style={{ color: colors.pink, marginRight: "5px", fontSize: "0.75rem" }}>
            {new Date(event.date).toLocaleTimeString([], {
              hour: '2-digit',
              minute: '2-digit'
            })}
          </span>
          <span style={{ overflow: "hidden", textOverflow: "ellipsis" }}>
            {event.title}
          </span>
        </div>
      </div>
    );
  };

  return (
    <>
      <div style={{ display: "flex", flexDirection: "column", minHeight: "100vh" }}>
        {calendarAddSuccess && (
          <div 
            style={{
              position: "fixed",
              top: "20px",
              right: "20px",
              backgroundColor: colors.successGreen,
              color: "white",
              padding: "10px 15px",
              borderRadius: "4px",
              boxShadow: "0 2px 10px rgba(0,0,0,0.1)",
              zIndex: 1050,
              display: "flex",
              alignItems: "center",
              gap: "8px"
            }}
          >
            <i className="bi bi-check-circle-fill"></i>
            Event added to calendar successfully!
          </div>
        )}
        <div className="container" style={{ paddingTop: "40px", paddingBottom: "200px", flex: 1 }}>
          <div className="row mb-4">
            <div className="col-md-6">
              <h2 className="text-primary">
                <i className="bi bi-calendar-event me-2" style={{ color: colors.pink }}></i>
                <span style={{ color: colors.pink }}>Events </span>
                <span style={{ color: colors.navy }}>Calendar</span>
              </h2>
            </div>
            <div className="col-md-6 text-end">
              <div className="btn-group me-2">
                <button
                  className={`btn ${viewMode === 'calendar' ? 'btn-primary' : 'btn-outline-primary'}`}
                  onClick={() => setViewMode("calendar")}
                  style={{ 
                    backgroundColor: viewMode === 'calendar' ? colors.navy : 'white', 
                    borderColor: colors.navy,
                    color: viewMode === 'calendar' ? 'white' : colors.navy
                  }}
                >
                  <i className="bi bi-calendar3 me-1" style={{ color: viewMode === 'calendar' ? colors.pink : colors.navy }}></i> Calendar
                </button>

                <button
                  className={`btn ${viewMode === 'list' ? 'btn-primary' : 'btn-outline-primary'}`}
                  onClick={() => setViewMode("list")}
                  style={{ 
                    backgroundColor: viewMode === 'list' ? colors.navy : 'white', 
                    borderColor: colors.navy,
                    color: viewMode === 'list' ? 'white' : colors.navy
                  }}
                >
                  <i className="bi bi-list-ul me-1" style={{ color: viewMode === 'list' ? colors.pink : colors.navy }}></i> List
                </button>
              </div>
            </div>
          </div>

          {viewMode === "calendar" ? (
            <div className="row mb-4">
              <div className="col-12">
                <div className="card shadow-sm">
                  <div className="card-header bg-white">
                    <div className="d-flex justify-content-between align-items-center">
                      <h5 className="mb-0">
                        <i className="bi bi-calendar3-week me-2" style={{ color: colors.pink }}></i>
                        <span style={{ color: colors.navy }}>
                          {dateSelected.toLocaleString('default', { month: 'long', year: 'numeric' })}
                        </span>
                      </h5>
                      <div>
                        <button 
                          className="btn btn-sm"
                          onClick={() => changeMonth(-1)}
                          style={{ 
                            backgroundColor: "white", 
                            borderColor: colors.navy,
                            color: colors.navy,
                            marginRight: "0.5rem"
                          }}
                        >
                          <i className="bi bi-chevron-left"></i>
                        </button>
                        <button 
                          className="btn btn-sm"
                          onClick={() => {
                            const newDate = new Date();
                            setDateSelected(newDate);
                            filterCurrentMonthEvents(listOfEvents, newDate);
                          }}
                          style={{ 
                            backgroundColor: colors.navy, 
                            color: "white",
                            marginRight: "0.5rem"
                          }}
                        >
                          Today
                        </button>
                        <button 
                          className="btn btn-sm"
                          onClick={() => changeMonth(1)}
                          style={{ 
                            backgroundColor: "white", 
                            borderColor: colors.navy,
                            color: colors.navy
                          }}
                        >
                          <i className="bi bi-chevron-right"></i>
                        </button>
                      </div>
                    </div>
                  </div>
                  <div className="card-body p-0">
                    {/* Calendar grid layout */}
                    <div className="table-responsive">
                      <table className="table table-bordered mb-0" style={{ tableLayout: 'fixed' }}>
                        <thead>
                          <tr style={{ backgroundColor: colors.navy, color: "white" }}>
                            <th className="text-center" style={{ width: "14.28%" }}>Mon</th>
                            <th className="text-center" style={{ width: "14.28%" }}>Tue</th>
                            <th className="text-center" style={{ width: "14.28%" }}>Wed</th>
                            <th className="text-center" style={{ width: "14.28%" }}>Thu</th>
                            <th className="text-center" style={{ width: "14.28%" }}>Fri</th>
                            <th className="text-center" style={{ width: "14.28%" }}>Sat</th>
                            <th className="text-center" style={{ width: "14.28%" }}>Sun</th>
                          </tr>
                        </thead>
                        <tbody>
                          {/* Generate calendar rows */}
                          {Array.from({ length: 6 }, (_, weekIndex) => {
                            const days = getCurrentMonthDays().slice(weekIndex * 7, (weekIndex + 1) * 7);
                            
                            return (
                              <tr key={`week-${weekIndex}`} style={{ height: "auto", minHeight: "120px" }}>
                                {days.map((dayInfo, dayIndex) => {
                                  const day = dayInfo.date.getDate();
                                  const isCurrentMonth = dayInfo.isCurrentMonth;
                                  const isToday = new Date().toDateString() === dayInfo.date.toDateString();
                                  const dayEvents = isCurrentMonth 
                                    ? (eventsByDay[day] || []) 
                                    : [];
                                  
                                  return (
                                    <td 
                                      key={`day-${dayIndex}`} 
                                      className={`position-relative ${isCurrentMonth ? '' : 'text-muted'}`}
                                      style={{ 
                                        backgroundColor: isToday ? `rgba(255, 107, 107, 0.1)` : 
                                                      !isCurrentMonth ? `rgba(0, 0, 0, 0.03)` : 
                                                      'white',
                                        padding: "0.25rem",
                                        verticalAlign: "top",
                                        height: dayEvents.length > 0 ? "auto" : "80px"
                                      }}
                                      onClick={() => setDateSelected(dayInfo.date)}
                                    >
                                      <div 
                                        style={{ 
                                          color: isCurrentMonth ? (isToday ? colors.pink : colors.navy) : '#aaa',
                                          fontWeight: isToday ? 'bold' : 'normal',
                                          fontSize: '1.1rem',
                                          padding: '0.25rem',
                                          textAlign: 'right',
                                          marginBottom: '0.25rem'
                                        }}
                                      >
                                        {day}
                                      </div>
                                      
                                      {/* All events without scrolling */}
                                      <div style={{ 
                                        display: "flex",
                                        flexDirection: "column",
                                        height: "auto"
                                      }}>
                                        {isCurrentMonth && dayEvents.map((event) => (
                                          <EventLabel key={`event-${event.id}`} event={event} />
                                        ))}
                                      </div>
                                    </td>
                                  );
                                })}
                              </tr>
                            );
                          })}
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            // List View
            <div className="row">
              <div className="col-12">
                <div className="card shadow-sm">
                  <div className="card-header bg-white">
                    <h5 className="mb-0">
                      <i className="bi bi-calendar-range me-2" style={{ color: colors.pink }}></i>
                      <span style={{ color: colors.navy }}>Upcoming Events</span>
                    </h5>
                  </div>
                  <div className="card-body p-0">
                    <div className="table-responsive">
                      <table className="table table-hover">
                        <thead className="table-light">
                          <tr style={{ color: colors.navy }}>
                            <th scope="col">Date</th>
                            <th scope="col">Event</th>
                            <th scope="col">Location</th>
                            <th scope="col">Category</th>
                            <th scope="col">Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {upcomingEvents.length > 0 ? (
                            upcomingEvents.map((event) => (
                              <tr key={event.id} style={{ cursor: "pointer" }}>
                                <td>
                                  <div className="d-flex align-items-center">
                                    <div className="text-center me-2" style={{ lineHeight: "1" }}>
                                      <div className="fw-bold" style={{ fontSize: "1.2rem", color: colors.pink }}>
                                        {new Date(event.date).getDate()}
                                      </div>
                                      <div className="small text-muted text-uppercase">
                                        {new Date(event.date).toLocaleString('default', { month: 'short' })}
                                      </div>
                                    </div>
                                  </div>
                                </td>
                                <td>
                                  <div className="fw-bold" style={{ color: colors.navy }}>{event.title}</div>
                                  <div className="small text-muted">
                                    {new Date(event.date).toLocaleTimeString([], {
                                      hour: '2-digit',
                                      minute: '2-digit'
                                    })}
                                  </div>
                                </td>
                                <td>
                                  <i className="bi bi-geo-alt-fill me-1" style={{ color: colors.pink }}></i>
                                  {event.location}
                                </td>
                                <td>
                                  <span className="badge bg-light" style={{ color: colors.navy }}>
                                    {event.category || "General"}
                                  </span>
                                </td>
                                <td>
                                  <div className="btn-group btn-group-sm">
                                    <button
                                      className="btn"
                                      onClick={() => navigate(`/event/${event.id}`)}
                                      style={{ borderColor: colors.navy, color: colors.navy }}
                                    >
                                      <i className="bi bi-eye"></i>
                                    </button>
                                    <button 
                                      className="btn" 
                                      style={{ borderColor: colors.pink, color: colors.pink }}
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        addToCalendar(event);
                                      }}
                                      title="Add to my calendar"
                                    >
                                      <i className="bi bi-calendar-plus"></i>
                                    </button>
                                  </div>
                                </td>
                              </tr>
                            ))
                          ) : (
                            <tr>
                              <td colSpan="5" className="text-center py-4 text-muted">
                                No upcoming events found
                              </td>
                            </tr>
                          )}
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
        
        {/* Footer */}
        <footer style={footerStyle}>
          <div style={footerContentStyle}>
            <p style={{ ...footerTextStyle, fontWeight: "600", fontSize: "1rem" }}>
              <FaHeart style={footerIconStyle} /> EventHub Community
            </p>
            <p style={footerTextStyle}>
              Connect with event organizers and attendees from around the world
            </p>
            <p style={footerTextStyle}>
              <button 
                onClick={() => navigate("/terms")} 
                style={{...footerLinkStyle, background: "none", border: "none", cursor: "pointer", padding: 0}}
              >
                Terms
              </button> •
              <button 
                onClick={() => navigate("/privacy")} 
                style={{...footerLinkStyle, background: "none", border: "none", cursor: "pointer", margin: "0 0.5rem", padding: 0}}
              >
                Privacy
              </button> •
              <button 
                onClick={() => navigate("/support")} 
                style={{...footerLinkStyle, background: "none", border: "none", cursor: "pointer", padding: 0}}
              >
                Support
              </button>
            </p>
            <p style={{ ...footerTextStyle, marginTop: "0.5rem", fontSize: "0.8rem" }}>
              © {new Date().getFullYear()} EventHub. All rights reserved.
            </p>
          </div>
        </footer>
        
        {/* Event details popup on hover */}
        {hoverEvent && (
          <div 
            className="event-popup"
            style={{
              position: "fixed",
              top: `${hoverPosition.top}px`,
              left: `${hoverPosition.left}px`,
              backgroundColor: colors.white,
              boxShadow: "0 4px 12px rgba(0, 0, 0, 0.15)",
              borderRadius: "8px",
              padding: "12px",
              zIndex: 1050,
              width: "280px",
              pointerEvents: "none",
            }}
          >
            {hoverEvent.image && (
              <div 
                style={{
                  width: "100%",
                  height: "140px",
                  borderRadius: "6px",
                  marginBottom: "10px",
                  backgroundImage: `url(${getImageUrl(hoverEvent.image)})`,
                  backgroundSize: "cover",
                  backgroundPosition: "center",
                  backgroundRepeat: "no-repeat",
                  backgroundColor: "#f0f0f0"
                }}
              />
            )}
            
            <h5 style={{ margin: "0 0 5px 0", color: colors.navy }}>{hoverEvent.title}</h5>
            
            <div style={{ fontSize: "0.85rem", marginBottom: "5px", color: colors.pink, fontWeight: "500" }}>
              <i className="bi bi-clock me-2"></i>
              {new Date(hoverEvent.date).toLocaleString([], {
                weekday: 'short',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
              })}
            </div>
            
            <div style={{ fontSize: "0.85rem", marginBottom: "5px", color: colors.darkGray }}>
              <i className="bi bi-geo-alt-fill me-2"></i>
              {hoverEvent.location}
            </div>
            
            {hoverEvent.category && (
              <div style={{ marginTop: "8px" }}>
                <span
                  style={{
                    fontSize: "0.75rem",
                    backgroundColor: colors.lightGray,
                    color: colors.navy,
                    padding: "3px 8px",
                    borderRadius: "12px",
                    display: "inline-block"
                  }}
                >
                  {hoverEvent.category}
                </span>
              </div>
            )}
            
            {hoverEvent.description && (
              <div style={{ 
                fontSize: "0.8rem", 
                marginTop: "8px", 
                color: colors.darkGray,
                maxHeight: "60px",
                overflow: "hidden",
                textOverflow: "ellipsis",
                display: "-webkit-box",
                WebkitLineClamp: 3,
                WebkitBoxOrient: "vertical"
              }}>
                {hoverEvent.description}
              </div>
            )}
          </div>
        )}
      </div>
    </>
  );
}
</file>

<file path="client/src/pages/Registration.js">
import React, { useState, useEffect } from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";
import axios from "axios";
import { useNavigate } from "react-router-dom"; 
import "bootstrap/dist/css/bootstrap.min.css";
import { FaUser, FaLock, FaEye, FaEyeSlash } from "react-icons/fa";

// Custom color scheme
const colors = {
  primary: "#FF5A8E", // Vibrant pink
  secondary: "#0D1B40", // Deep navy
  accent: "#41C9E2", // Bright turquoise accent
  dark: "#081029", // Very dark navy, almost black
  light: "#FFF5F8", // Very light pink (off-white with pink tint)
  text: "#0D1B40", // Navy for main text
  textLight: "#6C7A9C", // Muted navy for secondary text
  chart: ["#FF5A8E", "#0D1B40", "#41C9E2", "#FF9E6D", "#8676FF", "#44D7B6"]
};

function Registration() {
  const [message, setMessage] = useState(""); 
  const [messageType, setMessageType] = useState(""); 
  const [showPassword, setShowPassword] = useState(false);
  const navigate = useNavigate();
  
  // Animation mounting effect
  const [mounted, setMounted] = useState(false);
  useEffect(() => {
    setMounted(true);
  }, []);

  const initialValues = {
    username: "",
    password: "",
    isAdmin: false,
  };

  const validationSchema = Yup.object().shape({
    username: Yup.string()
      .min(3, "Username must be at least 3 characters")
      .max(15, "Username can't be more than 15 characters")
      .required("Username is required"),
    password: Yup.string()
      .min(4, "Password must be at least 4 characters")
      .max(20, "Password can't be more than 20 characters")
      .required("Password is required"),
  });

  const onSubmit = (data, { setSubmitting, resetForm }) => {
    setMessage("");

    axios
      .post("http://localhost:3001/auth", data)
      .then((response) => {
        setMessage("Successfully registered!");
        setMessageType("success");
        resetForm();

        // Redirect to login after a short delay
        setTimeout(() => {
          navigate("/login");
        }, 1500);
      })
      .catch((error) => {
        setMessage(error.response?.data?.message || "Registration failed. Try again.");
        setMessageType("error");
      })
      .finally(() => setSubmitting(false));
  };

  return (
    <div className="container d-flex justify-content-center align-items-center min-vh-100" 
      style={{ 
        background: `linear-gradient(135deg, ${colors.light} 0%, ${colors.light}ee 100%)`,
        padding: "20px"
      }}
    >
      <div 
        className={`card shadow-lg p-4 col-lg-4 col-md-6 col-sm-10 col-12 ${mounted ? 'animate-in' : ''}`}
        style={{
          backgroundColor: "#ffffff",
          borderRadius: "12px",
          border: "none",
          boxShadow: "0 12px 24px rgba(0,0,0,0.1)",
          transition: "all 0.3s ease-in-out",
          opacity: mounted ? 1 : 0,
          transform: mounted ? "translateY(0)" : "translateY(20px)"
        }}
      >
        <div className="text-center mb-4">
          <h1 className="h3 mb-3 fw-bold" style={{ color: colors.text }}>Create Account</h1>
          <div className="small" style={{ color: colors.textLight }}>
            Sign up for a new account to get started
          </div>
        </div>

        {message && (
          <div 
            className={`alert ${messageType === "success" ? "alert-success" : "alert-danger"} d-flex align-items-center`}
            role="alert"
            style={{ 
              backgroundColor: messageType === "success" ? `${colors.accent}15` : `${colors.primary}15`,
              color: messageType === "success" ? colors.accent : colors.primary,
              border: `1px solid ${messageType === "success" ? colors.accent : colors.primary}22`,
              borderRadius: "8px"
            }}
          >
            <div>{message}</div>
          </div>
        )}

        <Formik 
          initialValues={initialValues} 
          validationSchema={validationSchema} 
          onSubmit={onSubmit}
        >
          {({ isSubmitting }) => (
            <Form>
              {/* Username Field */}
              <div className="mb-4">
                <label className="form-label small fw-bold" style={{ color: colors.text }}>
                  Username
                </label>
                <div className="input-group">
                  <span 
                    className="input-group-text"
                    style={{ 
                      backgroundColor: colors.primary,
                      borderColor: colors.primary,
                      color: "white"
                    }}
                  >
                    <FaUser />
                  </span>
                  <Field 
                    type="text" 
                    className="form-control" 
                    name="username" 
                    placeholder="Create a username" 
                    style={{ 
                      backgroundColor: colors.light,
                      borderColor: "#dee2e6",
                      fontSize: "0.95rem",
                      padding: "0.75rem 0.75rem",
                    }}
                  />
                </div>
                <ErrorMessage 
                  name="username" 
                  component="div" 
                  className="text-danger mt-1" 
                  style={{ fontSize: "0.85rem" }}
                />
              </div>

              {/* Password Field */}
              <div className="mb-4">
                <label className="form-label small fw-bold" style={{ color: colors.text }}>
                  Password
                </label>
                <div className="input-group">
                  <span 
                    className="input-group-text"
                    style={{ 
                      backgroundColor: colors.primary,
                      borderColor: colors.primary,
                      color: "white"
                    }}
                  >
                    <FaLock />
                  </span>
                  <Field 
                    type={showPassword ? "text" : "password"}
                    className="form-control" 
                    name="password" 
                    placeholder="Create a password" 
                    style={{ 
                      backgroundColor: colors.light,
                      borderColor: "#dee2e6",
                      fontSize: "0.95rem",
                      padding: "0.75rem 0.75rem",
                    }}
                  />
                  <button
                    className="btn input-group-text"
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    style={{ 
                      backgroundColor: colors.light,
                      borderColor: "#dee2e6",
                      cursor: "pointer"
                    }}
                  >
                    {showPassword ? <FaEyeSlash /> : <FaEye />}
                  </button>
                </div>
                <ErrorMessage 
                  name="password" 
                  component="div" 
                  className="text-danger mt-1" 
                  style={{ fontSize: "0.85rem" }}
                />
              </div>

              {/* Admin Checkbox */}
              <div className="mb-4">
                <div className="form-check">
                  <Field 
                    type="checkbox" 
                    className="form-check-input" 
                    name="isAdmin" 
                    id="isAdmin" 
                    style={{ 
                      cursor: "pointer",
                      borderColor: colors.textLight,
                      backgroundColor: "white"
                    }}
                  />
                  <label 
                    className="form-check-label" 
                    htmlFor="isAdmin"
                    style={{ 
                      cursor: "pointer",
                      color: colors.text
                    }}
                  >
                    Register as Admin
                  </label>
                </div>
              </div>

              {/* Submit Button */}
              <button 
                type="submit" 
                className="btn w-100 mb-3" 
                disabled={isSubmitting}
                style={{ 
                  backgroundColor: colors.primary,
                  color: "white",
                  padding: "0.75rem",
                  borderRadius: "6px",
                  fontWeight: "500",
                  border: "none",
                  transition: "all 0.2s ease",
                  opacity: isSubmitting ? 0.8 : 1
                }}
              >
                {isSubmitting ? (
                  <>
                    <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Creating Account...</span>
                  </>
                ) : (
                  "Sign Up"
                )}
              </button>

              <div className="text-center mt-3">
                <span className="small" style={{ color: colors.textLight }}>
                  Already have an account?{" "}
                </span>
                <a 
                  href="/login" 
                  className="small text-decoration-none fw-bold"
                  style={{ color: colors.primary }}
                >
                  Sign In
                </a>
              </div>
            </Form>
          )}
        </Formik>
      </div>

      <style jsx>{`
        .animate-in {
          animation: fadeInUp 0.5s ease-out forwards;
        }
        
        @keyframes fadeInUp {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        .form-control:focus,
        .form-check-input:focus,
        .btn:focus {
          box-shadow: 0 0 0 0.25rem ${colors.primary}30;
          border-color: ${colors.primary};
        }
        
        .form-check-input:checked {
          background-color: ${colors.primary};
          border-color: ${colors.primary};
        }
      `}</style>
    </div>
  );
}

export default Registration;
</file>

<file path="server/models/Events.js">
module.exports = (sequelize, DataTypes) => {
    const Events = sequelize.define("Events", {
      title: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      location: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      description: {
        type: DataTypes.TEXT,
        allowNull: false,
      },
      date: {
        type: DataTypes.DATEONLY,
        allowNull: false,
      },
      time: {
        type: DataTypes.TIME,
        allowNull: false,
      },
      category: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      image: {
        type: DataTypes.STRING,
        allowNull: true,
      },
      username: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      // New fields for paid events support
      price: {
        type: DataTypes.DECIMAL(10, 2),
        allowNull: false,
        defaultValue: 0.00,
      },
      isPaid: {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      ticketsAvailable: {
        type: DataTypes.INTEGER,
        allowNull: true,
      },
      registrationDeadline: {
        type: DataTypes.DATE,
        allowNull: true,
      },
      maxRegistrations: {
        type: DataTypes.INTEGER,
        allowNull: true,
      },
      minRegistrations: {
        type: DataTypes.INTEGER,
        allowNull: true,
        defaultValue: 1,
      },
      status: {
        type: DataTypes.ENUM('active', 'cancelled', 'completed', 'draft'),
        defaultValue: 'active',
      },
    });
  
    // Define associations
    Events.associate = (models) => {
      Events.hasMany(models.Reviews, {
        onDelete: "cascade",
      });
      
      // Add association for registrations
      Events.hasMany(models.Registrations, {
        onDelete: "cascade",
      });
      
      // Add association with user who created the event
      Events.belongsTo(models.Users, {
        foreignKey: 'userId',
        as: 'organizer',
        allowNull: true,
      });
    };
  
    return Events;
  };
</file>

<file path="client/src/pages/Login.js">
import React, { useContext, useState, useEffect } from "react";
import axios from "axios";
import { useNavigate, Link } from "react-router-dom";
import { AuthContext } from "../helpers/AuthContext";
import { FaUser, FaLock, FaEye, FaEyeSlash, FaArrowLeft } from "react-icons/fa";
import "bootstrap/dist/css/bootstrap.min.css";

// Theme colors - customize these to match your brand
const theme = {
  primary: "#4361ee", // Main brand color
  secondary: "#3f37c9", // Secondary/accent color
  success: "#4cc9f0", // Success messages
  danger: "#f72585", // Error messages
  light: "#f8f9fa", // Background/light elements
  dark: "#212529", // Text/dark elements
  cardBg: "#ffffff", // Card background
  inputBg: "#f8f9fa", // Input background
};

function Login() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [message, setMessage] = useState(null);
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const { setAuthState } = useContext(AuthContext);
  const navigate = useNavigate();

  // Animation mounting effect
  const [mounted, setMounted] = useState(false);
  useEffect(() => {
    setMounted(true);
  }, []);

  const validateFields = () => {
    if (!username.trim()) {
      setMessage({ text: "Username is required", type: "danger" });
      return false;
    }
    if (!password) {
      setMessage({ text: "Password is required", type: "danger" });
      return false;
    }
    return true;
  };

  const login = async (e) => {
    e && e.preventDefault(); // Handle form submission properly
    if (!validateFields()) return;
  
    setLoading(true);
    setMessage(null);
  
    try {
      const { data } = await axios.post("http://localhost:3001/auth/login", { 
        username: username.trim(), 
        password 
      });
  
      if (data?.error) {
        setMessage({ text: data.error, type: "danger" });
      } else {
        setMessage({ text: "Login successful!", type: "success" });
  
        // Store token in localStorage with expiration
        localStorage.setItem("accessToken", data.token);
        const expiryTime = new Date().getTime() + (24 * 60 * 60 * 1000); // 24 hours
        localStorage.setItem("tokenExpiry", expiryTime);
  
        // Set the AuthContext
        setAuthState({
          username: data.user.username || username,
          id: data.user.id,
          isAdmin: data.user.isAdmin,
          status: true,
        });
  
        // Redirect after successful login with slight delay for feedback
        setTimeout(() => {
          navigate(data.user.isAdmin ? "/admin" : "/home");
        }, 800);
      }
    } catch (error) {
      const errorMessage = error.response?.data?.error || 
        "Authentication failed. Please check your credentials.";
      setMessage({ text: errorMessage, type: "danger" });
      console.error("Login error:", error);
    } finally {
      setLoading(false);
    }
  };

  // Handle enter key submission
  const handleKeyPress = (e) => {
    if (e.key === "Enter") {
      login();
    }
  };
  
  return (
    <div className="container d-flex justify-content-center align-items-center min-vh-100" 
      style={{ 
        background: `linear-gradient(135deg, ${theme.light} 0%, ${theme.light}ee 100%)`,
        padding: "20px"
      }}>
      <div 
        className={`card shadow-lg p-4 col-lg-4 col-md-6 col-sm-10 col-12 ${mounted ? 'animate-in' : ''}`}
        style={{ 
          backgroundColor: theme.cardBg,
          borderRadius: "12px",
          border: "none",
          boxShadow: "0 12px 24px rgba(0,0,0,0.1)",
          transition: "all 0.3s ease-in-out",
          opacity: mounted ? 1 : 0,
          transform: mounted ? "translateY(0)" : "translateY(20px)"
        }}
      >
        {/* Back to Landing Page Button */}
        <div className="text-start mb-3">
          <Link 
            to="/" 
            className="btn btn-sm d-inline-flex align-items-center"
            style={{ 
              color: theme.primary,
              fontWeight: "500",
              padding: "6px 12px",
              borderRadius: "6px",
              backgroundColor: `${theme.primary}10`,
              transition: "all 0.2s ease"
            }}
          >
            <FaArrowLeft size={14} className="me-2" />
            Back to Home
          </Link>
        </div>
        
        <div className="text-center mb-4">
          <h1 className="h3 mb-3 fw-bold" style={{ color: theme.dark }}>Sign In</h1>
          <div className="small text-muted">Please enter your credentials to access your account</div>
        </div>

        {message && (
          <div 
            className={`alert alert-${message.type} d-flex align-items-center`}
            role="alert"
            style={{ 
              backgroundColor: message.type === "danger" ? `${theme.danger}15` : `${theme.success}15`,
              color: message.type === "danger" ? theme.danger : theme.success,
              border: `1px solid ${message.type === "danger" ? theme.danger : theme.success}22`,
              borderRadius: "8px"
            }}
          >
            <div>{message.text}</div>
          </div>
        )}

        <form onSubmit={login}>
          {/* Username Field with Icon */}
          <div className="mb-4">
            <label className="form-label small fw-bold" style={{ color: theme.dark }}>
              Username
            </label>
            <div className="input-group">
              <span 
                className="input-group-text"
                style={{ 
                  backgroundColor: theme.primary,
                  borderColor: theme.primary,
                  color: "white"
                }}
              >
                <FaUser />
              </span>
              <input
                type="text"
                className="form-control"
                placeholder="Enter your username"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                onKeyPress={handleKeyPress}
                style={{ 
                  backgroundColor: theme.inputBg,
                  borderColor: "#dee2e6",
                  fontSize: "0.95rem",
                  padding: "0.75rem 0.75rem",
                }}
                autoFocus
              />
            </div>
          </div>

          {/* Password Field with Icon and Toggle */}
          <div className="mb-4">
            <label className="form-label small fw-bold" style={{ color: theme.dark }}>
              Password
            </label>
            <div className="input-group">
              <span 
                className="input-group-text"
                style={{ 
                  backgroundColor: theme.primary,
                  borderColor: theme.primary,
                  color: "white"
                }}
              >
                <FaLock />
              </span>
              <input
                type={showPassword ? "text" : "password"}
                className="form-control"
                placeholder="Enter your password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                onKeyPress={handleKeyPress}
                style={{ 
                  backgroundColor: theme.inputBg,
                  borderColor: "#dee2e6",
                  fontSize: "0.95rem",
                  padding: "0.75rem 0.75rem",
                }}
              />
              <button
                className="btn input-group-text"
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                style={{ 
                  backgroundColor: theme.inputBg,
                  borderColor: "#dee2e6",
                  cursor: "pointer"
                }}
              >
                {showPassword ? <FaEyeSlash /> : <FaEye />}
              </button>
            </div>
          </div>

          <div className="d-flex justify-content-between align-items-center mb-4">
            <div className="form-check">
              <input 
                className="form-check-input" 
                type="checkbox" 
                id="rememberMe" 
                style={{ 
                  cursor: "pointer",
                  borderColor: "#ced4da" 
                }}
              />
              <label 
                className="form-check-label small" 
                htmlFor="rememberMe"
                style={{ 
                  cursor: "pointer",
                  color: theme.dark 
                }}
              >
                Remember me
              </label>
            </div>
            <Link 
              to="/forgot-password" 
              className="small text-decoration-none"
              style={{ color: theme.primary }}
            >
              Forgot password?
            </Link>
          </div>

          <button 
            className="btn w-100 mb-3" 
            type="submit" 
            disabled={loading}
            style={{ 
              backgroundColor: theme.primary,
              color: "white",
              padding: "0.75rem",
              borderRadius: "6px",
              fontWeight: "500",
              border: "none",
              transition: "all 0.2s ease",
              opacity: loading ? 0.8 : 1
            }}
          >
            {loading ? (
              <>
                <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                <span>Authenticating...</span>
              </>
            ) : (
              "Sign In"
            )}
          </button>
        </form>

        <div className="text-center mt-3">
          <span className="small text-muted">Don't have an account? </span>
          <Link 
            to="/registration" 
            className="small text-decoration-none fw-bold"
            style={{ color: theme.primary }}
          >
            Create one
          </Link>
        </div>
      </div>

      <style jsx>{`
        .animate-in {
          animation: fadeInUp 0.5s ease-out forwards;
        }
        
        @keyframes fadeInUp {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        .form-control:focus, .btn:focus {
          box-shadow: 0 0 0 0.25rem ${theme.primary}30;
          border-color: ${theme.primary};
        }
      `}</style>
    </div>
  );
}

export default Login;
</file>

<file path="client/src/pages/Response.js">
import React, { useContext, useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
import "bootstrap/dist/css/bootstrap.min.css";
import { FaCalendarAlt, FaMapMarkerAlt, FaArrowLeft, FaTrashAlt, FaReply, 
         FaChevronUp, FaPaperPlane, FaUser, FaStar, FaCommentSlash, 
         FaHeart, FaAlignLeft, FaTags, FaClock, FaEdit, FaRobot,
         FaChartPie, FaExclamationTriangle, FaCheckCircle, FaMagic,
         FaRegLightbulb, FaRegSmile, FaRegMeh, FaRegFrown } from "react-icons/fa";
import { AuthContext } from "../helpers/AuthContext";

export default function Response() {
    const { id } = useParams();
    const navigate = useNavigate();
    const [eventData, setEventData] = useState(null);
    const [reviews, setReviews] = useState([]);
    const [responses, setResponses] = useState({});
    const [loading, setLoading] = useState(true);
    const [expandedReview, setExpandedReview] = useState(null);
    const { authState } = useContext(AuthContext);
    const [responseTemplates, setResponseTemplates] = useState([]);
    const [activeTab, setActiveTab] = useState('reviews');
    const [showSuccess, setShowSuccess] = useState(false);
    const [successMessage, setSuccessMessage] = useState("");
    const [processingAI, setProcessingAI] = useState(false);
    const [stats, setStats] = useState({
        averageRating: 0,
        totalReviews: 0,
        respondedCount: 0,
        pendingCount: 0,
        sentimentBreakdown: {
            positive: 0,
            neutral: 0,
            negative: 0
        }
    });

    // Custom color constants
    const colors = {
        navy: "#001F3F",
        coral: "#FF6B6B",
        white: "#FFFFFF",
        lightGray: "#F5F7FA",
        gray: "#E2E8F0",
        darkGray: "#718096",
        errorRed: "#FF4D6A",
        successGreen: "#2DD4BF"
    };

    // Define response templates
    useEffect(() => {
        setResponseTemplates([
            {
                name: "Thank You (Positive)",
                text: "Thank you for your wonderful feedback! We're thrilled to hear you enjoyed the event and appreciate you taking the time to share your experience with us. We hope to see you at our future events!",
                sentiment: "positive"
            },
            {
                name: "Neutral Response",
                text: "Thank you for your feedback. We appreciate you taking the time to share your thoughts on the event. Your input helps us improve our future events. If you have any additional suggestions, please feel free to reach out to us.",
                sentiment: "neutral"
            },
            {
                name: "Apology (Negative)",
                text: "We sincerely apologize that your experience didn't meet expectations. We appreciate your feedback and take your concerns seriously. We're working to address these issues for future events. Please contact us directly if you'd like to discuss your experience further.",
                sentiment: "negative"
            },
            {
                name: "General Response",
                text: "Thank you for your review. We value all feedback as it helps us continue to improve our events. We hope to have the opportunity to welcome you to another event in the future.",
                sentiment: "any"
            }
        ]);
    }, []);

    useEffect(() => {
        const fetchEventDetails = async () => {
            setLoading(true);
            try {
                const response = await axios.get(`http://localhost:3001/events/${id}`);
                setEventData(response.data.event || null);
                
                const reviewsData = response.data.reviews || [];
                setReviews(reviewsData);
                
                // Calculate stats
                calculateStats(reviewsData);
            } catch (err) {
                console.error("Error fetching event details:", err);
            } finally {
                setLoading(false);
            }
        };
        fetchEventDetails();
    }, [id]);

    // Calculate review statistics
    const calculateStats = (reviewsData) => {
        if (!reviewsData.length) {
            setStats({
                averageRating: 0,
                totalReviews: 0,
                respondedCount: 0,
                pendingCount: 0,
                sentimentBreakdown: {
                    positive: 0,
                    neutral: 0,
                    negative: 0
                }
            });
            return;
        }

        const totalReviews = reviewsData.length;
        const totalRating = reviewsData.reduce((sum, review) => sum + review.rating, 0);
        const averageRating = (totalRating / totalReviews).toFixed(1);
        
        const respondedCount = reviewsData.filter(review => review.admin_response).length;
        const pendingCount = totalReviews - respondedCount;
        
        // Count sentiment distribution
        const sentimentBreakdown = {
            positive: reviewsData.filter(review => review.sentiment === 'positive').length,
            neutral: reviewsData.filter(review => review.sentiment === 'neutral').length,
            negative: reviewsData.filter(review => review.sentiment === 'negative').length
        };

        setStats({
            averageRating,
            totalReviews,
            respondedCount,
            pendingCount,
            sentimentBreakdown
        });
    };

    const handleResponseChange = (reviewId, text) => {
        setResponses(prev => ({ ...prev, [reviewId]: text }));
    };

    const submitResponse = async (reviewId, e) => {
        e.preventDefault();
        if (!responses[reviewId]?.trim()) {
            alert("Response cannot be empty.");
            return;
        }

        const accessToken = localStorage.getItem("accessToken");
        if (!accessToken) {
            alert("You must be logged in as an admin to respond.");
            return;
        }

        try {
            const { data } = await axios.put(
                `http://localhost:3001/reviews/respond/${reviewId}`,
                { adminResponse: responses[reviewId] },
                { headers: { Authorization: `Bearer ${accessToken}` } }
            );

            // Update reviews data
            const updatedReviews = reviews.map(review =>
                review.id === reviewId ? { ...review, admin_response: data.response } : review
            );
            
            setReviews(updatedReviews);
            setResponses(prev => ({ ...prev, [reviewId]: "" }));
            setExpandedReview(null); // Collapse after submitting
            
            // Recalculate stats
            calculateStats(updatedReviews);
            
            // Show success message
            setSuccessMessage("Response submitted successfully!");
            setShowSuccess(true);
            setTimeout(() => setShowSuccess(false), 3000);
            
        } catch (err) {
            console.error("Error submitting response:", err);
            console.log("Error response:", err.response?.data || "No response data");
            alert(`Failed to submit response: ${err.response?.data?.error || err.message}`);
        }
    };

    const applyResponseTemplate = (reviewId, templateIndex) => {
        if (templateIndex >= 0 && templateIndex < responseTemplates.length) {
            setResponses(prev => ({ 
                ...prev, 
                [reviewId]: responseTemplates[templateIndex].text 
            }));
        }
    };

    const generateAIResponse = async (reviewId) => {
        setProcessingAI(true);
        
        try {
            // Get the review
            const review = reviews.find(r => r.id === reviewId);
            if (!review) {
                throw new Error("Review not found");
            }
            
            // Generate appropriate response based on sentiment and review content
            let aiResponse = "";
            
            if (review.sentiment === "positive") {
                aiResponse = "Thank you for your wonderful feedback! We're thrilled to hear you enjoyed the event and appreciate you taking the time to share your positive experience. We hope to see you at our next event!";
            } else if (review.sentiment === "negative") {
                aiResponse = "We sincerely appreciate your feedback and apologize for any aspects of the event that didn't meet your expectations. Your input is valuable as we continuously work to improve our events. We'd love to discuss your concerns further - please feel free to reach out directly to our team.";
            } else {
                aiResponse = "Thank you for your feedback! We appreciate you taking the time to share your thoughts about the event. Your insights help us improve future experiences for all attendees. We hope to see you at upcoming events!";
            }
            
            // Add personalization based on the rating
            if (review.rating >= 4) {
                aiResponse += " We're pleased to see you gave us a high rating!";
            } else if (review.rating <= 2) {
                aiResponse += " We understand your rating reflects areas where we can improve, and we take that seriously.";
            }
            
            // Set the response in the form
            setResponses(prev => ({ ...prev, [reviewId]: aiResponse }));
            
        } catch (err) {
            console.error("Error generating AI response:", err);
            alert("Failed to generate AI response. Please try again.");
        } finally {
            setProcessingAI(false);
        }
    };

    const autoRespondToAll = async () => {
        const unrespondedReviews = reviews.filter(review => !review.admin_response);
        
        if (unrespondedReviews.length === 0) {
            alert("All reviews already have responses!");
            return;
        }
        
        if (!window.confirm(`Auto-respond to ${unrespondedReviews.length} pending reviews?`)) {
            return;
        }
        
        setProcessingAI(true);
        const accessToken = localStorage.getItem("accessToken");
        
        try {
            let updatedReviews = [...reviews];
            
            for (const review of unrespondedReviews) {
                // Generate response based on sentiment
                let aiResponse = "";
                
                if (review.sentiment === "positive") {
                    aiResponse = "Thank you for your wonderful feedback! We're thrilled to hear you enjoyed the event and appreciate you taking the time to share your positive experience. We hope to see you at our next event!";
                } else if (review.sentiment === "negative") {
                    aiResponse = "We sincerely appreciate your feedback and apologize for any aspects of the event that didn't meet your expectations. Your input is valuable as we continuously work to improve our events. We'd love to discuss your concerns further - please feel free to reach out directly to our team.";
                } else {
                    aiResponse = "Thank you for your feedback! We appreciate you taking the time to share your thoughts about the event. Your insights help us improve future experiences for all attendees. We hope to see you at upcoming events!";
                }
                
                // Add personalization based on the rating
                if (review.rating >= 4) {
                    aiResponse += " We're pleased to see you gave us a high rating!";
                } else if (review.rating <= 2) {
                    aiResponse += " We understand your rating reflects areas where we can improve, and we take that seriously.";
                }
                
                // Submit the response
                await axios.put(
                    `http://localhost:3001/reviews/respond/${review.id}`,
                    { adminResponse: aiResponse },
                    { headers: { Authorization: `Bearer ${accessToken}` } }
                );
                
                // Update local state
                updatedReviews = updatedReviews.map(r => 
                    r.id === review.id ? { ...r, admin_response: aiResponse } : r
                );
            }
            
            setReviews(updatedReviews);
            calculateStats(updatedReviews);
            
            // Show success message
            setSuccessMessage(`Successfully responded to ${unrespondedReviews.length} reviews!`);
            setShowSuccess(true);
            setTimeout(() => setShowSuccess(false), 3000);
            
        } catch (err) {
            console.error("Error auto-responding to reviews:", err);
            alert("Failed to auto-respond to all reviews. Please try again.");
        } finally {
            setProcessingAI(false);
        }
    };

    const deleteEvent = async () => {
        if (!window.confirm("Are you sure you want to delete this event? This action cannot be undone.")) return;

        const accessToken = localStorage.getItem("accessToken");
        if (!accessToken) {
            alert("You must be logged in as an admin to delete this event.");
            return;
        }

        try {
            await axios.delete(`http://localhost:3001/events/${id}`, {
                headers: { Authorization: `Bearer ${accessToken}` },
            });

            alert("Event deleted successfully!");
            navigate("/admin");
        } catch (err) {
            console.error("Error deleting event:", err);
            alert("Failed to delete event. Try again.");
        }
    };

    const editEvent = () => {
        navigate(`/admin/edit-event/${id}`);
    };

    const toggleExpandReview = (reviewId) => {
        setExpandedReview(expandedReview === reviewId ? null : reviewId);
    };

    // Function to correct the image path - following the same pattern from AdminDashboard
    const getImageUrl = (imagePath) => {
        if (!imagePath) return null;
        
        // If the path already starts with http, return as is
        if (imagePath.startsWith('http')) return imagePath;
        
        // If the path begins with "/uploads/events/", remove the leading slash
        if (imagePath.startsWith('/uploads/events/')) {
            return `http://localhost:3001${imagePath}`;
        }
        
        // For any other case, just append the path to the base URL
        return `http://localhost:3001/${imagePath}`;
    };

    // Helper function to get sentiment badge color
    const getSentimentColor = (sentiment) => {
        if (!sentiment) return colors.darkGray;
        sentiment = sentiment.toLowerCase();
        if (sentiment.includes("positive")) return "#4CAF50"; // Green
        if (sentiment.includes("negative")) return "#F44336"; // Red  
        return "#FF9800"; // Orange for neutral
    };

    // Helper function to get the sentiment icon
    const getSentimentIcon = (sentiment) => {
        if (!sentiment) return <FaRegMeh />;
        sentiment = sentiment.toLowerCase();
        if (sentiment.includes("positive")) return <FaRegSmile />;
        if (sentiment.includes("negative")) return <FaRegFrown />;
        return <FaRegMeh />;
    };

    // Helper function to format date
    const formatDate = (dateString) => {
        if (!dateString) return "N/A";
        return new Date(dateString).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    };

    // Footer component from Create Event page
    const Footer = () => {
        const currentYear = new Date().getFullYear();
        
        return (
          <footer style={{ 
            backgroundColor: colors.navy, 
            color: colors.white, 
            padding: "1.5rem", 
            textAlign: "center", 
            width: "100%", 
            boxShadow: "0 -5px 10px rgba(0,0,0,0.05)" 
          }}>
            <div style={{ 
              display: "flex", 
              flexDirection: "column", 
              alignItems: "center", 
              justifyContent: "center", 
              maxWidth: "800px", 
              margin: "0 auto" 
            }}>
              <p style={{ 
                margin: "0.5rem 0", 
                fontWeight: "600", 
                fontSize: "1rem" 
              }}>
                <FaHeart style={{ color: colors.coral, marginRight: "0.5rem" }} /> EventHub Community
              </p>
              <p style={{ margin: "0.5rem 0", fontSize: "0.9rem", color: colors.lightGray }}>
                Connect with event organizers and attendees from around the world
              </p>
              <p style={{ margin: "0.5rem 0", fontSize: "0.9rem", color: colors.lightGray }}>
                <button 
                  onClick={() => navigate("/terms")} 
                  style={{
                    color: colors.coral, 
                    textDecoration: "none", 
                    fontWeight: "500", 
                    transition: "color 0.3s ease",
                    background: "none", 
                    border: "none", 
                    cursor: "pointer", 
                    padding: 0
                  }}
                >
                  Terms
                </button> •
                <button 
                  onClick={() => navigate("/privacy")} 
                  style={{
                    color: colors.coral, 
                    textDecoration: "none", 
                    fontWeight: "500", 
                    transition: "color 0.3s ease",
                    background: "none", 
                    border: "none", 
                    cursor: "pointer", 
                    margin: "0 0.5rem", 
                    padding: 0
                  }}
                >
                  Privacy
                </button> •
                <button 
                  onClick={() => navigate("/support")} 
                  style={{
                    color: colors.coral, 
                    textDecoration: "none", 
                    fontWeight: "500", 
                    transition: "color 0.3s ease",
                    background: "none", 
                    border: "none", 
                    cursor: "pointer", 
                    padding: 0
                  }}
                >
                  Support
                </button>
              </p>
              <p style={{ marginTop: "0.5rem", fontSize: "0.8rem", color: colors.lightGray }}>
                © {currentYear} EventHub. All rights reserved.
              </p>
            </div>
          </footer>
        );
    };

    const renderOverviewTab = () => {
        const completionPercentage = stats.totalReviews > 0
            ? Math.round((stats.respondedCount / stats.totalReviews) * 100)
            : 0;

        return (
            <div className="tab-pane active">
                <div className="row row-cols-1 row-cols-md-4 g-4 mb-4">
                    {/* Overall Rating Card */}
                    <div className="col">
                        <div className="card h-100 shadow-sm">
                            <div className="card-body text-center">
                                <h5 className="card-title mb-1" style={{ color: colors.navy }}>Overall Rating</h5>
                                <div style={{ fontSize: '2.2rem', fontWeight: 'bold', color: colors.coral }}>
                                    {stats.averageRating}
                                    <span style={{ fontSize: '1.3rem', verticalAlign: 'text-top', marginLeft: '3px' }}>
                                        / 5
                                    </span>
                                </div>
                                <div className="text-warning">
                                    {Array.from({ length: 5 }, (_, i) => (
                                        <FaStar 
                                            key={i} 
                                            style={{ 
                                                color: i < Math.round(stats.averageRating) ? '#FFD700' : '#E0E0E0',
                                                marginRight: '2px'
                                            }}
                                        />
                                    ))}
                                </div>
                                <p className="mt-2 text-muted">
                                    From {stats.totalReviews} {stats.totalReviews === 1 ? 'review' : 'reviews'}
                                </p>
                            </div>
                        </div>
                    </div>

                    {/* Review Status Card */}
                    <div className="col">
                        <div className="card h-100 shadow-sm">
                            <div className="card-body text-center">
                                <h5 className="card-title mb-1" style={{ color: colors.navy }}>Response Status</h5>
                                <div className="progress mt-3" style={{ height: '20px' }}>
                                    <div 
                                        className="progress-bar bg-success" 
                                        role="progressbar" 
                                        style={{ width: `${completionPercentage}%` }} 
                                        aria-valuenow={completionPercentage} 
                                        aria-valuemin="0" 
                                        aria-valuemax="100"
                                    >
                                        {completionPercentage}%
                                    </div>
                                </div>
                                <div className="d-flex justify-content-between mt-2">
                                    <span style={{ color: colors.successGreen }}>
                                        <FaCheckCircle className="me-1" /> {stats.respondedCount} Responded
                                    </span>
                                    <span style={{ color: colors.coral }}>
                                        <FaExclamationTriangle className="me-1" /> {stats.pendingCount} Pending
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Sentiment Breakdown Card */}
                    <div className="col">
                        <div className="card h-100 shadow-sm">
                            <div className="card-body text-center">
                                <h5 className="card-title mb-3" style={{ color: colors.navy }}>Sentiment Breakdown</h5>
                                <div className="d-flex justify-content-between">
                                    <div>
                                        <FaRegSmile style={{ color: '#4CAF50', fontSize: '1.5rem' }} />
                                        <div style={{ fontWeight: 'bold', color: '#4CAF50' }}>
                                            {stats.sentimentBreakdown.positive}
                                        </div>
                                        <div className="text-muted" style={{ fontSize: '0.8rem' }}>Positive</div>
                                    </div>
                                    <div>
                                        <FaRegMeh style={{ color: '#FF9800', fontSize: '1.5rem' }} />
                                        <div style={{ fontWeight: 'bold', color: '#FF9800' }}>
                                            {stats.sentimentBreakdown.neutral}
                                        </div>
                                        <div className="text-muted" style={{ fontSize: '0.8rem' }}>Neutral</div>
                                    </div>
                                    <div>
                                        <FaRegFrown style={{ color: '#F44336', fontSize: '1.5rem' }} />
                                        <div style={{ fontWeight: 'bold', color: '#F44336' }}>
                                            {stats.sentimentBreakdown.negative}
                                        </div>
                                        <div className="text-muted" style={{ fontSize: '0.8rem' }}>Negative</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Actions Card */}
                    <div className="col">
                        <div className="card h-100 shadow-sm">
                            <div className="card-body d-flex flex-column justify-content-between">
                                <h5 className="card-title mb-3" style={{ color: colors.navy }}>Quick Actions</h5>
                                <div className="d-grid gap-2">
                                    <button 
                                        className="btn" 
                                        onClick={autoRespondToAll}
                                        disabled={processingAI || stats.pendingCount === 0}
                                        style={{ 
                                            backgroundColor: colors.navy, 
                                            color: "white",
                                            opacity: (processingAI || stats.pendingCount === 0) ? 0.65 : 1
                                        }}
                                    >
                                        {processingAI ? (
                                            <>
                                                <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                                Processing...
                                            </>
                                        ) : (
                                            <>
                                                <FaMagic className="me-2" />
                                                Auto-Respond All ({stats.pendingCount})
                                            </>
                                        )}
                                    </button>
                                    <button 
                                        className="btn" 
                                        onClick={editEvent}
                                        style={{ 
                                            backgroundColor: colors.coral, 
                                            color: "white" 
                                        }}
                                    >
                                        <FaEdit className="me-2" />Edit Event
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                {/* Recent Unanswered Reviews */}
                {stats.pendingCount > 0 && (
                    <div className="card shadow-sm mt-4">
                        <div className="card-header" style={{ backgroundColor: colors.lightGray }}>
                            <h5 className="mb-0" style={{ color: colors.navy }}>
                                <FaExclamationTriangle className="me-2" style={{ color: colors.coral }} />
                                Priority Reviews Needing Response
                            </h5>
                        </div>
                        <div className="card-body">
                            <div className="table-responsive">
                                <table className="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>User</th>
                                            <th>Rating</th>
                                            <th>Sentiment</th>
                                            <th>Review</th>
                                            <th>Date</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {reviews
                                            .filter(review => !review.admin_response)
                                            .slice(0, 5)
                                            .map(review => (
                                                <tr key={review.id}>
                                                    <td>
                                                        <div className="d-flex align-items-center">
                                                            <div 
                                                                className="rounded-circle me-2 d-flex align-items-center justify-content-center"
                                                                style={{ 
                                                                    width: '30px', 
                                                                    height: '30px', 
                                                                    backgroundColor: colors.coral, 
                                                                    color: 'white' 
                                                                }}
                                                            >
                                                                {review.username?.charAt(0).toUpperCase()}
                                                            </div>
                                                            <span>{review.username}</span>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <span style={{ color: colors.navy }}>
                                                            {review.rating} 
                                                            <span className="ms-1" style={{ color: "#FFD700" }}>
                                                                {"★".repeat(review.rating)}
                                                            </span>
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <span 
                                                            className="badge rounded-pill" 
                                                            style={{
                                                                backgroundColor: getSentimentColor(review.sentiment),
                                                                color: "white"
                                                            }}
                                                        >
                                                            {getSentimentIcon(review.sentiment)}
                                                            <span className="ms-1">{review.sentiment}</span>
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <div style={{ maxWidth: "300px", whiteSpace: "nowrap", overflow: "hidden", textOverflow: "ellipsis" }}>
                                                            {review.review_text}
                                                        </div>
                                                    </td>
                                                    <td>{formatDate(review.createdAt)}</td>
                                                    <td>
                                                        <button 
                                                            className="btn btn-sm"
                                                            onClick={() => {
                                                                setActiveTab('reviews');
                                                                setTimeout(() => {
                                                                    toggleExpandReview(review.id);
                                                                    // Scroll to the review
                                                                    const element = document.getElementById(`review-${review.id}`);
                                                                    if (element) {
                                                                        element.scrollIntoView({ behavior: 'smooth' });
                                                                    }
                                                                }, 100);
                                                            }}
                                                            style={{ backgroundColor: colors.navy, color: "white" }}
                                                        >
                                                            <FaReply className="me-1" /> Respond
                                                        </button>
                                                    </td>
                                                </tr>
                                            ))}
                                    </tbody>
                                </table>
                            </div>
                            {stats.pendingCount > 5 && (
                                <div className="text-center mt-3">
                                    <button 
                                        className="btn btn-sm"
                                        onClick={() => setActiveTab('reviews')}
                                        style={{ backgroundColor: colors.navy, color: "white" }}
                                    >
                                        View All Pending Reviews
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                )}
            </div>
        );
    };

    const renderReviewsTab = () => {
        return (
            <div className="tab-pane active">
                <div className="d-flex justify-content-between align-items-center mb-3">
                    <h5 style={{ color: colors.navy }}>
                        Review Management
                    </h5>
                    {stats.pendingCount > 0 && (
                        <button 
                            className="btn btn-sm"
                            onClick={autoRespondToAll}
                            disabled={processingAI}
                            style={{ 
                                backgroundColor: colors.navy, 
                                color: "white",
                                opacity: processingAI ? 0.65 : 1
                            }}
                        >
                            {processingAI ? (
                                <>
                                    <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    Processing...
                                </>
                            ) : (
                                <>
                                    <FaRobot className="me-2" />
                                    Auto-Respond to All Pending Reviews
                                </>
                            )}
                        </button>
                    )}
                </div>

                {/* Filter tabs */}
                <ul className="nav nav-tabs mb-3">
                    <li className="nav-item">
                        <button 
                            className="nav-link active" 
                            style={{ color: colors.navy }}
                            onClick={() => {/* Handle filter change */}}
                        >
                            All Reviews ({reviews.length})
                        </button>
                    </li>
                    <li className="nav-item">
                        <button 
                            className="nav-link" 
                            style={{ color: colors.coral }}
                            onClick={() => {/* Handle filter change */}}
                        >
                            Pending ({stats.pendingCount})
                        </button>
                    </li>
                    <li className="nav-item">
                        <button 
                            className="nav-link" 
                            style={{ color: colors.successGreen }}
                            onClick={() => {/* Handle filter change */}}
                        >
                            Responded ({stats.respondedCount})
                        </button>
                    </li>
                </ul>

                {reviews.length > 0 ? (
                    <div className="review-list">
                        {reviews.map(review => (
                            <div id={`review-${review.id}`} key={review.id} className="card mb-3 border-0 shadow-sm">
                                <div className="card-header bg-white d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>
                                            <FaUser className="me-2" style={{ color: colors.coral }} />
                                            {review.username}
                                        </strong>
                                        <span className="ms-3">
                                            {Array.from({ length: 5 }, (_, i) => (
                                                <FaStar 
                                                    key={i} 
                                                    style={{ color: i < review.rating ? '#FFD700' : '#E0E0E0' }}
                                                />
                                            ))}
                                        </span>
                                        <span className="ms-3 text-muted">
                                            {formatDate(review.createdAt)}
                                        </span>
                                    </div>
                                    <span 
                                        className="badge rounded-pill"
                                        style={{ 
                                            backgroundColor: getSentimentColor(review.sentiment),
                                            color: "white",
                                            padding: "5px 10px"
                                        }}
                                    >
                                        {getSentimentIcon(review.sentiment)}
                                        <span className="ms-1">{review.sentiment || "Unknown"}</span>
                                    </span>
                                </div>
                                <div className="card-body">
                                    <p className="card-text">{review.review_text}</p>
                                    
                                    {review.admin_response && (
                                        <div className="admin-response mt-3 p-3 rounded" 
                                            style={{ backgroundColor: colors.lightGray }}>
                                            <p className="mb-1">
                                                <strong>
                                                    <FaReply className="me-2" style={{ color: colors.navy }} />
                                                    Admin Response:
                                                </strong>
                                            </p>
                                            <p className="mb-0 ms-4">{review.admin_response}</p>
                                        </div>
                                    )}
                                    
                                    {!review.admin_response && authState.isAdmin && (
                                        <div className="mt-3">
                                            <button
                                                className="btn btn-sm"
                                                onClick={() => toggleExpandReview(review.id)}
                                                style={{ 
                                                    backgroundColor: expandedReview === review.id ? colors.coral : "transparent",
                                                    borderColor: expandedReview === review.id ? colors.coral : colors.navy,
                                                    color: expandedReview === review.id ? "white" : colors.navy
                                                }}
                                            >
                                                {expandedReview === review.id ? (
                                                    <><FaChevronUp className="me-2" />Cancel</>
                                                ) : (
                                                    <><FaReply className="me-2" />Respond</>
                                                )}
                                            </button>
                                            
                                            {expandedReview === review.id && (
                                                <div className="mt-3">
                                                    <div className="d-flex mb-2">
                                                        <button
                                                            className="btn btn-sm me-2"
                                                            onClick={() => generateAIResponse(review.id)}
                                                            disabled={processingAI}
                                                            style={{ 
                                                                backgroundColor: colors.navy, 
                                                                color: "white",
                                                                opacity: processingAI ? 0.65 : 1
                                                            }}
                                                        >
                                                            {processingAI ? (
                                                                <>
                                                                    <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                                                    Generating...
                                                                </>
                                                            ) : (
                                                                <>
                                                                    <FaRobot className="me-2" />
                                                                    Generate AI Response
                                                                </>
                                                            )}
                                                        </button>
                                                        <div className="dropdown">
                                                            <button 
                                                                className="btn btn-sm btn-outline-secondary dropdown-toggle"
                                                                type="button"
                                                                data-bs-toggle="dropdown"
                                                                aria-expanded="false"
                                                            >
                                                                <FaRegLightbulb className="me-1" /> Templates
                                                            </button>
                                                            <ul className="dropdown-menu">
                                                                {responseTemplates.map((template, index) => (
                                                                    <li key={index}>
                                                                        <button 
                                                                            className="dropdown-item" 
                                                                            onClick={() => applyResponseTemplate(review.id, index)}
                                                                        >
                                                                            {template.name}
                                                                        </button>
                                                                    </li>
                                                                ))}
                                                            </ul>
                                                        </div>
                                                    </div>
                                                    <textarea
                                                        placeholder="Write your response here..."
                                                        value={responses[review.id] || ""}
                                                        onChange={e => handleResponseChange(review.id, e.target.value)}
                                                        className="form-control"
                                                        rows="4"
                                                        style={{ borderColor: colors.navy }}
                                                    />
                                                    <div className="d-flex justify-content-end mt-2">
                                                        <button
                                                            onClick={e => submitResponse(review.id, e)}
                                                            className="btn"
                                                            disabled={!responses[review.id]?.trim()}
                                                            style={{ 
                                                                backgroundColor: colors.navy, 
                                                                color: "white",
                                                                opacity: !responses[review.id]?.trim() ? 0.65 : 1
                                                            }}
                                                        >
                                                            <FaPaperPlane className="me-2" />Submit Response
                                                        </button>
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    )}
                                </div>
                            </div>
                        ))}
                    </div>
                ) : (
                    <div className="text-center py-5">
                        <FaCommentSlash className="mb-3" style={{ fontSize: "2.5rem", color: colors.coral }} />
                        <p style={{ color: colors.navy }}>No reviews available for this event yet.</p>
                    </div>
                )}
            </div>
        );
    };

    if (loading) {
        return (
            <div className="container d-flex justify-content-center align-items-center" style={{ minHeight: "60vh", paddingTop: "70px" }}>
                <div className="spinner-border" role="status" style={{ color: colors.coral }}>
                    <span className="visually-hidden">Loading...</span>
                </div>
            </div>
        );
    }

    return (
        <div style={{ display: "flex", flexDirection: "column", minHeight: "100vh" }}>
            {/* Success Toast Notification */}
            {showSuccess && (
                <div 
                    className="position-fixed top-0 end-0 p-3" 
                    style={{ zIndex: 1050, marginTop: "70px" }}
                >
                    <div 
                        className="toast show" 
                        role="alert" 
                        aria-live="assertive" 
                        aria-atomic="true"
                        style={{ backgroundColor: colors.successGreen, color: "white" }}
                    >
                        <div className="toast-header" style={{ backgroundColor: colors.successGreen, color: "white" }}>
                            <FaCheckCircle className="me-2" />
                            <strong className="me-auto">Success</strong>
                            <button 
                                type="button" 
                                className="btn-close btn-close-white" 
                                onClick={() => setShowSuccess(false)}
                                aria-label="Close"
                            ></button>
                        </div>
                        <div className="toast-body">
                            {successMessage}
                        </div>
                    </div>
                </div>
            )}

            <div className="container mt-5">
                <div className="d-flex justify-content-between align-items-center mb-4">
                    <h2 style={{ color: colors.navy }}>
                        <FaReply className="me-2" style={{ color: colors.coral }} />
                        Admin Response Panel
                    </h2>
                    <div>
                        <button 
                            className="btn me-2" 
                            onClick={() => navigate("/admin")}
                            style={{ 
                                backgroundColor: "transparent", 
                                borderColor: colors.navy,
                                color: colors.navy
                            }}
                        >
                            <FaArrowLeft className="me-2" />
                            Back to Admin
                        </button>
                        <button 
                            className="btn" 
                            onClick={deleteEvent}
                            style={{ backgroundColor: colors.errorRed, color: "white" }}
                        >
                            <FaTrashAlt className="me-2" />Delete Event
                        </button>
                    </div>
                </div>

                {eventData && (
                    <div className="card mb-4 shadow-sm">
                        <div className="card-header d-flex justify-content-between align-items-center" 
                            style={{ backgroundColor: colors.navy, color: "white" }}>
                            <span><FaCalendarAlt className="me-2" style={{ color: colors.coral }} />Event Details</span>
                            <div>
                                {eventData.category && (
                                    <span className="badge bg-light me-2" style={{ color: colors.navy }}>
                                        <FaTags className="me-1" style={{ color: colors.coral }} />
                                        {eventData.category}
                                    </span>
                                )}
                                {eventData.date && (
                                    <span className="badge" style={{ backgroundColor: colors.coral, color: "white" }}>
                                        <FaClock className="me-1" />
                                        {formatDate(eventData.date)} {eventData.time}
                                    </span>
                                )}
                            </div>
                        </div>
                        <div className="card-body">
                            <div className="row">
                                {eventData.image && (
                                    <div className="col-md-4 mb-3 mb-md-0">
                                        <img 
                                            src={getImageUrl(eventData.image)} 
                                            alt={eventData.title}
                                            className="img-fluid rounded"
                                            style={{ maxHeight: "200px", width: "100%", objectFit: "cover" }}
                                        />
                                    </div>
                                )}
                                <div className={`col-md-${eventData.image ? '8' : '12'}`}>
                                    <h4 className="card-title" style={{ color: colors.navy }}>{eventData.title}</h4>
                                    <div className="row mt-3">
                                        <div className="col-md-8">
                                            <p className="card-text">
                                                <FaAlignLeft className="me-2" style={{ color: colors.coral }} />
                                                {eventData.description}
                                            </p>
                                        </div>
                                        <div className="col-md-4">
                                            <div className="card" style={{ backgroundColor: colors.lightGray }}>
                                                <div className="card-body">
                                                    <p className="mb-2">
                                                        <FaMapMarkerAlt className="me-2" style={{ color: colors.coral }} />
                                                        <strong>Location:</strong>
                                                    </p>
                                                    <p className="ms-4">{eventData.location}</p>
                                                    <p className="mb-2">
                                                        <FaUser className="me-2" style={{ color: colors.coral }} />
                                                        <strong>Created by:</strong>
                                                    </p>
                                                    <p className="ms-4">{eventData.username}</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                )}

                {/* Tab Navigation */}
                <ul className="nav nav-tabs mb-4">
                    <li className="nav-item">
                        <button 
                            className={`nav-link ${activeTab === 'overview' ? 'active' : ''}`}
                            onClick={() => setActiveTab('overview')}
                            style={{ 
                                color: activeTab === 'overview' ? colors.coral : colors.navy,
                                fontWeight: activeTab === 'overview' ? 'bold' : 'normal',
                                borderBottom: activeTab === 'overview' ? `2px solid ${colors.coral}` : 'none'
                            }}
                        >
                            <FaChartPie className="me-2" />
                            Overview
                        </button>
                    </li>
                    <li className="nav-item">
                        <button 
                            className={`nav-link ${activeTab === 'reviews' ? 'active' : ''}`}
                            onClick={() => setActiveTab('reviews')}
                            style={{ 
                                color: activeTab === 'reviews' ? colors.coral : colors.navy,
                                fontWeight: activeTab === 'reviews' ? 'bold' : 'normal',
                                borderBottom: activeTab === 'reviews' ? `2px solid ${colors.coral}` : 'none'
                            }}
                        >
                            <FaStar className="me-2" />
                            Reviews Management
                        </button>
                    </li>
                </ul>

                {/* Tab Content */}
                <div className="tab-content">
                    {activeTab === 'overview' && renderOverviewTab()}
                    {activeTab === 'reviews' && renderReviewsTab()}
                </div>
            </div>
            
            {/* Add Footer */}
            <Footer />
        </div>
    );
}
</file>

<file path="client/src/pages/AdminNotificationIcon.js">
import React, { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { io } from "socket.io-client";

const AdminNotificationIcon = () => {
  const [adminNotifications, setAdminNotifications] = useState([]);
  const [unreadAdminCount, setUnreadAdminCount] = useState(0);
  const [showDropdown, setShowDropdown] = useState(false);
  const navigate = useNavigate();
  const dropdownRef = useRef(null);
  const buttonRef = useRef(null);
  const socketRef = useRef(null);

  // Fetch initial notifications
  useEffect(() => {
    const fetchAdminNotifications = async () => {
      try {
        const token = localStorage.getItem("accessToken");
        if (!token) return;
    
        const response = await fetch("http://localhost:3001/notifications/admin", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
    
        if (response.ok) {
          const data = await response.json();
          console.log("Fetched admin notifications:", data);
          setAdminNotifications(data);
          setUnreadAdminCount(data.filter((n) => !n.isRead).length);
        } else {
          console.error("Failed to fetch admin notifications:", response.statusText);
        }
      } catch (error) {
        console.error("Failed to fetch admin notifications", error);
      }
    };

    fetchAdminNotifications();
  }, []);

  // Socket.IO setup
  useEffect(() => {
    socketRef.current = io("http://localhost:3001", {
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000,
    });

    socketRef.current.on("connect", () => {
      console.log("Socket connected");
      const token = localStorage.getItem("accessToken");
      if (token) {
        socketRef.current.emit("authenticate", token);
        socketRef.current.emit("join-admin-channel");
        console.log("Admin authenticated and joined admin-channel");
      }
    });

    socketRef.current.on("connect_error", (err) => {
      console.error("Socket connection error:", err);
    });

    // Listen for new review notifications
    socketRef.current.on("new-review", (reviewData) => {
      console.log("Received new-review event:", reviewData);

      const notification = {
        id: reviewData.reviewId || `review-${Date.now()}`,
        type: "review",
        message: `New review submitted by ${reviewData.userName || "a user"} for "${reviewData.productName}"`,
        relatedId: reviewData.reviewId,
        eventId: reviewData.eventId,
        createdAt: new Date().toISOString(),
        isRead: false,
        metadata: {
          reviewId: reviewData.reviewId,
          eventId: reviewData.eventId,
          rating: reviewData.rating,
          productName: reviewData.productName,
        },
      };

      // Prevent duplicate notifications
      setAdminNotifications((prev) => {
        if (prev.some((n) => n.id === notification.id)) return prev;
        return [notification, ...prev];
      });

      setUnreadAdminCount((prev) => prev + 1);

      // Play notification sound
      try {
        const reviewSound = new Audio("/review-notification.mp3");
        reviewSound.play().catch(err => console.log("Audio play error:", err));
      } catch (e) {
        console.log("Audio play error:", e);
      }
    });

    // Listen for admin-specific notifications
    socketRef.current.on("admin-notification", (notification) => {
      console.log("Received admin-notification:", notification);
      
      // Process notification metadata if it's a string
      if (notification.metadata && typeof notification.metadata === 'string') {
        try {
          notification.metadata = JSON.parse(notification.metadata);
        } catch (e) {
          console.error("Error parsing notification metadata:", e);
        }
      }
      
      setAdminNotifications((prev) => {
        if (prev.some((n) => n.id === notification.id)) return prev;
        return [notification, ...prev];
      });
      
      setUnreadAdminCount((prev) => prev + 1);
    });

    // Listen for notification read status updates
    socketRef.current.on("admin-notification-read", ({ id }) => {
      setAdminNotifications((prev) => 
        prev.map((n) => (n.id === id ? { ...n, isRead: true } : n))
      );
      setUnreadAdminCount((prev) => Math.max(0, prev - 1));
    });

    // Listen for all notifications marked as read
    socketRef.current.on("admin-notifications-read-all", () => {
      setAdminNotifications((prev) => prev.map((n) => ({ ...n, isRead: true })));
      setUnreadAdminCount(0);
    });

    return () => {
      if (socketRef.current) {
        socketRef.current.disconnect();
      }
    };
  }, []);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        dropdownRef.current && 
        !dropdownRef.current.contains(event.target) && 
        buttonRef.current !== event.target
      ) {
        setShowDropdown(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const markAdminNotificationAsRead = async (notificationId) => {
    try {
      const token = localStorage.getItem("accessToken");
      const response = await fetch(
        `http://localhost:3001/notifications/admin/${notificationId}/read`,
        {
          method: "PUT",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (response.ok) {
        setAdminNotifications((prev) =>
          prev.map((n) => (n.id === notificationId ? { ...n, isRead: true } : n))
        );
        setUnreadAdminCount((prev) => Math.max(0, prev - 1));
      }
    } catch (error) {
      console.error("Failed to mark admin notification as read", error);
    }
  };

  const markAllAdminNotificationsAsRead = async () => {
    try {
      const token = localStorage.getItem("accessToken");
      const response = await fetch(
        "http://localhost:3001/notifications/admin/read-all",
        {
          method: "PUT",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (response.ok) {
        setAdminNotifications((prev) => prev.map((n) => ({ ...n, isRead: true })));
        setUnreadAdminCount(0);
      }
    } catch (error) {
      console.error("Failed to mark all admin notifications as read", error);
    }
  };

  const handleNotificationClick = (notification) => {
    markAdminNotificationAsRead(notification.id);
    setShowDropdown(false);

    // Navigate based on notification type
    if (notification.type === "event") {
      navigate(`/admin/events/${notification.relatedId}`);
    } else if (notification.type === "review") {
      // For reviews, navigate to the response page
      if (notification.metadata && notification.metadata.eventId) {
        navigate(`/response/${notification.metadata.eventId}`);
      } else if (notification.eventId) {
        navigate(`/response/${notification.eventId}`);
      } else if (notification.relatedId) {
        navigate(`/response/${notification.relatedId}`);
      }
    }
  };

  return (
    <div className="position-relative">
      <button
        ref={buttonRef}
        className="btn btn-light position-relative"
        onClick={() => setShowDropdown(!showDropdown)}
        aria-label="Admin Notifications"
      >
        <i className="bi bi-bell-fill fs-5" style={{ color: "#001F3F" }}></i>
        {unreadAdminCount > 0 && (
          <span className="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
            {unreadAdminCount > 99 ? "99+" : unreadAdminCount}
          </span>
        )}
      </button>

      {showDropdown && (
        <div
          ref={dropdownRef}
          className="dropdown-menu dropdown-menu-end shadow-sm show"
          style={{
            width: "320px",
            position: "absolute",
            right: 0,
            top: "100%",
            zIndex: 1050,
          }}
        >
          <div className="d-flex justify-content-between align-items-center p-2 border-bottom">
            <span className="fw-bold">Admin Notifications</span>
            {unreadAdminCount > 0 && (
              <button
                className="btn btn-sm btn-link text-decoration-none"
                onClick={markAllAdminNotificationsAsRead}
                style={{ color: "#FF6B6B" }}
              >
                Mark all as read
              </button>
            )}
          </div>

          <div
            className="list-group list-group-flush"
            style={{ maxHeight: "300px", overflowY: "auto" }}
          >
            {adminNotifications.length === 0 ? (
              <div className="text-center text-muted py-3">No admin notifications</div>
            ) : (
              adminNotifications.map((notification) => (
                <button
                  key={notification.id}
                  className={`list-group-item list-group-item-action d-flex justify-content-between align-items-start ${
                    notification.isRead ? "bg-white" : "bg-light"
                  }`}
                  onClick={() => handleNotificationClick(notification)}
                  style={{ cursor: "pointer", transition: "background-color 0.2s" }}
                >
                  <div className="w-100">
                    <p className="mb-1 text-truncate" title={notification.message}>
                      {notification.message}
                    </p>
                    <small className="text-muted">
                      {new Date(notification.createdAt).toLocaleTimeString()}
                    </small>
                    {notification.type === "review" && notification.metadata?.rating && (
                      <div className="mt-1">
                        <small className="text-muted">
                          Rating: {notification.metadata.rating} 
                          <span className="ms-1" style={{ color: "#FFD700" }}>
                            {"★".repeat(notification.metadata.rating)}
                          </span>
                        </small>
                        {notification.metadata.productName && (
                          <small className="text-muted d-block">
                            Event: {notification.metadata.productName}
                          </small>
                        )}
                      </div>
                    )}
                  </div>
                  {!notification.isRead && (
                    <span className="badge rounded-pill" style={{ backgroundColor: "#FF6B6B", color: "white" }}>New</span>
                  )}
                </button>
              ))
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminNotificationIcon;
</file>

<file path="client/src/pages/LandingPage.js">
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { format } from 'date-fns';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap-icons/font/bootstrap-icons.min.css';
import reviewsImage from "../images/reviews.jpg";
import eventImage from "../images/flex.jpg";
import BannerSlideshow from '../components/BannerSlideshow';

// Add global style reset
const globalStyle = `
  body, html {
    margin: 0;
    padding: 0;
    overflow-x: hidden;
  }
`;

const LandingPage = () => {
  const navigate = useNavigate();
  const [isHovered, setIsHovered] = useState(false);
  const [featuredEvents, setFeaturedEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [hoveredEventId, setHoveredEventId] = useState(null);
  
  // Animation for reveal on scroll using Intersection Observer instead of scroll events
  const [visibleSections, setVisibleSections] = useState({
    hero: false,
    events: false,
    features: false,
    cta: false
  });

  useEffect(() => {
    // Fetch events from API
    axios.get("http://localhost:3001/events")
      .then((response) => {
        // Get only upcoming events and limit to 3
        const today = new Date();
        const upcoming = response.data
          .filter((event) => new Date(event.date) >= today)
          .sort((a, b) => new Date(a.date) - new Date(b.date))
          .slice(0, 3);
        setFeaturedEvents(upcoming);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching events:", error);
        // Fallback sample events in case API fails
        setFeaturedEvents([
          {
            id: 1,
            title: "Summer Music Festival",
            date: "2025-06-15",
            time: "16:00:00",
            location: "Central Park",
            category: "Music",
            image: "/api/placeholder/600/400"
          },
          {
            id: 2,
            title: "Tech Conference 2025",
            date: "2025-04-22",
            time: "09:00:00",
            location: "Convention Center",
            category: "Technology",
            image: "/api/placeholder/600/400"
          },
          {
            id: 3,
            title: "Food & Wine Expo",
            date: "2025-05-10",
            time: "12:00:00",
            location: "Downtown Gallery",
            category: "Food",
            image: "/api/placeholder/600/400"
          }
        ]);
        setLoading(false);
      });

    // Using Intersection Observer for better performance
    const observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.25
    };

    const sectionObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const sectionId = entry.target.id.replace('-section', '');
          setVisibleSections(prev => ({
            ...prev,
            [sectionId]: true
          }));
          
          // Once a section is visible, we can stop observing it
          sectionObserver.unobserve(entry.target);
        }
      });
    }, observerOptions);
    
    // Observe each section
    const sections = ['hero-section', 'events-section', 'features-section', 'cta-section'];
    sections.forEach(id => {
      const element = document.getElementById(id);
      if (element) sectionObserver.observe(element);
    });
    
    return () => {
      // Cleanup
      sections.forEach(id => {
        const element = document.getElementById(id);
        if (element) sectionObserver.unobserve(element);
      });
    };
  }, []);

  // Function to correct image path (similar to AdminDashboard)
  const getImageUrl = (imagePath) => {
    if (!imagePath) return "/api/placeholder/600/400";
    
    // If the path already starts with http or is a placeholder, return as is
    if (imagePath.startsWith('http') || imagePath.startsWith('/api/placeholder')) return imagePath;
    
    // If the path begins with "/uploads/events/", remove the leading slash
    if (imagePath.startsWith('/uploads/events/')) {
      return `http://localhost:3001${imagePath}`;
    }
    
    // For any other case, just append the path to the base URL
    return `http://localhost:3001/${imagePath}`;
  };

  // Theming with design tokens
  const theme = {
    colors: {
      primary: "#FF5A8E", // Vibrant pink
      secondary: "#0D1B40", // Deep navy
      accent: "#41C9E2", // Bright turquoise accent
      dark: "#081029", // Very dark navy, almost black
      light: "#FFF5F8", // Very light pink (off-white with pink tint)
      text: "#0D1B40", // Navy for main text
      textLight: "#6C7A9C" // Muted navy for secondary text
    },
    shadows: {
      sm: '0 4px 15px rgba(255, 90, 142, 0.2)',
      md: '0 8px 25px rgba(255, 90, 142, 0.4)',
      lg: '0 20px 50px rgba(13, 27, 64, 0.2)'
    },
    transitions: {
      default: 'all 0.3s ease',
      slow: 'all 0.8s ease',
      delayed: 'all 1s ease 0.2s'
    },
    borderRadius: {
      sm: '6px',
      md: '8px',
      lg: '16px'
    }
  };

  // Button component for consistent styling and DRY code
  const Button = ({ primary, children, onClick, className = '' }) => (
    <button 
      className={`btn btn-lg ${className}`}
      onClick={onClick}
      onMouseEnter={primary ? () => setIsHovered(true) : undefined}
      onMouseLeave={primary ? () => setIsHovered(false) : undefined}
      style={{
        background: primary 
          ? (isHovered ? '#E04578' : theme.colors.primary) 
          : 'transparent',
        color: primary ? 'white' : theme.colors.primary,
        borderRadius: theme.borderRadius.md,
        padding: '0.75rem 2rem',
        fontSize: '1.1rem',
        fontWeight: '600',
        boxShadow: primary 
          ? (isHovered ? theme.shadows.md : theme.shadows.sm) 
          : 'none',
        border: primary ? 'none' : `2px solid ${theme.colors.primary}`,
        transition: theme.transitions.default,
        transform: primary && isHovered ? 'translateY(-2px)' : 'translateY(0)'
      }}
    >
      {children}
    </button>
  );

  // Shared section transition properties
  const getSectionStyle = (isVisible) => ({
    opacity: isVisible ? 1 : 0,
    transform: isVisible ? 'translateY(0)' : 'translateY(30px)',
    transition: theme.transitions.slow
  });

  return (
    <>
      <style>{globalStyle}</style>
      <div className="d-flex flex-column min-vh-100" style={{
        fontFamily: "'Inter', 'Segoe UI', Roboto, sans-serif",
        overflowX: 'hidden',
        color: theme.colors.text,
        background: theme.colors.light,
        margin: 0,
        padding: 0,
        marginTop: "-80px" // Compensate for the global padding
      }}>
        {/* Hero Section - With background image and modern design */}
        <section 
          id="hero-section"
          className="d-flex align-items-center"
          style={{
            background: `url('/api/placeholder/1920/1080') no-repeat center center`,
            backgroundSize: 'cover',
            position: 'relative',
            padding: '6rem 0',
            marginTop: 0,
            minHeight: '100vh',
            ...getSectionStyle(visibleSections.hero)
          }}
        >
          {/* Dark overlay */}
          <div style={{
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            background: `linear-gradient(135deg, rgba(13, 27, 64, 0.85) 0%, rgba(255, 90, 142, 0.75) 100%)`,
            zIndex: 1
          }}></div>
          
          <div className="container position-relative" style={{ zIndex: 2 }}>
            <div className="row align-items-center">
              <div className="col-lg-6 text-white">
                <div style={{ 
                  background: 'rgba(255, 255, 255, 0.1)',
                  backdropFilter: 'blur(10px)',
                  padding: '2.5rem',
                  borderRadius: theme.borderRadius.lg,
                  border: '1px solid rgba(255, 255, 255, 0.2)',
                  boxShadow: '0 20px 40px rgba(0, 0, 0, 0.2)'
                }}>
                  <h1 className="display-4 fw-bold mb-4" style={{
                    color: 'white',
                    fontWeight: '800',
                    letterSpacing: '-0.5px',
                    textShadow: '0 2px 4px rgba(0, 0, 0, 0.2)'
                  }}>
                    Experience Events Through <span style={{ color: theme.colors.primary }}>Vibe</span>Catcher
                  </h1>
                  
                  <p className="lead mb-5" style={{
                    color: 'rgba(255, 255, 255, 0.9)',
                    fontSize: '1.25rem',
                    lineHeight: '1.6'
                  }}>
                    VibeCatcher transforms how you discover, experience, and remember events with cutting-edge artificial intelligence that personalizes every moment.
                  </p>
                  
                  {/* Updated buttons for clearer navigation */}
                  <div className="d-flex flex-column flex-sm-row gap-3">
                    <Button primary onClick={() => navigate('/registration')}>
                      Register
                    </Button>
                    <button 
                      className="btn btn-lg" 
                      onClick={() => navigate('/login')}
                      style={{
                        background: 'rgba(255, 255, 255, 0.2)',
                        color: 'white',
                        borderRadius: theme.borderRadius.md,
                        padding: '0.75rem 2rem',
                        fontSize: '1.1rem',
                        fontWeight: '600',
                        border: '1px solid rgba(255, 255, 255, 0.3)',
                        backdropFilter: 'blur(5px)',
                        transition: theme.transitions.default
                      }}
                    >
                      Login
                    </button>
                  </div>
                </div>
              </div>
              
              {/* Update this section in your LandingPage component */}
<div className="col-lg-6 d-none d-lg-block d-flex align-items-center justify-content-center">
  <div className="position-relative" style={{ 
    width: '100%',
    maxWidth: '500px',
    aspectRatio: '1/1',
    margin: '0 auto'
  }}>
    <BannerSlideshow theme={theme} isCircular={true} />
  </div>
</div>
            </div>
          </div>
          
          {/* Animated scroll indicator */}
          <div className="position-absolute bottom-0 start-50 translate-middle-x mb-4" style={{ zIndex: 2 }}>
            <a href="#events-section" className="text-white text-decoration-none">
              <div className="d-flex flex-column align-items-center">
                <span className="mb-2">Scroll to explore</span>
                <i className="bi bi-chevron-down" style={{ 
                  fontSize: '1.5rem', 
                  animation: 'bounce 2s infinite' 
                }}></i>
              </div>
            </a>
          </div>
          
          {/* Add animation for the scroll indicator */}
          <style jsx>{`
            @keyframes bounce {
              0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
              40% { transform: translateY(-20px); }
              60% { transform: translateY(-10px); }
            }
          `}</style>
        </section>

        {/* Featured Events Section (New Modern Layout) */}
        <section
          id="events-section"
          className="py-5"
          style={{
            background: '#f8f9fa',
            padding: '6rem 0 8rem',
            position: 'relative',
            ...getSectionStyle(visibleSections.events)
          }}
        >
          <div className="position-absolute top-0 left-0 w-100 h-100" style={{
            backgroundImage: 'radial-gradient(circle at 20% 90%, rgba(255, 90, 142, 0.1) 0%, transparent 40%), radial-gradient(circle at 80% 30%, rgba(65, 201, 226, 0.1) 0%, transparent 40%)',
            zIndex: 1
          }}></div>
          
          <div className="container position-relative" style={{ zIndex: 2 }}>
            <div className="row mb-5">
              <div className="col-lg-6">
                <h2 className="display-4 fw-bold mb-2" style={{
                  color: theme.colors.secondary,
                  fontWeight: '800',
                  position: 'relative'
                }}>
                  Trending Events
                </h2>
                <div className="d-inline-block mb-3" style={{
                  width: '120px',
                  height: '5px',
                  background: `linear-gradient(90deg, ${theme.colors.primary}, ${theme.colors.accent})`,
                  borderRadius: '3px'
                }}></div>
                <p className="lead" style={{ color: theme.colors.textLight }}>
                  Discover popular events curated just for you
                </p>
              </div>
              <div className="col-lg-6 d-flex justify-content-lg-end align-items-end">
                <button 
                  className="btn btn-lg"
                  onClick={() => navigate('/events')}
                  style={{
                    background: theme.colors.primary,
                    color: 'white',
                    borderRadius: '30px',
                    padding: '0.75rem 2rem',
                    fontWeight: '600',
                    transition: theme.transitions.default,
                    boxShadow: theme.shadows.md
                  }}
                >
                  View All Events <i className="bi bi-arrow-right ms-2"></i>
                </button>
              </div>
            </div>
            
            {loading ? (
              <div className="d-flex justify-content-center w-100 py-5">
                <div className="spinner-border" style={{ color: theme.colors.primary }} role="status">
                  <span className="visually-hidden">Loading...</span>
                </div>
              </div>
            ) : (
              <div className="row">
                {featuredEvents.map((event, index) => (
                  <div 
                    className="col-lg-4 col-md-6 mb-4" 
                    key={event.id}
                    style={{ 
                      transform: `translateY(${index * 20}px)`, 
                      zIndex: 3 - index 
                    }}
                  >
                    <div
                      className="event-card position-relative"
                      onClick={() => navigate(`/event/${event.id}`)}
                      style={{ 
                        cursor: "pointer",
                        borderRadius: '16px',
                        overflow: 'hidden',
                        height: '450px',
                        boxShadow: '0 15px 35px rgba(13, 27, 64, 0.1)',
                        transition: 'all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275)'
                      }}
                      onMouseEnter={() => setHoveredEventId(event.id)}
                      onMouseLeave={() => setHoveredEventId(null)}
                    >
                      {/* Full height background image */}
                      <div style={{ 
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        width: '100%',
                        height: '100%',
                        zIndex: 1
                      }}>
                        <img 
                          src={getImageUrl(event.image)} 
                          alt={event.title}
                          style={{ 
                            width: '100%', 
                            height: '100%', 
                            objectFit: 'cover',
                            transition: 'transform 0.6s ease'
                          }}
                        />
                        <div style={{ 
                          position: 'absolute',
                          top: 0,
                          left: 0,
                          width: '100%',
                          height: '100%',
                          background: 'linear-gradient(to bottom, rgba(0,0,0,0.1) 0%, rgba(0,0,0,0.8) 100%)',
                          zIndex: 2
                        }}></div>
                      </div>
                      
                      {/* Content at the bottom of the card */}
                      <div style={{ 
                        position: 'absolute', 
                        bottom: 0, 
                        left: 0, 
                        width: '100%',
                        padding: '30px',
                        zIndex: 3,
                        color: 'white',
                        transform: hoveredEventId === event.id ? 'translateY(0)' : 'translateY(80px)',
                        transition: 'transform 0.5s ease'
                      }}>
                        {/* Category Badge */}
                        <span className="badge mb-3" style={{ 
                          backgroundColor: theme.colors.primary,
                          color: 'white',
                          padding: '8px 15px',
                          borderRadius: '30px',
                          fontWeight: '600',
                          fontSize: '0.85rem',
                          boxShadow: '0 4px 10px rgba(0,0,0,0.15)',
                          opacity: hoveredEventId === event.id ? 0 : 1,
                          transition: 'opacity 0.3s ease'
                        }}>
                          {event.category || "Event"}
                        </span>
                        
                        <h3 className="fw-bold mb-3">{event.title}</h3>
                        
                        <div style={{ 
                          height: hoveredEventId === event.id ? 'auto' : '0',
                          opacity: hoveredEventId === event.id ? 1 : 0,
                          overflow: 'hidden',
                          transition: 'all 0.5s ease'
                        }}>
                          <div className="d-flex align-items-center mb-2">
                            <i className="bi bi-calendar3 me-2"></i>
                            <span>{format(new Date(event.date), "MMMM dd, yyyy")}</span>
                          </div>
                          <div className="d-flex align-items-center mb-2">
                            <i className="bi bi-clock me-2"></i>
                            <span>{event.time ? format(new Date(`2000-01-01T${event.time}`), "h:mm a") : "TBA"}</span>
                          </div>
                          <div className="d-flex align-items-center mb-3">
                            <i className="bi bi-geo-alt me-2"></i>
                            <span>{event.location}</span>
                          </div>
                          
                          <button 
                            className="btn btn-sm mt-2"
                            style={{
                              background: 'white',
                              color: theme.colors.primary,
                              borderRadius: '30px',
                              padding: '8px 20px',
                              fontWeight: '600',
                              boxShadow: '0 4px 15px rgba(0,0,0,0.15)',
                              border: 'none'
                            }}
                          >
                            View Details <i className="bi bi-chevron-right ms-1"></i>
                          </button>
                        </div>
                      </div>
                      
                      {/* Date Chip */}
                      <div style={{
                        position: 'absolute',
                        top: '20px',
                        right: '20px',
                        zIndex: 4,
                        background: 'white',
                        color: theme.colors.secondary,
                        padding: '10px 15px',
                        borderRadius: '12px',
                        boxShadow: '0 5px 15px rgba(0,0,0,0.2)',
                        fontWeight: 'bold',
                        textAlign: 'center',
                        minWidth: '80px'
                      }}>
                        <div style={{ fontSize: '1.5rem', fontWeight: '800' }}>
                          {format(new Date(event.date), "dd")}
                        </div>
                        <div style={{ fontSize: '0.8rem', textTransform: 'uppercase' }}>
                          {format(new Date(event.date), "MMM")}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
          
          {/* Floating decorative elements */}
          <div className="position-absolute" style={{ 
            bottom: '10%', 
            left: '5%', 
            width: '150px',
            height: '150px',
            borderRadius: '50%',
            background: `linear-gradient(135deg, ${theme.colors.primary} 0%, ${theme.colors.accent} 100%)`,
            opacity: 0.1,
            zIndex: 1
          }}></div>
          
          <div className="position-absolute" style={{ 
            top: '15%', 
            right: '8%', 
            width: '100px',
            height: '100px',
            borderRadius: '50%',
            background: theme.colors.accent,
            opacity: 0.1,
            zIndex: 1
          }}></div>
        </section>
        
        {/* Features Section */}
        <section 
          id="features-section"
          className="py-5"
          style={{
            background: `linear-gradient(135deg, ${theme.colors.light} 0%, rgba(13, 27, 64, 0.05) 100%)`,
            padding: '5rem 0',
            ...getSectionStyle(visibleSections.features)
          }}
        >
          <div className="container">
            <div className="text-center mb-5">
              <h2 className="fw-bold mb-3" style={{
                color: theme.colors.secondary,
                fontSize: '2.5rem',
                position: 'relative',
                display: 'inline-block'
              }}>
                Intelligent Features
                <span style={{
                  position: 'absolute',
                  bottom: '-10px',
                  left: '50%',
                  transform: 'translateX(-50%)',
                  width: '80px',
                  height: '4px',
                  background: `linear-gradient(90deg, ${theme.colors.primary}, ${theme.colors.secondary})`,
                  borderRadius: '2px'
                }}></span>
              </h2>
              <p className="lead mb-4" style={{ color: theme.colors.textLight }}>
                Discover the power of AI in simplifying your event experiences.
              </p>
            </div>
            <div className="row">
              {/* Card Component */}
              {[
                {
                  title: "Event Personalization",
                  description: "Let AI recommend events that match your interests and preferences.",
                  image: eventImage,
                  buttonText: "Explore Recommendations",
                  path: "/EventPersonalization"
                },
                {
                  title: "AI Reviews & Insights",
                  description: "Get intelligent insights and detailed analytics on events.",
                  image: reviewsImage,
                  buttonText: "View Insights",
                  path: "/AIReviewsPage"
                }
              ].map((card, index) => (
                <div className="col-lg-6 col-md-6 mb-4" key={index}>
                  <div 
                    className="card shadow-sm border-0 rounded-lg h-100" 
                    style={{ 
                      overflow: 'hidden',
                      cursor: 'pointer',
                      transition: theme.transitions.default
                    }}
                    onClick={() => navigate(card.path)}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.transform = 'translateY(-5px)';
                      e.currentTarget.style.boxShadow = theme.shadows.md;
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.transform = 'translateY(0)';
                      e.currentTarget.style.boxShadow = theme.shadows.sm;
                    }}
                  >
                    <img src={card.image} alt={card.title} className="card-img-top" />
                    <div className="card-body" style={{ background: theme.colors.light }}>
                      <h5 className="card-title" style={{ color: theme.colors.primary }}>{card.title}</h5>
                      <p className="card-text" style={{ color: theme.colors.textLight }}>
                        {card.description}
                      </p>
                      <div className="mt-3">
                        <button 
                          className="btn btn-sm" 
                          style={{
                            background: theme.colors.primary,
                            color: 'white',
                            borderRadius: theme.borderRadius.sm,
                            padding: '8px 16px',
                            fontWeight: '600',
                            transition: theme.transitions.default,
                            border: 'none'
                          }}
                        >
                          {card.buttonText}
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* Call to Action Section */}
        <section 
          id="cta-section"
          className="py-5 text-center"
          style={{
            background: theme.colors.primary,
            color: 'white',
            ...getSectionStyle(visibleSections.cta)
          }}
        >
          <div className="container">
            <h3 className="display-4 mb-4">Join the Future of Event Discovery</h3>
            <p className="lead mb-5">
              Register now to start exploring and experiencing events powered by AI!
            </p>
            <div className="d-flex flex-wrap justify-content-center gap-3">
              <button 
                className="btn btn-lg" 
                onClick={() => navigate('/register')}
                style={{
                  background: 'white', 
                  color: theme.colors.primary,
                  padding: '1rem 3rem',
                  borderRadius: theme.borderRadius.md,
                  fontSize: '1.25rem',
                  fontWeight: '700',
                  boxShadow: '0 10px 20px rgba(255, 255, 255, 0.2)'
                }}
              >
                Register
              </button>
              <button 
                className="btn btn-lg" 
                onClick={() => navigate('/login')}
                style={{
                  background: 'transparent', 
                  color: 'white',
                  padding: '1rem 3rem',
                  borderRadius: theme.borderRadius.md,
                  fontSize: '1.25rem',
                  fontWeight: '700',
                  border: '2px solid white'
                }}
              >
                Login
              </button>
            </div>
          </div>
        </section>

        {/* Add Event Card Animation Styles */}
        <style jsx>{`
          .event-card {
            transition: all 0.3s ease;
          }
          
          .event-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 15px 30px rgba(13, 27, 64, 0.2) !important;
          }
          
          .event-card:hover img {
            transform: scale(1.1);
          }
        `}</style>
      </div>
    </>
  );
};

export default LandingPage;
</file>

<file path="server/middlewares/AuthMiddleware.js">
const { verify } = require("jsonwebtoken");

// Helper function for sending error responses
const sendError = (res, statusCode, message) => {
    return res.status(statusCode).json({ error: message });
};

const validateToken = (req, res, next) => {
    const authHeader = req.header("Authorization");

    // Check if Authorization header is present
    if (!authHeader) {
        console.warn("Authorization header missing");
        return sendError(res, 401, "Authorization header missing");
    }

    // Extract token from the header
    const token = authHeader.split(" ")[1];
    console.debug("Received Token:", token); // Log the token for debugging

    // Check if token exists
    if (!token) {
        console.warn("Token missing from authorization header");
        return sendError(res, 401, "Token missing from authorization header");
    }

    try {
        // Validate the token using JWT's verify method
        const validToken = verify(token, process.env.JWT_SECRET);
        console.debug("Decoded Token:", validToken); // Log decoded token for debugging

        // Check if the token contains valid user data
        if (!validToken.id || !validToken.username) {
            console.warn("Invalid token: Missing required user information");
            return sendError(res, 401, "Invalid token: Missing required user information");
        }

        // Ensure `isAdmin` is explicitly defined and a boolean
        const isAdmin = validToken.isAdmin === true;
        if (validToken.isAdmin === undefined) {
            console.warn(`Token does not contain 'isAdmin'. Defaulting to false.`);
        } else if (typeof validToken.isAdmin !== "boolean") {
            console.warn(`Unexpected 'isAdmin' value in token:`, validToken.isAdmin);
        }

        // Attach user data and admin status to the request object
        req.user = {
            id: validToken.id,
            username: validToken.username,
            isAdmin, // Ensures it's a boolean
        };

        console.info(`User authenticated: ${validToken.username}, Admin status: ${req.user.isAdmin}`);
        
        // Proceed to the next middleware or route handler
        next();
    } catch (err) {
        console.error("JWT Verification Error:", err.message);
        return sendError(res, 403, "Invalid or expired token");
    }
};

module.exports = { validateToken };
</file>

<file path="server/models/Reviews.js">
module.exports = (sequelize, DataTypes) => {
    const Reviews = sequelize.define("Reviews", {
        id: {
            type: DataTypes.INTEGER,
            autoIncrement: true,
            primaryKey: true,
        },
        username: {
            type: DataTypes.STRING,
            allowNull: false,
            validate: { notEmpty: true },
        },
        review_text: {
            type: DataTypes.TEXT,
            allowNull: false,
            validate: { notEmpty: true },
        },
        rating: {
            type: DataTypes.INTEGER,
            allowNull: false,
            validate: { min: 1, max: 5 },
        },
        sentiment: {  
            type: DataTypes.STRING,
            allowNull: true, 
        },
        admin_response: {
            type: DataTypes.TEXT,
            allowNull: true, 
        }
    }, { timestamps: true });

    Reviews.associate = (models) => {
        Reviews.belongsTo(models.Events, {
            foreignKey: "EventId",  // ✅ Match SQL script
            onDelete: "CASCADE",
        });
        Reviews.belongsTo(models.Users, {
            foreignKey: "UserId",  // ✅ Match SQL script
            onDelete: "CASCADE",
        });
    };

    return Reviews;
};
</file>

<file path="server/routes/Notifications.js">
const express = require("express");
const router = express.Router();
const { Notifications, Users } = require("../models");
const { validateToken } = require("../middlewares/AuthMiddleware");

// Get user notifications
router.get("/", validateToken, async (req, res) => {
  try {
    const notifications = await Notifications.findAll({
      where: {
        userId: req.user.id,
        isAdminNotification: false
      },
      order: [["createdAt", "DESC"]],
      limit: 50,
    });

    res.json(notifications);
  } catch (error) {
    console.error("Error fetching notifications:", error);
    res.status(500).json({ message: "Error fetching notifications", error: error.message });
  }
});

// Get admin notifications
router.get("/admin", validateToken, async (req, res) => {
  try {
    if (!req.user.isAdmin) {
      return res.status(403).json({ error: "Access denied" });
    }

    const notifications = await Notifications.findAll({
      where: { 
        userId: req.user.id,
        isAdminNotification: true 
      },
      order: [["createdAt", "DESC"]],
      limit: 50,
    });

    // Parse metadata if it exists
    const processedNotifications = notifications.map(notification => {
      try {
        const notif = notification.toJSON();
        if (notif.metadata && typeof notif.metadata === 'string') {
          notif.metadata = JSON.parse(notif.metadata);
        }
        return notif;
      } catch (e) {
        return notification;
      }
    });

    res.json(processedNotifications);
  } catch (error) {
    console.error("Error fetching admin notifications:", error);
    res.status(500).json({ error: "Failed to fetch admin notifications" });
  }
});

// Create a new notification
router.post("/", validateToken, async (req, res) => {
  try {
    const { message, type, relatedId, isAdminNotification = false } = req.body;

    if (!message) {
      return res.status(400).json({ error: "Message is required" });
    }

    // Create notification for the current user
    const notification = await Notifications.create({
      message,
      type: type || "general",
      relatedId: relatedId || null,
      isAdminNotification,
      userId: req.user.id,
      isRead: false,
    });

    // Emit to the current user
    if (req.app.io) {
      if (isAdminNotification) {
        req.app.io.to("admin-channel").emit("admin-notification", notification);
      } else {
        req.app.io.to(`user-${req.user.id}`).emit("user-notification", notification);
      }
    }

    // If the user is an admin, create notifications for all users
    if (req.user.isAdmin) {
      const users = await Users.findAll({ where: { isAdmin: false } });
      const createdNotifications = [];

      for (const user of users) {
        const userNotification = await Notifications.create({
          message,
          type: type || "general",
          relatedId: relatedId || null,
          isAdminNotification: false,
          userId: user.id,
          isRead: false,
        });

        createdNotifications.push(userNotification);

        if (req.app.io) {
          req.app.io.to(`user-${user.id}`).emit("user-notification", userNotification);
        }
      }

      return res.status(201).json({
        originalNotification: notification,
        userNotifications: createdNotifications,
      });
    }

    res.status(201).json(notification);
  } catch (error) {
    console.error("Error creating notification:", error);
    res.status(500).json({ error: "Failed to create notification" });
  }
});

// Mark notification as read
router.put("/:id/read", validateToken, async (req, res) => {
  try {
    const [updatedRows] = await Notifications.update(
      { isRead: true },
      {
        where: {
          id: req.params.id,
          userId: req.user.id
        },
      }
    );

    if (updatedRows === 0) {
      return res.status(404).json({ message: "Notification not found" });
    }

    const updatedNotification = await Notifications.findByPk(req.params.id);

    if (req.app.io) {
      req.app.io.to(`user-${req.user.id}`).emit("notification-read", { id: req.params.id });
    }

    res.json(updatedNotification);
  } catch (error) {
    console.error("Error updating notification:", error);
    res.status(500).json({ message: "Error updating notification", error: error.message });
  }
});

// Mark admin notification as read
router.put("/admin/:id/read", validateToken, async (req, res) => {
  try {
    if (!req.user.isAdmin) {
      return res.status(403).json({ error: "Access denied" });
    }

    const [updatedRows] = await Notifications.update(
      { isRead: true },
      {
        where: {
          id: req.params.id,
          userId: req.user.id,
          isAdminNotification: true
        },
      }
    );

    if (updatedRows === 0) {
      return res.status(404).json({ message: "Admin notification not found" });
    }

    const updatedNotification = await Notifications.findByPk(req.params.id);

    if (req.app.io) {
      req.app.io.to(`user-${req.user.id}`).emit("admin-notification-read", { id: req.params.id });
    }

    res.json(updatedNotification);
  } catch (error) {
    console.error("Error updating admin notification:", error);
    res.status(500).json({ message: "Error updating admin notification", error: error.message });
  }
});

// Mark all notifications as read
router.put("/read-all", validateToken, async (req, res) => {
  try {
    await Notifications.update(
      { isRead: true },
      {
        where: {
          userId: req.user.id,
          isRead: false,
          isAdminNotification: false,
        },
      }
    );

    if (req.app.io) {
      req.app.io.to(`user-${req.user.id}`).emit("notifications-read-all");
    }

    res.json({ success: true });
  } catch (error) {
    console.error("Error updating notifications:", error);
    res.status(500).json({ message: "Error updating notifications", error: error.message });
  }
});

// Mark all admin notifications as read
router.put("/admin/read-all", validateToken, async (req, res) => {
  try {
    if (!req.user.isAdmin) {
      return res.status(403).json({ error: "Access denied" });
    }

    await Notifications.update(
      { isRead: true },
      {
        where: {
          userId: req.user.id,
          isAdminNotification: true,
          isRead: false,
        },
      }
    );

    if (req.app.io) {
      req.app.io.to(`user-${req.user.id}`).emit("admin-notifications-read-all");
    }

    res.json({ success: true });
  } catch (error) {
    console.error("Error marking all admin notifications as read:", error);
    res.status(500).json({ error: "Failed to mark all admin notifications as read" });
  }
});

module.exports = router;
</file>

<file path="server/routes/Users.js">
const express = require("express");
const router = express.Router();
const { Users } = require("../models");
const bcrypt = require("bcryptjs");
const { sign } = require("jsonwebtoken");
const crypto = require('crypto');
const nodemailer = require('nodemailer');
require("dotenv").config();
const { validateToken } = require("../middlewares/AuthMiddleware");

const SECRET_KEY = process.env.JWT_SECRET || "defaultsecret";

// Configure your email transporter
const transporter = nodemailer.createTransport({
  service: 'gmail', // Replace with your email service
  auth: {
    user: process.env.EMAIL_USER || 'your-email@gmail.com',
    pass: process.env.EMAIL_PASSWORD || 'your-app-password'
  }
});

// Helper function for sending error responses
const sendError = (res, statusCode, message) => {
    return res.status(statusCode).json({ error: message });
};

// Middleware to check if the user is an admin
const validateAdmin = (req, res, next) => {
    if (!req.user || !req.user.isAdmin) {
        return sendError(res, 403, "Access denied. Admins only.");
    }
    next();
};

// Register a new user (Admin or Regular User)
router.post("/", async (req, res) => {
    try {
        console.log("Received Registration Request:", req.body);

        const { username, password, isAdmin } = req.body;

        // Check if user already exists
        const existingUser = await Users.findOne({ where: { username } });
        if (existingUser) {
            return sendError(res, 400, "Username already taken");
        }

        // Password strength check
        if (password.length < 8) {
            return sendError(res, 400, "Password must be at least 8 characters long");
        }

        // Hash password before storing it
        const hash = await bcrypt.hash(password, 10);

        // Create new user in the database
        const newUser = await Users.create({ 
            username, 
            password: hash, 
            isAdmin: isAdmin || false 
        });

        console.log("New User Created:", newUser);
        return res.json({ message: "SUCCESS", user: newUser });
    } catch (error) {
        console.error("Registration Error Details:", error);
        return sendError(res, 500, `Registration failed: ${error.message}`);
    }
});

// Login user
router.post("/login", async (req, res) => {
    try {
        console.log("Login Request:", req.body);
        const { username, password } = req.body;

        const user = await Users.findOne({ where: { username } });

        if (!user) {
            return sendError(res, 401, "User doesn't exist");
        }

        const match = await bcrypt.compare(password, user.password);

        if (!match) {
            return sendError(res, 401, "Wrong Username and Password Combination");
        }

        // Generate JWT with user role
        const accessToken = sign(
            { username: user.username, id: user.id, isAdmin: user.isAdmin }, 
            SECRET_KEY, 
            { expiresIn: "1h" }
        );

        return res.json({ 
            token: accessToken, 
            user: { id: user.id, username: user.username, isAdmin: user.isAdmin } 
        });
    } catch (error) {
        console.error("Login error:", error);
        return sendError(res, 500, "Server error");
    }
});

// Auth route to get the authenticated user's details
router.get('/auth', validateToken, (req, res) => {
    res.json(req.user);
});

// Admin-only route
router.get('/admin', validateToken, validateAdmin, (req, res) => {
    res.json({ message: "Welcome Admin!", user: req.user });
});

// Forgot Password - Request Reset Link
router.post("/forgot-password", async (req, res) => {
  try {
    const { email } = req.body;
    
    // Find user by email (using username field since that's your email field)
    const user = await Users.findOne({ where: { username: email } });
    
    if (!user) {
      // For security reasons, always return success even if email doesn't exist
      return res.json({ message: "If your email exists in our system, you will receive a reset link shortly." });
    }
    
    // Generate a reset token
    const resetToken = crypto.randomBytes(20).toString('hex');
    const resetExpires = Date.now() + 3600000; // 1 hour from now
    
    // Store the token in the database
    await user.update({
      resetPasswordToken: resetToken,
      resetPasswordExpires: resetExpires
    });
    
    // Create reset URL
    const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password/${resetToken}`;
    
    // Send email
    const mailOptions = {
      to: email,
      from: process.env.EMAIL_USER || 'your-email@gmail.com',
      subject: 'Password Reset Request',
      text: `You are receiving this because you (or someone else) have requested the reset of the password for your account.\n\n
        Please click on the following link, or paste this into your browser to complete the process:\n\n
        ${resetUrl}\n\n
        If you did not request this, please ignore this email and your password will remain unchanged.\n`
    };
    
    await transporter.sendMail(mailOptions);
    
    return res.json({ message: "If your email exists in our system, you will receive a reset link shortly." });
  } catch (error) {
    console.error("Password reset request error:", error);
    return sendError(res, 500, "Error processing password reset request");
  }
});

// Reset Password - Verify token and update password
router.post("/reset-password/:token", async (req, res) => {
  try {
    const { password } = req.body;
    const { token } = req.params;
    
    // Find user with the reset token that hasn't expired
    const user = await Users.findOne({
      where: {
        resetPasswordToken: token,
        resetPasswordExpires: { [require('sequelize').Op.gt]: Date.now() }
      }
    });
    
    if (!user) {
      return sendError(res, 400, "Password reset token is invalid or has expired");
    }
    
    // Password strength check
    if (password.length < 8) {
      return sendError(res, 400, "Password must be at least 8 characters long");
    }
    
    // Update the user's password
    const hash = await bcrypt.hash(password, 10);
    
    await user.update({
      password: hash,
      resetPasswordToken: null,
      resetPasswordExpires: null
    });
    
    // Send confirmation email
    const mailOptions = {
      to: user.username, // Assuming username is the email
      from: process.env.EMAIL_USER || 'your-email@gmail.com',
      subject: 'Your password has been changed',
      text: `Hello,\n\nThis is a confirmation that the password for your account ${user.username} has just been changed.\n`
    };
    
    await transporter.sendMail(mailOptions);
    
    return res.json({ message: "Password has been updated successfully" });
  } catch (error) {
    console.error("Password reset error:", error);
    return sendError(res, 500, "Error resetting password");
  }
});

module.exports = router;
</file>

<file path="server/routes/Events.js">
const express = require("express");
const router = express.Router();
const { Events, Reviews } = require("../models");
const { validateToken } = require("../middlewares/AuthMiddleware");
const multer = require("multer");
const path = require("path");
const fs = require("fs");

// Configure multer for file uploads
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = "./uploads/events";
        // Create directory if it doesn't exist
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        cb(null, `event-${Date.now()}${path.extname(file.originalname)}`);
    }
});

const upload = multer({
    storage,
    limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit
    fileFilter: (req, file, cb) => {
        const fileTypes = /jpeg|jpg|png|gif/;
        const mimetype = fileTypes.test(file.mimetype);
        const extname = fileTypes.test(path.extname(file.originalname).toLowerCase());
        
        if (mimetype && extname) {
            return cb(null, true);
        }
        cb(new Error("Only image files are allowed!"));
    }
});

// Fetch all events
router.get("/", async (req, res) => {
    try {
        const events = await Events.findAll();
        res.json(events);
    } catch (error) {
        console.error("Error fetching events:", error);
        res.status(500).json({ error: "Failed to fetch events" });
    }
});

// Create a new event (Requires Authentication)
router.post("/", validateToken, upload.single("image"), async (req, res) => {
    try {
        console.log("Received Event Data:", req.body); // Debugging
        
        const { 
            title, 
            location, 
            description, 
            date, 
            time, 
            category, 
            isPaid, 
            price, 
            ticketsAvailable, 
            registrationDeadline, 
            maxRegistrations, 
            minRegistrations,
            status
        } = req.body;
        
        // Validate required fields
        if (!title || !location || !description || !date || !time || !category) {
            return res.status(400).json({ error: "Missing required fields" });
        }

        // Create new event object
        const newEventData = {
            title,
            location,
            description,
            date,
            time,
            category,
            username: req.user.username,
            // Add paid event fields
            isPaid: isPaid === 'true' || isPaid === true,
            price: isPaid === 'true' || isPaid === true ? parseFloat(price) : 0,
            ticketsAvailable: parseInt(ticketsAvailable || 100),
            registrationDeadline: registrationDeadline || null,
            maxRegistrations: maxRegistrations ? parseInt(maxRegistrations) : null,
            minRegistrations: parseInt(minRegistrations || 1),
            status: status || 'active'
        };

        // Add image path if an image was uploaded
        if (req.file) {
            newEventData.image = `/uploads/events/${req.file.filename}`;
        }

        const newEvent = await Events.create(newEventData);

        res.status(201).json(newEvent);
    } catch (error) {
        console.error("Error creating event:", error);
        res.status(500).json({ error: "Failed to create event" });
    }
});

// Fetch specific event details and its reviews
router.get("/:eventId", async (req, res) => {
    try {
        const eventId = req.params.eventId;

        if (!eventId || isNaN(eventId)) {
            return res.status(400).json({ error: "Invalid event ID" });
        }

        const event = await Events.findByPk(eventId, {
            attributes: [
                "id", "title", "location", "description", "date", "time", "category", 
                "image", "username", "isPaid", "price", "ticketsAvailable", 
                "registrationDeadline", "maxRegistrations", "minRegistrations", "status"
            ],
        });

        if (!event) {
            return res.status(404).json({ error: "Event not found" });
        }

        const reviews = await Reviews.findAll({
            where: { EventId: eventId },
            attributes: ["id", "review_text", "rating", "username", "createdAt", "sentiment", "admin_response"],
        });

        res.json({ event, reviews });
    } catch (error) {
        console.error("Error fetching event:", error);
        res.status(500).json({ error: "Failed to fetch event" });
    }
});

// Update an event (Requires Authentication & Ownership)
router.put("/:eventId", validateToken, upload.single("image"), async (req, res) => {
    try {
        const eventId = req.params.eventId;
        const event = await Events.findByPk(eventId);

        if (!event) {
            return res.status(404).json({ error: "Event not found" });
        }

        // Ensure that only the event creator can update it
        if (event.username !== req.user.username) {
            return res.status(403).json({ error: "You are not authorized to update this event" });
        }

        const { 
            title, 
            location, 
            description, 
            date, 
            time, 
            category,
            isPaid, 
            price, 
            ticketsAvailable, 
            registrationDeadline, 
            maxRegistrations, 
            minRegistrations,
            status
        } = req.body;
        
        // Update event data
        const updateData = {
            title: title || event.title,
            location: location || event.location,
            description: description || event.description,
            date: date || event.date,
            time: time || event.time,
            category: category || event.category,
            // Update paid event fields
            isPaid: isPaid === 'true' || isPaid === true,
            price: isPaid === 'true' || isPaid === true ? parseFloat(price) : 0,
            ticketsAvailable: ticketsAvailable ? parseInt(ticketsAvailable) : event.ticketsAvailable,
            registrationDeadline: registrationDeadline || event.registrationDeadline,
            maxRegistrations: maxRegistrations ? parseInt(maxRegistrations) : event.maxRegistrations,
            minRegistrations: minRegistrations ? parseInt(minRegistrations) : event.minRegistrations,
            status: status || event.status
        };

        // Update image if a new one was uploaded
        if (req.file) {
            // Delete old image if exists
            if (event.image) {
                const oldImagePath = path.join(__dirname, '..', event.image);
                if (fs.existsSync(oldImagePath)) {
                    fs.unlinkSync(oldImagePath);
                }
            }
            updateData.image = `/uploads/events/${req.file.filename}`;
        }

        await Events.update(updateData, { where: { id: eventId } });
        
        const updatedEvent = await Events.findByPk(eventId);
        res.json(updatedEvent);
    } catch (error) {
        console.error("Error updating event:", error);
        res.status(500).json({ error: "Failed to update event" });
    }
});

// Delete an event (Requires Authentication & Ownership)
router.delete("/:eventId", validateToken, async (req, res) => {
    try {
        const eventId = req.params.eventId;
        const event = await Events.findByPk(eventId);

        if (!event) {
            return res.status(404).json({ error: "Event not found" });
        }

        // Ensure that only the event creator can delete it
        if (event.username !== req.user.username) {
            return res.status(403).json({ error: "You are not authorized to delete this event" });
        }

        // Delete associated image if it exists
        if (event.image) {
            const imagePath = path.join(__dirname, '..', event.image);
            if (fs.existsSync(imagePath)) {
                fs.unlinkSync(imagePath);
            }
        }

        await Events.destroy({ where: { id: eventId } });
        res.json({ message: "Event deleted successfully" });
    } catch (error) {
        console.error("Error deleting event:", error);
        res.status(500).json({ error: "Failed to delete event" });
    }
});

// Serve static event images
router.get("/images/:filename", (req, res) => {
    const filename = req.params.filename;
    const imagePath = path.join(__dirname, "../uploads/events", filename);
    
    if (fs.existsSync(imagePath)) {
        res.sendFile(imagePath);
    } else {
        res.status(404).json({ error: "Image not found" });
    }
});

module.exports = router;
</file>

<file path="client/src/pages/AdminDashboard.js">
"use client"

import { useEffect, useState, useContext, useMemo, useCallback } from "react"
import axios from "axios"
import { useNavigate } from "react-router-dom"
import "bootstrap/dist/css/bootstrap.min.css"
import "bootstrap-icons/font/bootstrap-icons.min.css"
import { AuthContext } from "../helpers/AuthContext"
import { format } from "date-fns"

export default function AdminDashboard() {
  const [listOfEvents, setListOfEvents] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("")
  const [hoveredEventId, setHoveredEventId] = useState(null)
  const { authState } = useContext(AuthContext)
  const navigate = useNavigate()

  useEffect(() => {
    if (!authState.status || !authState.isAdmin) {
      navigate("/login")
    } else {
      axios
        .get("http://localhost:3001/events")
        .then((response) => {
          setListOfEvents(response.data)
          setLoading(false)
        })
        .catch((error) => {
          setError("There was an error loading events. Please try again later.")
          setLoading(false)
        })
    }
  }, [authState, navigate])

  // Get unique categories from events
  const categories = useMemo(() => {
    const uniqueCategories = [...new Set(listOfEvents.map(event => event.category).filter(Boolean))]
    return uniqueCategories.sort()
  }, [listOfEvents])

  const filterEvents = useCallback((events, query, category) => {
    return events.filter(
      (event) => {
        const matchesQuery = 
          event.title.toLowerCase().includes(query.toLowerCase()) ||
          event.location.toLowerCase().includes(query.toLowerCase()) ||
          (event.category && event.category.toLowerCase().includes(query.toLowerCase()));
        
        const matchesCategory = !category || event.category === category;
        
        return matchesQuery && matchesCategory;
      }
    )
  }, [])

  const filteredEvents = useMemo(
    () => filterEvents(listOfEvents, searchQuery, selectedCategory),
    [listOfEvents, searchQuery, selectedCategory, filterEvents],
  )

  // Function to correct the image path
  const getImageUrl = (imagePath) => {
    if (!imagePath) return null;
    
    // If the path already starts with http, return as is
    if (imagePath.startsWith('http')) return imagePath;
    
    // If the path begins with "/uploads/events/", remove the leading slash
    if (imagePath.startsWith('/uploads/events/')) {
      return `http://localhost:3001${imagePath}`;
    }
    
    // For any other case, just append the path to the base URL
    return `http://localhost:3001/${imagePath}`;
  };

  if (loading) {
    return (
      <div className="d-flex justify-content-center">
        <div className="spinner-border" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="alert alert-danger" role="alert">
        {error}{" "}
        <button className="btn btn-warning btn-sm" onClick={() => setLoading(true)}>
          Retry
        </button>
      </div>
    )
  }

  const today = new Date()
  const upcomingEvents = listOfEvents.filter((event) => new Date(event.date) >= today)
  const pastEvents = listOfEvents.filter((event) => new Date(event.date) < today)
  
  // Group events by category
  const eventsByCategory = listOfEvents.reduce((acc, event) => {
    const category = event.category || "Uncategorized";
    if (!acc[category]) {
      acc[category] = [];
    }
    acc[category].push(event);
    return acc;
  }, {});

  return (
    <div className="admin-dashboard">
     {/* Professional Header Section with Enhanced Design */}
<header className="admin-header bg-primary text-white py-4 mb-4 shadow-sm">
  <div className="container">
    <div className="row align-items-center">
      <div className="col-md-4">
        <h1 className="h2 mb-1">Event Management</h1>
        <p className="mb-0 text-white-50">
          Welcome, {authState.username || 'Administrator'}
        </p>
      </div>
      
      <div className="col-md-4 text-center">
        <div className="header-spotlight py-2 px-3 rounded-pill bg-white bg-opacity-10 mb-2">
          <i className="bi bi-calendar-check text-warning me-2"></i>
          <span className="fw-bold">{upcomingEvents.length} Upcoming Events</span>
        </div>
        <div className="d-flex justify-content-center">
          <button 
            className="btn btn-sm btn-light me-2 shadow-sm" 
            onClick={() => navigate('/create_event')}
          >
            <i className="bi bi-plus-circle me-1"></i> New Event
          </button>
          <button 
            className="btn btn-sm btn-warning shadow-sm"
            onClick={() => navigate('/AdminAIReviewsDashboard')}
          >
            <i className="bi bi-graph-up me-1"></i> Analytics
          </button>
        </div>
      </div>
      
      <div className="col-md-4 text-end">
        <div className="header-date-display bg-white bg-opacity-10 p-2 rounded text-end d-inline-block">
          <div className="small text-white-50">Today's Date</div>
          <div className="fw-bold">{format(new Date(), "MMMM dd, yyyy")}</div>
        </div>
      </div>
    </div>
  </div>
  
  {/* Decorative wave element */}
  <div className="header-wave position-absolute bottom-0 start-0 w-100 overflow-hidden" style={{ height: "15px" }}>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 100" preserveAspectRatio="none" style={{ height: "100%", width: "100%" }}>
      <path 
        fill="#f4f6f9" 
        fillOpacity="1" 
        d="M0,32L48,37.3C96,43,192,53,288,64C384,75,480,85,576,80C672,75,768,53,864,48C960,43,1056,53,1152,58.7C1248,64,1344,64,1392,64L1440,64L1440,100L1392,100C1344,100,1248,100,1152,100C1056,100,960,100,864,100C768,100,672,100,576,100C480,100,384,100,288,100C192,100,96,100,48,100L0,100Z"
      ></path>
    </svg>
  </div>
  
  {/* Add custom styles */}
  <style jsx>{`
    .admin-header {
      background: linear-gradient(135deg, #04305c 0%, #0a5dc2 100%) !important;
      position: relative;
      overflow: hidden;
    }
    
    .header-spotlight {
      border: 1px solid rgba(255, 255, 255, 0.2);
      animation: pulse 2s infinite;
    }
    
    .header-date-display {
      border-left: 3px solid #FFD700;
    }
    
    @keyframes pulse {
      0% { box-shadow: 0 0 0 0 rgba(255, 215, 0, 0.4); }
      70% { box-shadow: 0 0 0 10px rgba(255, 215, 0, 0); }
      100% { box-shadow: 0 0 0 0 rgba(255, 215, 0, 0); }
    }
  `}</style>
</header>

      <div className="container" style={{ paddingTop: "20px" }}>
        {/* Statistics Section */}
        <div className="row text-center mb-4">
          <div className="col-md-3">
            <div className="card bg-primary text-white p-3">
              <h5>Total Events</h5>
              <h3>{listOfEvents.length}</h3>
            </div>
          </div>
          <div className="col-md-3">
            <div className="card bg-success text-white p-3">
              <h5>Upcoming Events</h5>
              <h3>{upcomingEvents.length}</h3>
            </div>
          </div>
          <div className="col-md-3">
            <div className="card bg-danger text-white p-3">
              <h5>Past Events</h5>
              <h3>{pastEvents.length}</h3>
            </div>
          </div>
          <div className="col-md-3">
            <div className="card bg-info text-white p-3">
              <h5>Categories</h5>
              <h3>{categories.length}</h3>
            </div>
          </div>
        </div>

        {/* Search and Filter Bar */}
        <div className="row mb-4">
          <div className="col-md-6">
            <div className="input-group">
              <input
                type="text"
                className="form-control"
                placeholder="Search events..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
              <button 
                className="btn text-white" 
                style={{ backgroundColor: "#FF6B6B" }} 
                onClick={() => setSearchQuery(searchQuery.trim())}
              >
                <i className="bi bi-search"></i> Search
              </button>
            </div>
          </div>
          <div className="col-md-6">
            <select 
              className="form-select" 
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
            >
              <option value="">All Categories</option>
              {categories.map(category => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>
          </div>
        </div>

        {/* Events List */}
        <div className="row">
          {filteredEvents.length === 0 ? (
            <p>No events found.</p>
          ) : (
            filteredEvents.map((event) => (
              <div className="col-md-4 mb-4" key={event.id}>
                <div
                  className="card h-100 shadow event-card"
                  onClick={() => navigate(`/response/${event.id}`)}
                  style={{ cursor: "pointer" }}
                  onMouseEnter={() => setHoveredEventId(event.id)}
                  onMouseLeave={() => setHoveredEventId(null)}
                >
                  {/* Event Image with Hover Effect */}
                  <div style={{ height: "180px", overflow: "hidden", position: "relative" }}>
                    {event.image ? (
                      <>
                        <img 
                          src={getImageUrl(event.image)} 
                          className="card-img-top" 
                          alt={event.title}
                          style={{ 
                            height: "100%", 
                            width: "100%", 
                            objectFit: "cover",
                            transition: "transform 0.3s ease"
                          }}
                        />
                        {/* Overlay that appears on hover */}
                        {hoveredEventId === event.id && (
                          <div 
                            style={{
                              position: "absolute",
                              top: 0,
                              left: 0,
                              right: 0,
                              bottom: 0,
                              backgroundColor: "rgba(4, 48, 92, 0.85)",
                              color: "white",
                              display: "flex",
                              flexDirection: "column",
                              justifyContent: "center",
                              alignItems: "center",
                              padding: "15px",
                              transition: "opacity 0.3s ease",
                              opacity: 1,
                              textAlign: "center"
                            }}
                          >
                            <h5>{event.title}</h5>
                            <p className="mb-1"><i className="bi bi-calendar-event-fill me-2"></i>{format(new Date(event.date), "MMM dd, yyyy")}</p>
                            <p className="mb-1"><i className="bi bi-clock-fill me-2"></i>{event.time ? format(new Date(`2000-01-01T${event.time}`), "h:mm a") : "N/A"}</p>
                            <p className="mb-1"><i className="bi bi-geo-alt-fill me-2"></i>{event.location}</p>
                            <button className="btn btn-sm btn-light mt-2">View Details</button>
                          </div>
                        )}
                      </>
                    ) : (
                      <div 
                        className="d-flex justify-content-center align-items-center"
                        style={{ 
                          height: "100%", 
                          backgroundColor: "#f0f0f0",
                          color: "#aaa"
                        }}
                      >
                        <i className="bi bi-image" style={{ fontSize: "3rem" }}></i>
                      </div>
                    )}
                  </div>
                  
                  {/* Category Badge */}
                  <div className="position-absolute" style={{ top: "10px", right: "10px", zIndex: 2 }}>
                    <span className="badge bg-light text-dark">
                      {event.category || "Uncategorized"}
                    </span>
                  </div>
                  
                  <div className="card-header text-white" style={{ backgroundColor: "#04305c" }}>
                    <h5 className="card-title mb-0">{event.title}</h5>
                  </div>
                  
                  <div className="card-body">
                    <p className="card-text">
                      <i className="bi bi-geo-alt-fill text-success me-2"></i> {event.location}
                    </p>
                    <p className="card-text">
                      <i className="bi bi-calendar-event-fill text-success me-2"></i> 
                      {format(new Date(event.date), "MMM dd, yyyy")}
                    </p>
                    <p className="card-text">
                      <i className="bi bi-clock-fill text-success me-2"></i> 
                      {event.time ? format(new Date(`2000-01-01T${event.time}`), "h:mm a") : "N/A"}
                    </p>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>

        {/* Category View Toggle */}
        <div className="row mt-5">
          <div className="col-12">
            <h3 className="mb-4">Events by Category</h3>
            <div className="accordion" id="categoryAccordion">
              {Object.keys(eventsByCategory).map((category, index) => (
                <div className="accordion-item" key={category}>
                  <h2 className="accordion-header" id={`heading${index}`}>
                    <button 
                      className="accordion-button collapsed" 
                      type="button" 
                      data-bs-toggle="collapse" 
                      data-bs-target={`#collapse${index}`} 
                      aria-expanded="false" 
                      aria-controls={`collapse${index}`}
                    >
                      {category} ({eventsByCategory[category].length})
                    </button>
                  </h2>
                  <div 
                    id={`collapse${index}`} 
                    className="accordion-collapse collapse" 
                    aria-labelledby={`heading${index}`} 
                    data-bs-parent="#categoryAccordion"
                  >
                    <div className="accordion-body">
                      <div className="table-responsive">
                        <table className="table table-hover">
                          <thead>
                            <tr>
                              <th>Image</th>
                              <th>Title</th>
                              <th>Date</th>
                              <th>Time</th>
                              <th>Location</th>
                            </tr>
                          </thead>
                          <tbody>
                            {eventsByCategory[category].map(event => (
                              <tr 
                                key={event.id} 
                                onClick={() => navigate(`/response/${event.id}`)}
                                style={{ cursor: "pointer" }}
                              >
                                <td>
                                  {event.image ? (
                                    <img 
                                      src={getImageUrl(event.image)} 
                                      alt={event.title}
                                      style={{ 
                                        width: "50px", 
                                        height: "50px", 
                                        objectFit: "cover",
                                        borderRadius: "4px" 
                                      }}
                                    />
                                  ) : (
                                    <div 
                                      className="d-flex justify-content-center align-items-center"
                                      style={{ 
                                        width: "50px", 
                                        height: "50px", 
                                        backgroundColor: "#f0f0f0",
                                        borderRadius: "4px" 
                                      }}
                                    >
                                      <i className="bi bi-image"></i>
                                    </div>
                                  )}
                                </td>
                                <td>{event.title}</td>
                                <td>{format(new Date(event.date), "MMM dd, yyyy")}</td>
                                <td>{event.time ? format(new Date(`2000-01-01T${event.time}`), "h:mm a") : "N/A"}</td>
                                <td>{event.location}</td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        <style jsx>{`
          .event-card:hover .card-img-top {
            transform: scale(1.05);
          }
          
          .event-card {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
          }
          
          .event-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2) !important;
          }

          .admin-header {
            background-color: #04305c !important;
          }
          
          .admin-dashboard {
            background-color: #f4f6f9;
          }
        `}</style>
      </div>
    </div>
  )
}
</file>

<file path="client/src/App.css">
/* General Page Styles */
body {
  font-family: Arial, 'Times New Roman', Times, serif;
  background-color: #f8f9fa;
  margin: 0;
  padding-top: 70px; /* Adjust for fixed navbar */
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* Navbar Styles */
.navbar {
  background-color: #001F3F !important; /* Dark blue-grey */
  padding: 10px 50px;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.navbar .navbar-brand img {
  height: 100%; /* Adjust logo height to fit navbar */
  width: auto; /* Maintain aspect ratio */
}

/* Navbar Links */
.navbar-nav {
  margin: auto;
}

.nav-item .nav-link {
  color: white !important;
  font-size: 1.2rem;
  font-weight: bold !important;
  text-align: center;
  transition: color 0.3s ease-in-out;
  margin: 0 10px;
}

.nav-item .nav-link:hover {
  color: #FF6B6B !important;

}

.navbar-brand:hover {
  text-decoration: underline;
  color: #FF6B6B !important;
}

/* Adjust for fixed navbar on all screens */
.container.mt-4 {
  margin-top: 80px; /* Adjust for navbar height */
  padding-top: 20px;
  background-color: #ffffff;
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  width: 100%; /* Full width */
  max-width: 1200px; /* Center content */
  position: relative;
  color: white;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
  border-radius: 8px;
}

.container.mt-4::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5); /* Dark overlay */
  z-index: 0;
}

.container.mt-4 > * {
  position: relative;
  z-index: 1;
}

/* Card Styling */
.card {
  width: 100% !important;
  max-width: 900px; /* Ensure proper size */
  margin: auto;
  padding: 15px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Light shadow for depth */
}

/* React Calendar Tile */
.react-calendar__tile {
  position: relative;
  /* background-color: #0d6efd !important;
  color:white; */
}

/* Event Indicator Dot */
.event-dot {
  width: 6px;
  height: 6px;
  background-color: #ff0033;
  border-radius: 50%;
  position: absolute;
  bottom: 4px;
  left: 50%;
  transform: translateX(-50%);
}

/* Button Styles */
.button {
  display: inline-block;
  visibility: visible !important;
}

@keyframes glitch {
  0% { text-shadow: 2px 2px red; }
  25% { text-shadow: -2px -2px cyan; }
  50% { text-shadow: 2px -2px lime; }
  75% { text-shadow: -2px 2px yellow; }
  100% { text-shadow: 2px 2px red; }
}

.glitch-text {
  font-weight: bold;
  font-size: 2.5rem; /* Adjust size */
  color: #0d6efd; /* Text color */
  animation: glitch 0.5s infinite alternate; /* Apply animation */
}

.text-shadow {
  font-weight: bold;
  font-size: 2.5rem;
  text-shadow: 3px 3px 5px rgba(0, 0, 0, 0.5);
}

/* Responsive Design Adjustments for Navbar */
@media (max-width: 991px) {
  .navbar-nav {
    text-align: center;
  }

  .navbar-nav .nav-link {
    font-size: 1rem;
  }

  .navbar-toggler {
    border-color: #ffffff;
  }

  .navbar-toggler-icon {
    background-color: #ffffff;
  }
}

.event-card:hover {
  transform: scale(1.05);
  transition: all 0.3s ease;
}
</file>

<file path="client/src/pages/Home.js">
import React, { useEffect, useState, useContext } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap-icons/font/bootstrap-icons.min.css";
import { AuthContext } from "../helpers/AuthContext";
import { format } from "date-fns";

export default function Home() {
  const [listOfEvents, setListOfEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [searchType, setSearchType] = useState("title");
  const [selectedCategory, setSelectedCategory] = useState("");
  const [hoveredEventId, setHoveredEventId] = useState(null);
  const [visibleUpcomingEvents, setVisibleUpcomingEvents] = useState(8);
  const [visiblePastEvents, setVisiblePastEvents] = useState(8);
  const [showScrollButton, setShowScrollButton] = useState(false);
  const { authState } = useContext(AuthContext);
  const navigate = useNavigate();

  // Color palette
  const colors = {
    navy: "#1A2A56",
    navyLight: "#2A3A66",
    pink: "#FF6B6B",
    pinkLight: "#FF6B6B",
    white: "#FFFFFF",
    lightGray: "#F5F7FA",
    gray: "#E2E8F0",
    darkGray: "#718096",
    errorRed: "#FF4D6A",
    successGreen: "#2DD4BF",
  };
  
  // Footer styles defined at the top to avoid ESLint warnings
  const footerStyle = {
    backgroundColor: colors.navy,
    color: colors.white,
    padding: "1.5rem",
    textAlign: "center",
    width: "100%",
    boxShadow: "0 -5px 10px rgba(0,0,0,0.05)",
  };

  const footerContentStyle = {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    maxWidth: "800px",
    margin: "0 auto",
  };

  const footerTextStyle = {
    margin: "0.5rem 0",
    fontSize: "0.9rem",
    color: colors.lightGray,
  };

  const footerLinkStyle = {
    color: colors.pinkLight,
    textDecoration: "none",
    fontWeight: "500",
    transition: "color 0.3s ease",
  };

  const footerIconStyle = {
    color: colors.pink,
    marginRight: "0.5rem",
    verticalAlign: "middle",
  };

  useEffect(() => {
    if (!authState.status) {
      navigate("/login");
    } else {
      axios
        .get("http://localhost:3001/events")
        .then((response) => {
          setListOfEvents(response.data);
          setLoading(false);
        })
        .catch((error) => {
          setError("There was an error loading events. Please try again later.");
          setLoading(false);
        });
    }
  }, [authState, navigate]);

  useEffect(() => {
    const handleScroll = () => {
      setShowScrollButton(window.scrollY > 200);
    };

    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  // Extract unique categories from events
  const categories = [...new Set(listOfEvents
    .map(event => event.category)
    .filter(category => category && category.trim() !== "")
  )].sort();

  // Function to correct the image path
  const getImageUrl = (imagePath) => {
    if (!imagePath) return null;
    
    // If the path already starts with http, return as is
    if (imagePath.startsWith('http')) return imagePath;
    
    // If the path begins with "/uploads/events/", ensure it's properly formed
    if (imagePath.startsWith('/uploads/events/')) {
      return `http://localhost:3001${imagePath}`;
    }
    
    // For any other case, just append the path to the base URL
    return `http://localhost:3001/${imagePath}`;
  };

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  if (loading) {
    return (
      <div className="d-flex justify-content-center" style={{ paddingTop: "100px" }}>
        <div className="spinner-border" role="status" style={{ color: colors.navy }}>
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container-fluid" style={{ paddingTop: "100px" }}>
        <div className="alert alert-danger" role="alert">
          {error}{" "}
          <button 
            className="btn btn-sm" 
            onClick={() => setLoading(true)}
            style={{ backgroundColor: colors.navy, color: colors.white }}
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  const today = new Date();
  const upcomingEvents = listOfEvents
    .filter((event) => new Date(event.date) >= today)
    .sort((a, b) => new Date(a.date) - new Date(b.date));

  const pastEvents = listOfEvents
    .filter((event) => new Date(event.date) < today)
    .sort((a, b) => new Date(b.date) - new Date(a.date));

  // Filter events based on search criteria and category
  const filterEvents = (events) => {
    return events.filter((event) => {
      // Apply search filter
      let matchesSearch = true;
      if (searchQuery) {
        if (searchType === "title") {
          matchesSearch = event.title.toLowerCase().includes(searchQuery.toLowerCase());
        } else if (searchType === "location") {
          matchesSearch = event.location.toLowerCase().includes(searchQuery.toLowerCase());
        }
      }
      
      // Apply category filter
      const matchesCategory = !selectedCategory || event.category === selectedCategory;
      
      return matchesSearch && matchesCategory;
    });
  };

  const filteredUpcomingEvents = filterEvents(upcomingEvents);
  const filteredPastEvents = filterEvents(pastEvents);

  const loadMoreUpcoming = () => {
    setVisibleUpcomingEvents((prev) => prev + 8);
  };

  const loadMorePast = () => {
    setVisiblePastEvents((prev) => prev + 8);
  };

  // Create event cards grid with new design
  const createEventGrid = (events, visibleCount) => {
    const visibleEvents = events.slice(0, visibleCount);

    // Display a placeholder message if no events found
    if (visibleEvents.length === 0) {
      return (
        <div className="col-12 text-center py-4">
          <p className="fs-5 text-muted">No events found matching your search criteria.</p>
          {(searchQuery || selectedCategory) && (
            <button
              className="btn btn-outline-secondary mt-2"
              onClick={() => {
                setSearchQuery("");
                setSelectedCategory("");
              }}
              style={{ color: colors.navy, borderColor: colors.navy }}
            >
              <i className="bi bi-x-circle me-1"></i> Clear Filters
            </button>
          )}
        </div>
      );
    }

    // Return the actual events with NEW CARD DESIGN
    return visibleEvents.map((event) => (
      <div className="col-md-3 mb-4" key={event.id}>
        <div
          className="card h-100 shadow-sm event-card"
          onClick={() => navigate(`/event/${event.id}`)}
          style={{ 
            cursor: "pointer",
            borderRadius: "12px",
            overflow: "hidden",
            border: "none",
            height: "350px", // Fixed height to prevent shaking
            transition: "transform 0.3s ease, box-shadow 0.3s ease"
          }}
          onMouseEnter={() => setHoveredEventId(event.id)}
          onMouseLeave={() => setHoveredEventId(null)}
        >
          {/* Event Image with Hover Effect */}
          <div style={{ height: "180px", overflow: "hidden", position: "relative" }}>
            {event.image ? (
              <img 
                src={getImageUrl(event.image)} 
                className="card-img-top" 
                alt={event.title}
                style={{ 
                  height: "100%", 
                  width: "100%", 
                  objectFit: "cover",
                  transition: "transform 0.3s ease"
                }}
              />
            ) : (
              <div 
                className="d-flex justify-content-center align-items-center"
                style={{ 
                  height: "100%", 
                  backgroundColor: "#f0f0f0",
                  color: "#aaa"
                }}
              >
                <i className="bi bi-image" style={{ fontSize: "3rem" }}></i>
              </div>
            )}
            
            {/* Overlay that appears on hover */}
            <div 
              style={{
                position: "absolute",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                backgroundColor: "rgba(26, 42, 86, 0.85)",
                color: "white",
                display: "flex",
                flexDirection: "column",
                justifyContent: "center",
                alignItems: "center",
                padding: "15px",
                transition: "opacity 0.3s ease",
                opacity: hoveredEventId === event.id ? 1 : 0,
                textAlign: "center",
                pointerEvents: hoveredEventId === event.id ? "auto" : "none"
              }}
            >
              <h5>{event.title}</h5>
              <p className="mb-1"><i className="bi bi-calendar-event-fill me-2"></i>{format(new Date(event.date), "MMM dd, yyyy")}</p>
              <p className="mb-1"><i className="bi bi-clock-fill me-2"></i>{event.time ? format(new Date(`2000-01-01T${event.time}`), "h:mm a") : "N/A"}</p>
              <p className="mb-1"><i className="bi bi-geo-alt-fill me-2"></i>{event.location}</p>
              {event.username && (
                <p className="mb-1"><i className="bi bi-person-fill me-2"></i>By: {event.username}</p>
              )}
              <button 
                className="btn btn-sm mt-2" 
                style={{ backgroundColor: colors.pink, color: colors.white }}
              >
                View Details
              </button>
            </div>
          </div>
          
          {/* Category Badge */}
          <div className="position-absolute" style={{ top: "10px", right: "10px", zIndex: 2 }}>
            <span className="badge" style={{ backgroundColor: colors.pink, color: colors.white }}>
              {event.category || "Uncategorized"}
            </span>
          </div>
          
          {/* Card body - hidden on hover */}
          <div 
            className="card-body" 
            style={{ 
              display: hoveredEventId === event.id ? 'none' : 'block',
              backgroundColor: colors.white
            }}
          >
            <h5 className="card-title" style={{ color: colors.navy, fontWeight: "600" }}>{event.title}</h5>
            <p className="card-text" style={{ color: colors.darkGray }}>
              <i className="bi bi-calendar-event-fill me-2" style={{ color: colors.pink }}></i>
              {format(new Date(event.date), "MMM dd, yyyy")}
            </p>
            <p className="card-text" style={{ color: colors.darkGray }}>
              <i className="bi bi-geo-alt-fill me-2" style={{ color: colors.pink }}></i>
              {event.location}
            </p>
          </div>
        </div>
      </div>
    ));
  };

  // Footer styles moved to the top of the component

  return (
    <>
      <div className="container-fluid" style={{ display: "flex", flexDirection: "column", minHeight: "100vh" }}>
        <div className="container">
          {/* Search and Filter Bar */}
          <div className="row mb-4">
            <div className="col-lg-10 col-md-12 mx-auto">
              <div className="card shadow-sm" style={{ borderRadius: "12px", border: "none" }}>
                <div className="card-body">
                  <div className="row">
                    {/* Search Input */}
                    <div className="col-md-6 mb-2 mb-md-0">
                      <div className="input-group">
                        <span className="input-group-text border-0" style={{ backgroundColor: colors.white }}>
                          <i className="bi bi-search" style={{ color: colors.navy }}></i>
                        </span>
                        <input
                          type="text"
                          className="form-control border-0"
                          placeholder="Search events..."
                          value={searchQuery}
                          onChange={(e) => setSearchQuery(e.target.value)}
                          style={{ boxShadow: "none" }}
                        />
                      </div>
                    </div>
                    
                    {/* Search Type Selector */}
                    <div className="col-md-3 mb-2 mb-md-0">
                      <select
                        className="form-select border-0"
                        style={{
                          boxShadow: "none",
                          backgroundColor: colors.white,
                          color: colors.navy,
                        }}
                        value={searchType}
                        onChange={(e) => setSearchType(e.target.value)}
                      >
                        <option value="title">By Title</option>
                        <option value="location">By Location</option>
                      </select>
                    </div>
                    
                    {/* Category Filter */}
                    <div className="col-md-3">
                      <select 
                        className="form-select border-0"
                        value={selectedCategory}
                        onChange={(e) => setSelectedCategory(e.target.value)}
                        style={{ boxShadow: "none" }}
                      >
                        <option value="">All Categories</option>
                        {categories.map(category => (
                          <option key={category} value={category}>{category}</option>
                        ))}
                      </select>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Filter Results Indicator */}
          {(searchQuery || selectedCategory) && (
            <div className="row mb-3">
              <div className="col-12 text-center">
                <span
                  className="badge p-2"
                  style={{ backgroundColor: colors.white, color: colors.navy, border: `1px solid ${colors.navy}` }}
                >
                  Found {filteredUpcomingEvents.length + filteredPastEvents.length} events
                  {selectedCategory ? ` in "${selectedCategory}" category` : ""}
                  {searchQuery ? ` ${searchType === "title" ? "with title" : "at location"} containing "${searchQuery}"` : ""}
                </span>
              </div>
            </div>
          )}

          {/* Upcoming Events Section */}
          <div className="row">
            <div className="col-12 text-center mb-4">
              <h2 style={{ color: colors.navy, fontWeight: "700" }}>
                <span style={{ color: colors.pink }}>Upcoming</span> Events
              </h2>
            </div>
          </div>

          {/* Upcoming Events Grid */}
          <div className="row">
            {createEventGrid(filteredUpcomingEvents, visibleUpcomingEvents)}
          </div>

          {/* Load More Button for Upcoming Events */}
          {visibleUpcomingEvents < filteredUpcomingEvents.length && (
            <div className="row">
              <div className="col-12 text-center mb-5 mt-3">
                <button
                  className="btn px-4 py-2"
                  onClick={loadMoreUpcoming}
                  style={{
                    backgroundColor: colors.navy,
                    color: colors.white,
                    borderRadius: "12px",
                    fontWeight: "600"
                  }}
                >
                  Load More <i className="bi bi-arrow-down-circle ms-1"></i>
                </button>
              </div>
            </div>
          )}

          {/* Past Events Section */}
          <div className="row mt-5">
            <div className="col-12 text-center mb-4">
              <h2 style={{ color: colors.navy, fontWeight: "700" }}>
                Past Events
              </h2>
            </div>
          </div>

          {/* Past Events Grid */}
          <div className="row">
            {createEventGrid(filteredPastEvents, visiblePastEvents)}
          </div>

          {/* Load More Button for Past Events */}
          {visiblePastEvents < filteredPastEvents.length && (
            <div className="row">
              <div className="col-12 text-center mb-5 mt-3">
                <button
                  className="btn px-4 py-2"
                  onClick={loadMorePast}
                  style={{
                    backgroundColor: colors.navy,
                    color: colors.white,
                    borderRadius: "12px",
                    fontWeight: "600"
                  }}
                >
                  Load More <i className="bi bi-arrow-down-circle ms-1"></i>
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Scroll to Top Button */}
      {showScrollButton && (
        <button
          onClick={scrollToTop}
          className="btn shadow"
          style={{
            position: "fixed",
            bottom: "20px",
            right: "20px",
            borderRadius: "50%",
            width: "50px",
            height: "50px",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            fontSize: "20px",
            backgroundColor: colors.navy,
            color: colors.white,
            border: "none",
            transition: "all 0.3s ease",
            boxShadow: "0 4px 10px rgba(0,0,0,0.15)",
            zIndex: 1000
          }}
        >
          <i className="bi bi-arrow-up"></i>
        </button>
      )}

      {/* CSS for hover effects */}
      <style jsx>{`
        .event-card:hover .card-img-top {
          transform: scale(1.05);
        }
        
        .event-card:hover {
          transform: translateY(-5px);
          box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2) !important;
        }
      `}</style>

      {/* Footer with accessibility-compliant links */}
      <footer style={footerStyle}>
        <div style={footerContentStyle}>
          <p style={{ ...footerTextStyle, fontWeight: "600", fontSize: "1rem" }}>
            <i className="bi bi-heart-fill" style={footerIconStyle}></i> EventHub Community
          </p>
          <p style={footerTextStyle}>
            Connect with event organizers and attendees from around the world
          </p>
          <p style={footerTextStyle}>
            <button 
              onClick={() => navigate("/terms")} 
              style={{...footerLinkStyle, background: "none", border: "none", cursor: "pointer", padding: 0}}
            >
              Terms
            </button> •
            <button 
              onClick={() => navigate("/privacy")} 
              style={{...footerLinkStyle, background: "none", border: "none", cursor: "pointer", margin: "0 0.5rem", padding: 0}}
            >
              Privacy
            </button> •
            <button 
              onClick={() => navigate("/support")} 
              style={{...footerLinkStyle, background: "none", border: "none", cursor: "pointer", padding: 0}}
            >
              Support
            </button>
          </p>
          <p style={{ ...footerTextStyle, marginTop: "0.5rem", fontSize: "0.8rem" }}>
            © {new Date().getFullYear()} EventHub. All rights reserved.
          </p>
        </div>
      </footer>
    </>
  );
}
</file>

<file path="server/package.json">
{
  "name": "server",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon index.js"
  },
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@stripe/react-stripe-js": "^3.5.1",
    "@stripe/stripe-js": "^6.1.0",
    "axios": "^1.7.9",
    "bcryptjs": "^3.0.2",
    "bootstrap": "^5.3.3",
    "cors": "^2.8.5",
    "crypto": "^1.0.1",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "jsonwebtoken": "^9.0.2",
    "multer": "^1.4.5-lts.1",
    "mysql2": "^3.12.0",
    "natural": "^8.0.1",
    "nodemailer": "^6.10.0",
    "nodemon": "^3.1.9",
    "openai": "^4.87.3",
    "sentiment": "^5.0.2",
    "sequelize": "^6.37.5",
    "sequelize-cli": "^6.6.2",
    "socket.io": "^4.8.1",
    "stripe": "^17.7.0"
  }
}
</file>

<file path="server/routes/Reviews.js">
const express = require("express");
const router = express.Router();
const { Reviews, Events, Users, Notifications } = require("../models");
const { validateToken } = require("../middlewares/AuthMiddleware");
const Sentiment = require("sentiment");

const sentimentAnalyzer = new Sentiment(); // Initialize once

/**
 * Admin Response to a Review
 */
router.put("/respond/:reviewId", validateToken, async (req, res) => {
    try {
        console.log("Admin status:", req.user.isAdmin);
        if (!req.user.isAdmin) {
            return res.status(403).json({ error: "Only administrators can respond to reviews" });
        }

        const { reviewId } = req.params;
        const { adminResponse } = req.body;

        if (!reviewId || !adminResponse.trim()) {
            return res.status(400).json({ error: "Review ID and admin response are required" });
        }

        const review = await Reviews.findByPk(reviewId, {
            include: [{ model: Users }]
        });
        
        if (!review) {
            return res.status(404).json({ error: "Review not found" });
        }

        const event = await Events.findByPk(review.EventId);
        const eventTitle = event ? event.title : "an event";

        review.admin_response = adminResponse;
        console.log("Updating review:", review.toJSON());
        await review.save();

        // Create a notification in the database if Notifications model exists
        if (Notifications && review.UserId) {
            try {
                const notification = await Notifications.create({
                    message: `Admin responded to your review of "${eventTitle}"`,
                    type: "review_response",
                    relatedId: review.EventId,
                    userId: review.UserId,
                    isRead: false,
                    isAdminNotification: false,
                });
                
                // Send real-time notification if Socket.IO is configured
                if (req.app.io && review.UserId) {
                    req.app.io.to(`user-${review.UserId}`).emit("user-notification", {
                        id: notification.id,
                        message: `Admin responded to your review of "${eventTitle}"`,
                        type: "review_response",
                        relatedId: review.EventId,
                        isRead: false,
                        createdAt: new Date(),
                    });
                    console.log(`Notification sent to user-${review.UserId}`);
                }
            } catch (notificationError) {
                // Log notification error but continue with the response
                console.error("Error sending notification:", notificationError);
            }
        }

        return res.json({
            message: "Admin response added successfully.",
            response: review.admin_response,
        });
    } catch (error) {
        console.error("Error responding to review:", error.stack);
        return res.status(500).json({ error: "Internal Server Error", details: error.message });
    }
});

/**
 * Fetch All Reviews for Admin Dashboard
 */
router.get("/", validateToken, async (req, res) => {
    try {
        console.log("Admin status:", req.user.isAdmin);
        if (!req.user.isAdmin) {
            return res.status(403).json({ error: "Access denied" });
        }

        const reviews = await Reviews.findAll({
            include: [{ model: Events, attributes: ["title"] }],
            order: [["createdAt", "DESC"]],
        });

        return res.status(200).json(reviews.map(review => ({
            id: review.id,
            review_text: review.review_text,
            rating: review.rating,
            username: review.username,
            sentiment: review.sentiment,
            admin_response: review.admin_response,
            event_name: review.Event ? review.Event.title : "Unknown Event",
            createdAt: review.createdAt,
        })));
    } catch (error) {
        console.error("Error fetching reviews:", error.stack);
        return res.status(500).json({ error: "Internal Server Error" });
    }
});

/**
 * Sentiment Analysis API (Standalone)
 */
router.post("/sentiment", async (req, res) => {
    try {
        const { text } = req.body;
        if (!text.trim()) {
            return res.status(400).json({ error: "Text is required for sentiment analysis" });
        }

        const result = sentimentAnalyzer.analyze(text);
        const sentimentCategory = result.score > 0 ? "positive" : result.score < 0 ? "negative" : "neutral";

        return res.json({ sentiment: sentimentCategory, score: result.score });
    } catch (error) {
        console.error("Error analyzing sentiment:", error.stack);
        return res.status(500).json({ error: "Internal Server Error" });
    }
});

/**
 * Post a New Review (with Sentiment)
 */
router.post("/", validateToken, async (req, res) => {
    try {
        const { review_text, rating, eventId } = req.body;
        const userId = req.user?.id;
        const username = req.user?.username;

        if (!userId || !username) {
            return res.status(401).json({ error: "Unauthorized" });
        }
        if (!review_text.trim() || !rating || !eventId) {
            return res.status(400).json({ error: "Missing required fields" });
        }
        if (rating < 1 || rating > 5) {
            return res.status(400).json({ error: "Rating must be between 1 and 5" });
        }

        const existingReview = await Reviews.findOne({ where: { EventId: eventId, UserId: userId } });
        if (existingReview) {
            return res.status(400).json({ error: `You have already reviewed event ID ${eventId}.` });
        }

        // Get event details for the notification
        const event = await Events.findByPk(eventId);
        const eventTitle = event ? event.title : "Unknown Event";

        // Perform Sentiment Analysis
        const result = sentimentAnalyzer.analyze(review_text);
        const sentimentCategory = result.score > 0 ? "positive" : result.score < 0 ? "negative" : "neutral";

        const newReview = await Reviews.create({
            review_text,
            rating,
            EventId: eventId,
            UserId: userId,
            username,
            sentiment: sentimentCategory,
        });

        // Send admin notification for new review
        if (req.app.io) {
            req.app.io.to('admin-channel').emit('new-review', {
                reviewId: newReview.id,
                eventId: eventId,
                userName: username,
                rating: rating,
                productName: eventTitle
            });
            console.log('Admin notification sent for new review');
        }

        console.log(`New review created by user ${username} for event ID ${eventId}`);

        // Also create a notification entry in the database for all admins
        try {
            const admins = await Users.findAll({ where: { isAdmin: true } });
            
            for (const admin of admins) {
                await Notifications.create({
                    message: `New review (${rating}★) submitted by ${username} for "${eventTitle}"`,
                    type: "review",
                    relatedId: newReview.id,
                    userId: admin.id,
                    isAdminNotification: true,
                    isRead: false,
                    metadata: JSON.stringify({
                        reviewId: newReview.id,
                        eventId: eventId,
                        rating: rating,
                        productName: eventTitle
                    })
                });
            }
        } catch (notificationError) {
            console.error("Error creating admin notification record:", notificationError);
            // Continue with the response even if notification fails
        }

        return res.status(201).json({
            message: "Review added successfully",
            review: {
                id: newReview.id,
                review_text,
                rating,
                eventId,
                username,
                sentiment: newReview.sentiment,
            },
        });
    } catch (error) {
        console.error("Error adding review:", error.stack);
        return res.status(500).json({ error: "Internal Server Error" });
    }
});

/**
 * Get Event Details with Reviews
 */
router.get("/:eventId", async (req, res) => {
    try {
        const { eventId } = req.params;

        const event = await Events.findByPk(eventId, {
            include: {
                model: Reviews,
                include: [{ model: Users, attributes: ["username"] }],
                order: [["createdAt", "DESC"]],
            },
        });

        if (!event) {
            return res.status(404).json({ error: "Event not found" });
        }

        return res.status(200).json(event);
    } catch (error) {
        console.error("Error fetching event details and reviews:", error.stack);
        return res.status(500).json({ error: "Internal Server Error" });
    }
});

/**
 * Get a specific review by ID (for admin responses)
 */
router.get("/details/:reviewId", validateToken, async (req, res) => {
    try {
        const { reviewId } = req.params;
        
        const review = await Reviews.findByPk(reviewId, {
            include: [
                { model: Users, attributes: ["username"] },
                { model: Events, attributes: ["id", "title", "date", "image"] }
            ]
        });
        
        if (!review) {
            return res.status(404).json({ error: "Review not found" });
        }
        
        return res.status(200).json(review);
    } catch (error) {
        console.error("Error fetching review details:", error.stack);
        return res.status(500).json({ error: "Internal Server Error" });
    }
});

/**
 * Get pending reviews (no admin response)
 */
router.get("/pending/list", validateToken, async (req, res) => {
    try {
        if (!req.user.isAdmin) {
            return res.status(403).json({ error: "Access denied" });
        }

        const pendingReviews = await Reviews.findAll({
            where: {
                admin_response: null
            },
            include: [
                { model: Events, attributes: ["id", "title", "date"] }
            ],
            order: [["createdAt", "DESC"]]
        });

        return res.status(200).json(pendingReviews);
    } catch (error) {
        console.error("Error fetching pending reviews:", error.stack);
        return res.status(500).json({ error: "Internal Server Error" });
    }
});

/**
 * Delete a Review
 */
router.delete("/:reviewId", validateToken, async (req, res) => {
    try {
        const reviewId = parseInt(req.params.reviewId, 10);
        
        if (isNaN(reviewId) || reviewId <= 0) {
            return res.status(400).json({ error: "Invalid review ID" });
        }
        
        const review = await Reviews.findByPk(reviewId);
        if (!review) {
            return res.status(404).json({ error: "Review not found" });
        }

        // Allow Admin or Review Owner to delete
        if (req.user.isAdmin || review.UserId === req.user.id) {
            await review.destroy();
            return res.status(200).json({ message: "Review deleted successfully" });
        } else {
            return res.status(403).json({ error: "You are not authorized to delete this review" });
        }
    } catch (error) {
        console.error("Error deleting review:", error.stack);
        return res.status(500).json({ error: "Internal Server Error" });
    }
});

/**
 * Get reviews statistics for an event
 */
router.get("/stats/:eventId", async (req, res) => {
    try {
        const { eventId } = req.params;
        
        const reviews = await Reviews.findAll({
            where: { EventId: eventId },
            attributes: ['rating', 'sentiment']
        });
        
        if (reviews.length === 0) {
            return res.status(200).json({
                totalReviews: 0,
                averageRating: 0,
                sentimentBreakdown: {
                    positive: 0,
                    neutral: 0,
                    negative: 0
                },
                ratingDistribution: {
                    '1': 0, '2': 0, '3': 0, '4': 0, '5': 0
                }
            });
        }
        
        // Calculate average rating
        const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
        const averageRating = totalRating / reviews.length;
        
        // Calculate sentiment breakdown
        const sentimentBreakdown = {
            positive: reviews.filter(r => r.sentiment === 'positive').length,
            neutral: reviews.filter(r => r.sentiment === 'neutral').length,
            negative: reviews.filter(r => r.sentiment === 'negative').length
        };
        
        // Calculate rating distribution
        const ratingDistribution = {
            '1': 0, '2': 0, '3': 0, '4': 0, '5': 0
        };
        
        reviews.forEach(review => {
            ratingDistribution[review.rating.toString()]++;
        });
        
        return res.status(200).json({
            totalReviews: reviews.length,
            averageRating: parseFloat(averageRating.toFixed(1)),
            sentimentBreakdown,
            ratingDistribution
        });
    } catch (error) {
        console.error("Error fetching review statistics:", error.stack);
        return res.status(500).json({ error: "Internal Server Error" });
    }
});

/**
 * Get user reviews for profile
 */
router.get("/user/:userId", validateToken, async (req, res) => {
    try {
        const { userId } = req.params;
        
        // Only allow users to access their own reviews or admins to access any
        if (req.user.id !== parseInt(userId) && !req.user.isAdmin) {
            return res.status(403).json({ error: "Access denied" });
        }
        
        const reviews = await Reviews.findAll({
            where: { UserId: userId },
            include: [
                { model: Events, attributes: ["id", "title", "date", "image"] }
            ],
            order: [["createdAt", "DESC"]]
        });
        
        return res.status(200).json(reviews);
    } catch (error) {
        console.error("Error fetching user reviews:", error.stack);
        return res.status(500).json({ error: "Internal Server Error" });
    }
});

module.exports = router;
</file>

<file path="client/package.json">
{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "proxy": "http://localhost:3001",
  "dependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "@fortawesome/fontawesome-free": "^6.7.2",
    "axios": "^1.8.4",
    "bootstrap": "^5.3.3",
    "bootstrap-icons": "^1.11.3",
    "chart.js": "^4.4.8",
    "cra-template": "1.2.0",
    "date-fns": "^4.1.0",
    "dotenv": "^16.4.7",
    "font-awesome": "^4.7.0",
    "formik": "^2.4.6",
    "openai": "^4.87.3",
    "react": "^19.0.0",
    "react-bootstrap": "^2.10.9",
    "react-calendar": "^5.1.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.0.0",
    "react-icons": "^5.4.0",
    "react-router-dom": "^7.4.0",
    "react-scripts": "^5.0.1",
    "sentiment": "^5.0.2",
    "socket.io-client": "^4.8.1",
    "tough-cookie": "^5.1.0",
    "web-vitals": "^4.2.4",
    "yup": "^1.6.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "dev": "npm start"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "html-webpack-plugin": "^5.6.3",
    "semver": "^7.7.0",
    "shell-quote": "^1.8.2",
    "webpack": "^5.97.1",
    "webpack-dev-middleware": "^7.4.2"
  }
}
</file>

<file path="client/src/pages/CreateEvent.js">
"use client"

import { useContext, useEffect, useState } from "react"
import { Formik, Form, Field, ErrorMessage } from "formik"
import * as Yup from "yup"
import axios from "axios"
import { useNavigate } from "react-router-dom"
import "bootstrap/dist/css/bootstrap.min.css"
import { FaCalendarAlt, FaMapMarkerAlt, FaFileAlt, FaPlus, FaHeart, FaClock, FaTag, 
         FaImage, FaDollarSign, FaTicketAlt, FaCalendarCheck, FaUsers, FaUserPlus } from "react-icons/fa"
import { AuthContext } from "../helpers/AuthContext"


function CreateEvent() {
  const { authState } = useContext(AuthContext)
  const navigate = useNavigate()
  const [currentDate] = useState(new Date().toISOString().split("T")[0])
  const [successMessage, setSuccessMessage] = useState("")
  const [errorMessage, setErrorMessage] = useState("")
  const [isHovered, setIsHovered] = useState(false)
  const [previewImage, setPreviewImage] = useState(null)
  // Remove the unused state variable
  // const [isPaidEvent, setIsPaidEvent] = useState(false)

  const initialValues = {
    title: "",
    location: "",
    description: "",
    date: currentDate,
    time: "12:00", // Default time - noon
    category: "", // New field for category
    image: null, // New field for image
    // New fields for paid events
    isPaid: false,
    price: 0,
    ticketsAvailable: 100,
    registrationDeadline: "",
    maxRegistrations: "",
    minRegistrations: 1,
    status: "active"
  }

  useEffect(() => {
    if (!authState.status) {
      navigate("/login")
    }
  }, [authState, navigate])

  // Modify the validationSchema in CreateEvent.js
const validationSchema = Yup.object().shape({
  title: Yup.string().trim().required("Title is required"),
  location: Yup.string().trim().required("Location is required"),
  description: Yup.string().trim().required("Description is required"),
  date: Yup.string()
    .matches(/^\d{4}-\d{2}-\d{2}$/, "Date must be in YYYY-MM-DD format")
    .required("Date is required"),
  time: Yup.string()
    .matches(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/, "Time must be in HH:MM format")
    .required("Time is required"),
  category: Yup.string().trim().required("Category is required"),
  image: Yup.mixed(), // Optional field
  isPaid: Yup.boolean(),
  // Fix for the price field validation
  price: Yup.number().when('isPaid', {
    is: true,
    then: () => Yup.number().min(0.01, "Price must be greater than 0").required("Price is required for paid events"),
    otherwise: () => Yup.number().nullable()
  }),
  ticketsAvailable: Yup.number().integer("Must be a whole number").min(1, "Must have at least one ticket"),
  registrationDeadline: Yup.string().nullable(),
  maxRegistrations: Yup.number().integer("Must be a whole number").nullable(),
  minRegistrations: Yup.number().integer("Must be a whole number").min(1, "Minimum registrations must be at least 1"),
  status: Yup.string().required("Status is required")
});

  const onSubmit = async (data, { setSubmitting, resetForm }) => {
    setErrorMessage("")
    setSuccessMessage("")
    const accessToken = localStorage.getItem("accessToken")

    if (!accessToken) {
      setErrorMessage("Unauthorized. Please log in again.")
      setSubmitting(false)
      return
    }

    try {
      // Create FormData for file upload
      const formData = new FormData()
      formData.append("title", data.title)
      formData.append("location", data.location)
      formData.append("description", data.description)
      formData.append("date", data.date)
      formData.append("time", data.time)
      formData.append("category", data.category)

      // Add the new fields for paid events
      formData.append("isPaid", data.isPaid)
      formData.append("price", data.isPaid ? data.price : 0)
      formData.append("ticketsAvailable", data.ticketsAvailable)
      
      if (data.registrationDeadline) {
        formData.append("registrationDeadline", data.registrationDeadline)
      }
      
      if (data.maxRegistrations) {
        formData.append("maxRegistrations", data.maxRegistrations)
      }
      
      formData.append("minRegistrations", data.minRegistrations)
      formData.append("status", data.status)
      
      // Append image if it exists
      if (data.image) {
        formData.append("image", data.image)
      }

      // Create the event with FormData
      const response = await axios.post("http://localhost:3001/events", formData, {
        headers: { 
          Authorization: `Bearer ${accessToken}`,
          'Content-Type': 'multipart/form-data'
        },
      })

      const eventId = response.data.id

      // Create notification for all users
      await axios.post(
        "http://localhost:3001/notifications",
        {
          message: `New event created: ${data.title}`,
          type: "event",
          relatedId: eventId,
          isAdminNotification: false, // This will notify all users
        },
        {
          headers: { Authorization: `Bearer ${accessToken}` },
        }
      )

      setSuccessMessage("Event created successfully! Notifications sent to all users.")
      resetForm()
      setPreviewImage(null)
      
      setTimeout(() => {
        navigate("/admin")
      }, 2000)
    } catch (error) {
      console.error("Error:", error.response ? error.response.data : error.message)
      setErrorMessage(error.response?.data?.error || "An unexpected error occurred")
    } finally {
      setSubmitting(false)
    }
  }

  // Function to handle image file selection and preview
  const handleImageChange = (event, setFieldValue) => {
    const file = event.currentTarget.files[0]
    if (file) {
      setFieldValue("image", file)
      
      // Create a preview URL
      const reader = new FileReader()
      reader.onloadend = () => {
        setPreviewImage(reader.result)
      }
      reader.readAsDataURL(file)
    }
  }

  // List of common event categories
  const categoryOptions = [
    "Conference",
    "Workshop",
    "Seminar",
    "Social",
    "Concert",
    "Exhibition",
    "Fitness",
    "Community",
    "Education",
    "Entertainment",
    "Fundraising",
    "Other"
  ]

  // List of event status options
  const statusOptions = [
    "active",
    "cancelled",
    "completed",
    "draft"
  ]

  // Color palette
  const colors = {
    navy: "#1A2A56",
    navyLight: "#2A3A66",
    pink: "#FF6B6B",
    pinkLight: "#FF7EA5",
    white: "#FFFFFF",
    lightGray: "#F5F7FA",
    gray: "#E2E8F0",
    darkGray: "#718096",
    errorRed: "#FF4D6A",
    successGreen: "#2DD4BF",
  }

  // Styles
  const pageContainerStyle = {
    display: "flex",
    flexDirection: "column",
    minHeight: "100vh",
    width: "100%",
    backgroundColor: colors.lightGray,
    background: "linear-gradient(135deg, #f5f7fa 0%, #e2e8f0 100%)",
    position: "relative",
    overflow: "hidden",
  }

  const containerStyle = {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flex: 1,
    padding: "2rem",
    position: "relative",
  }

  const cardStyle = {
    width: "100%",
    maxWidth: "800px",
    backgroundColor: colors.white,
    borderRadius: "20px",
    boxShadow: "0 20px 60px rgba(26, 42, 86, 0.15), 0 10px 20px rgba(26, 42, 86, 0.12)",
    overflow: "hidden",
    position: "relative",
    transform: "translateY(0)",
    transition: "transform 0.3s ease, box-shadow 0.3s ease",
    animation: "float 6s ease-in-out infinite",
  }

  const cardHeaderStyle = {
    backgroundColor: colors.navy,
    padding: "2.5rem",
    position: "relative",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
  }

  const cardHeaderAfterStyle = {
    content: '""',
    position: "absolute",
    bottom: "0",
    left: "0",
    right: "0",
    height: "30px",
    borderRadius: "50% 50% 0 0 / 100% 100% 0 0",
    transform: "translateY(50%)",
    backgroundColor: colors.white,
  }

  const headingStyle = {
    color: colors.white,
    fontSize: "2.25rem",
    fontWeight: "600",
    marginBottom: "1rem",
    textAlign: "center",
    position: "relative",
    zIndex: 1,
  }

  const subtitleStyle = {
    color: colors.lightGray,
    fontSize: "1rem",
    textAlign: "center",
    marginBottom: "1.5rem",
    position: "relative",
    zIndex: 1,
  }

  const formContainerStyle = {
    padding: "2.5rem",
  }

  const formGroupStyle = {
    marginBottom: "1.75rem",
  }

  const inputLabelStyle = {
    fontSize: "0.9rem",
    fontWeight: "600",
    color: colors.navy,
    marginBottom: "0.5rem",
    display: "block",
  }

  const inputGroupStyle = {
    position: "relative",
    transition: "all 0.3s ease",
  }

  const inputIconStyle = {
    position: "absolute",
    left: "1rem",
    top: "50%",
    transform: "translateY(-50%)",
    color: colors.darkGray,
    zIndex: 1,
  }

  const inputBaseStyle = {
    width: "100%",
    padding: "0.75rem 1rem 0.75rem 2.75rem",
    fontSize: "1rem",
    color: colors.navy,
    backgroundColor: colors.lightGray,
    border: "2px solid transparent",
    borderRadius: "12px",
    transition: "all 0.3s ease",
    outline: "none",
    boxSizing: "border-box",
  }

  const inputFocusStyle = {
    ...inputBaseStyle,
    border: `2px solid ${colors.pinkLight}`,
    boxShadow: `0 0 0 3px rgba(255, 93, 143, 0.15)`,
  }

  const textareaStyle = {
    ...inputBaseStyle,
    minHeight: "120px",
    resize: "vertical",
    paddingTop: "2.5rem",
  }

  const errorStyle = {
    color: colors.errorRed,
    fontSize: "0.85rem",
    marginTop: "0.5rem",
    fontWeight: "500",
  }

  const buttonStyle = {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    gap: "0.5rem",
    width: "100%",
    padding: "1rem",
    fontSize: "1.1rem",
    fontWeight: "600",
    color: colors.white,
    backgroundColor: colors.pink,
    border: "none",
    borderRadius: "12px",
    cursor: "pointer",
    transition: "all 0.3s ease",
    boxShadow: `0 4px 12px rgba(255, 93, 143, 0.3)`,
  }

  const buttonHoverStyle = {
    ...buttonStyle,
    backgroundColor: colors.pinkLight,
    transform: "translateY(-2px)",
    boxShadow: `0 6px 16px rgba(255, 93, 143, 0.4)`,
  }

  const disabledButtonStyle = {
    ...buttonStyle,
    opacity: "0.7",
    cursor: "not-allowed",
    boxShadow: "none",
    transform: "none",
  }

  const alertSuccessStyle = {
    padding: "1rem",
    marginBottom: "1.5rem",
    borderRadius: "12px",
    color: colors.navy,
    backgroundColor: "rgba(45, 212, 191, 0.15)",
    border: `1px solid ${colors.successGreen}`,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    textAlign: "center",
  }

  const alertDangerStyle = {
    padding: "1rem",
    marginBottom: "1.5rem",
    borderRadius: "12px",
    color: colors.navy,
    backgroundColor: "rgba(255, 77, 106, 0.15)",
    border: `1px solid ${colors.errorRed}`,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    textAlign: "center",
  }

  const footerStyle = {
    backgroundColor: colors.navy,
    color: colors.white,
    padding: "1.5rem",
    textAlign: "center",
    width: "100%",
    boxShadow: "0 -5px 10px rgba(0,0,0,0.05)",
  }

  const footerContentStyle = {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    maxWidth: "800px",
    margin: "0 auto",
  }

  const footerTextStyle = {
    margin: "0.5rem 0",
    fontSize: "0.9rem",
    color: colors.lightGray,
  }

  const footerLinkStyle = {
    color: colors.pinkLight,
    textDecoration: "none",
    fontWeight: "500",
    transition: "color 0.3s ease",
  }

  const footerIconStyle = {
    color: colors.pink,
    marginRight: "0.5rem",
    verticalAlign: "middle",
  }

  const fileInputBaseStyle = {
    position: "relative",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    width: "100%",
    height: "120px",
    padding: "1rem",
    backgroundColor: colors.lightGray,
    border: "2px dashed",
    borderColor: colors.gray,
    borderRadius: "12px",
    cursor: "pointer",
    transition: "all 0.3s ease",
  }

  const fileInputFocusStyle = {
    ...fileInputBaseStyle,
    borderColor: colors.pinkLight,
    backgroundColor: "rgba(255, 93, 143, 0.05)",
  }

  const fileInputTextStyle = {
    color: colors.darkGray,
    fontSize: "0.9rem",
    marginTop: "0.5rem",
    textAlign: "center",
  }

  const imagePreviewStyle = {
    width: "100%",
    height: "200px",
    borderRadius: "12px",
    marginTop: "1rem",
    objectFit: "cover",
    boxShadow: "0 4px 8px rgba(0,0,0,0.1)",
  }

  const checkboxStyle = {
    cursor: "pointer",
    width: "1.2rem", 
    height: "1.2rem"
  }

  // Handle hover state for the button
  const handleMouseEnter = () => setIsHovered(true)
  const handleMouseLeave = () => setIsHovered(false)

  // Adding animation using the style tag
  useEffect(() => {
    const styleElement = document.createElement('style')
    styleElement.textContent = `
      @keyframes float {
        0% {
          transform: translateY(0px);
          box-shadow: 0 20px 60px rgba(26, 42, 86, 0.15), 0 10px 20px rgba(26, 42, 86, 0.12);
        }
        50% {
          transform: translateY(-10px);
          box-shadow: 0 30px 70px rgba(26, 42, 86, 0.2), 0 15px 30px rgba(26, 42, 86, 0.15);
        }
        100% {
          transform: translateY(0px);
          box-shadow: 0 20px 60px rgba(26, 42, 86, 0.15), 0 10px 20px rgba(26, 42, 86, 0.12);
        }
      }
      .floating-card {
        animation: float 6s ease-in-out infinite;
      }
    `
    document.head.appendChild(styleElement)
    
    return () => {
      document.head.removeChild(styleElement)
    }
  }, [])

  return (
    <div style={pageContainerStyle}>
      <div style={containerStyle}>
        <div style={cardStyle} className="floating-card">
          <div style={cardHeaderStyle}>
            <h2 style={headingStyle}>Create Event</h2>
            <p style={subtitleStyle}>Share your exciting event with the community</p>
            <div style={cardHeaderAfterStyle}></div>
          </div>

          <div style={formContainerStyle}>
            <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>
              {({ isSubmitting, touched, setFieldTouched, setFieldValue, values }) => (
                <Form>
                  {/* Success Message */}
                  {successMessage && <div style={alertSuccessStyle}>{successMessage}</div>}

                  {/* Error Message */}
                  {errorMessage && <div style={alertDangerStyle}>{errorMessage}</div>}

                  {/* Title */}
                  <div style={formGroupStyle}>
                    <label htmlFor="title" style={inputLabelStyle}>Event Title</label>
                    <div style={inputGroupStyle}>
                      <div style={inputIconStyle}>
                        <FaFileAlt size={16} color={colors.darkGray} />
                      </div>
                      <Field
                        type="text"
                        id="title"
                        name="title"
                        placeholder="Enter a catchy title for your event"
                        style={touched.title ? inputFocusStyle : inputBaseStyle}
                        onFocus={() => setFieldTouched('title', true)}
                      />
                    </div>
                    <ErrorMessage name="title" component="div" style={errorStyle} />
                  </div>

                  {/* Two column layout for location and date */}
                  <div style={{ display: "flex", gap: "1.5rem" }}>
                    {/* Location - Left column */}
                    <div style={{ ...formGroupStyle, flex: 1 }}>
                      <label htmlFor="location" style={inputLabelStyle}>Event Location</label>
                      <div style={inputGroupStyle}>
                        <div style={inputIconStyle}>
                          <FaMapMarkerAlt size={16} color={colors.darkGray} />
                        </div>
                        <Field
                          type="text"
                          id="location"
                          name="location"
                          placeholder="Where will your event take place?"
                          style={touched.location ? inputFocusStyle : inputBaseStyle}
                          onFocus={() => setFieldTouched('location', true)}
                        />
                      </div>
                      <ErrorMessage name="location" component="div" style={errorStyle} />
                    </div>

                    {/* Category - Right column */}
                    <div style={{ ...formGroupStyle, flex: 1 }}>
                      <label htmlFor="category" style={inputLabelStyle}>Event Category</label>
                      <div style={inputGroupStyle}>
                        <div style={inputIconStyle}>
                          <FaTag size={16} color={colors.darkGray} />
                        </div>
                        <Field
                          as="select"
                          id="category"
                          name="category"
                          style={touched.category ? inputFocusStyle : inputBaseStyle}
                          onFocus={() => setFieldTouched('category', true)}
                        >
                          <option value="">Select a category</option>
                          {categoryOptions.map((category) => (
                            <option key={category} value={category}>
                              {category}
                            </option>
                          ))}
                        </Field>
                      </div>
                      <ErrorMessage name="category" component="div" style={errorStyle} />
                    </div>
                  </div>

                  {/* Two column layout for date and time */}
                  <div style={{ display: "flex", gap: "1.5rem" }}>
                    {/* Date - Left column */}
                    <div style={{ ...formGroupStyle, flex: 1 }}>
                      <label htmlFor="date" style={inputLabelStyle}>Event Date</label>
                      <div style={inputGroupStyle}>
                        <div style={inputIconStyle}>
                          <FaCalendarAlt size={16} color={colors.darkGray} />
                        </div>
                        <Field
                          type="date"
                          id="date"
                          name="date"
                          style={touched.date ? inputFocusStyle : inputBaseStyle}
                          onFocus={() => setFieldTouched('date', true)}
                        />
                      </div>
                      <ErrorMessage name="date" component="div" style={errorStyle} />
                    </div>

                    {/* Time - Right column */}
                    <div style={{ ...formGroupStyle, flex: 1 }}>
                      <label htmlFor="time" style={inputLabelStyle}>Event Time</label>
                      <div style={inputGroupStyle}>
                        <div style={inputIconStyle}>
                          <FaClock size={16} color={colors.darkGray} />
                        </div>
                        <Field
                          type="time"
                          id="time"
                          name="time"
                          style={touched.time ? inputFocusStyle : inputBaseStyle}
                          onFocus={() => setFieldTouched('time', true)}
                        />
                      </div>
                      <ErrorMessage name="time" component="div" style={errorStyle} />
                    </div>
                  </div>
                  
                  {/* Status - New field */}
                  <div style={formGroupStyle}>
                    <label htmlFor="status" style={inputLabelStyle}>Event Status</label>
                    <div style={inputGroupStyle}>
                      <div style={inputIconStyle}>
                        <FaCalendarCheck size={16} color={colors.darkGray} />
                      </div>
                      <Field
                        as="select"
                        id="status"
                        name="status"
                        style={touched.status ? inputFocusStyle : inputBaseStyle}
                        onFocus={() => setFieldTouched('status', true)}
                      >
                        {statusOptions.map((status) => (
                          <option key={status} value={status}>
                            {status.charAt(0).toUpperCase() + status.slice(1)}
                          </option>
                        ))}
                      </Field>
                    </div>
                    <ErrorMessage name="status" component="div" style={errorStyle} />
                  </div>

                  {/* Description */}
                  <div style={formGroupStyle}>
                    <label htmlFor="description" style={inputLabelStyle}>Event Description</label>
                    <div style={inputGroupStyle}>
                      <Field
                        as="textarea"
                        id="description"
                        name="description"
                        placeholder="Share all exciting details about your event"
                        style={textareaStyle}
                        onFocus={() => setFieldTouched('description', true)}
                      />
                    </div>
                    <ErrorMessage name="description" component="div" style={errorStyle} />
                  </div>
                  
                  {/* Paid Event Toggle and Price */}
                  <div style={formGroupStyle}>
                    <div style={{ display: "flex", alignItems: "center", marginBottom: "0.75rem" }}>
                      <Field
                        type="checkbox"
                        id="isPaid"
                        name="isPaid"
                        style={checkboxStyle}
                        onChange={(e) => {
                          setFieldValue("isPaid", e.target.checked);
                          if (!e.target.checked) {
                            setFieldValue("price", 0);
                          }
                        }}
                        checked={values.isPaid}
                      />
                      <label 
                        htmlFor="isPaid" 
                        style={{ 
                          ...inputLabelStyle, 
                          marginLeft: "0.5rem", 
                          marginBottom: 0,
                          cursor: "pointer" 
                        }}
                      >
                        This is a paid event
                      </label>
                    </div>
                    
                    {values.isPaid && (
                      <div style={inputGroupStyle}>
                        <div style={inputIconStyle}>
                          <FaDollarSign size={16} color={colors.darkGray} />
                        </div>
                        <Field
                          type="number"
                          id="price"
                          name="price"
                          placeholder="Ticket price"
                          min="0.01"
                          step="0.01"
                          style={touched.price ? inputFocusStyle : inputBaseStyle}
                          onFocus={() => setFieldTouched('price', true)}
                        />
                        <ErrorMessage name="price" component="div" style={errorStyle} />
                      </div>
                    )}
                  </div>
                  
                  {/* Ticket Information */}
                  <div style={{ display: "flex", gap: "1.5rem" }}>
                    {/* Tickets Available */}
                    <div style={{ ...formGroupStyle, flex: 1 }}>
                      <label htmlFor="ticketsAvailable" style={inputLabelStyle}>Available Tickets</label>
                      <div style={inputGroupStyle}>
                        <div style={inputIconStyle}>
                          <FaTicketAlt size={16} color={colors.darkGray} />
                        </div>
                        <Field
                          type="number"
                          id="ticketsAvailable"
                          name="ticketsAvailable"
                          min="1"
                          placeholder="100"
                          style={touched.ticketsAvailable ? inputFocusStyle : inputBaseStyle}
                          onFocus={() => setFieldTouched('ticketsAvailable', true)}
                        />
                      </div>
                      <ErrorMessage name="ticketsAvailable" component="div" style={errorStyle} />
                    </div>

                    {/* Registration Deadline */}
                    <div style={{ ...formGroupStyle, flex: 1 }}>
                      <label htmlFor="registrationDeadline" style={inputLabelStyle}>Registration Deadline</label>
                      <div style={inputGroupStyle}>
                        <div style={inputIconStyle}>
                          <FaCalendarCheck size={16} color={colors.darkGray} />
                        </div>
                        <Field
                          type="date"
                          id="registrationDeadline"
                          name="registrationDeadline"
                          style={touched.registrationDeadline ? inputFocusStyle : inputBaseStyle}
                          onFocus={() => setFieldTouched('registrationDeadline', true)}
                        />
                      </div>
                      <ErrorMessage name="registrationDeadline" component="div" style={errorStyle} />
                    </div>
                  </div>
                  
                  {/* Min/Max Registration */}
                  <div style={{ display: "flex", gap: "1.5rem" }}>
                    {/* Min Registrations */}
                    <div style={{ ...formGroupStyle, flex: 1 }}>
                      <label htmlFor="minRegistrations" style={inputLabelStyle}>Minimum Registrations</label>
                      <div style={inputGroupStyle}>
                        <div style={inputIconStyle}>
                          <FaUserPlus size={16} color={colors.darkGray} />
                        </div>
                        <Field
                          type="number"
                          id="minRegistrations"
                          name="minRegistrations"
                          min="1"
                          placeholder="1"
                          style={touched.minRegistrations ? inputFocusStyle : inputBaseStyle}
                          onFocus={() => setFieldTouched('minRegistrations', true)}
                        />
                      </div>
                      <ErrorMessage name="minRegistrations" component="div" style={errorStyle} />
                    </div>

                    {/* Max Registrations */}
                    <div style={{ ...formGroupStyle, flex: 1 }}>
                      <label htmlFor="maxRegistrations" style={inputLabelStyle}>Maximum Registrations</label>
                      <div style={inputGroupStyle}>
                        <div style={inputIconStyle}>
                          <FaUsers size={16} color={colors.darkGray} />
                        </div>
                        <Field
                          type="number"
                          id="maxRegistrations"
                          name="maxRegistrations"
                          min="1"
                          placeholder="Optional"
                          style={touched.maxRegistrations ? inputFocusStyle : inputBaseStyle}
                          onFocus={() => setFieldTouched('maxRegistrations', true)}
                        />
                      </div>
                      <ErrorMessage name="maxRegistrations" component="div" style={errorStyle} />
                    </div>
                  </div>

                  {/* Image Upload */}
                  <div style={formGroupStyle}>
                    <label htmlFor="image" style={inputLabelStyle}>Event Image</label>
                    <div style={touched.image ? fileInputFocusStyle : fileInputBaseStyle}>
                      <input
                        type="file"
                        id="image"
                        name="image"
                        accept="image/*"
                        onChange={(event) => handleImageChange(event, setFieldValue)}
                        style={{ display: "none" }}
                      />
                      <label htmlFor="image" style={{ cursor: "pointer", display: "flex", flexDirection: "column", alignItems: "center", width: "100%" }}>
                        <FaImage size={24} color={colors.darkGray} />
                        <p style={fileInputTextStyle}>
                          {previewImage ? "Change image" : "Upload an event image (optional)"}
                        </p>
                      </label>
                    </div>
                    <ErrorMessage name="image" component="div" style={errorStyle} />
                    
                    {/* Image Preview */}
                    {previewImage && (
                      <div style={{ marginTop: "1rem" }}>
                        <img 
                          src={previewImage} 
                          alt="Preview" 
                          style={imagePreviewStyle} 
                        />
                      </div>
                    )}
                  </div>

                  {/* Submit */}
                  <button
                    type="submit"
                    style={isSubmitting ? disabledButtonStyle : (isHovered ? buttonHoverStyle : buttonStyle)}
                    disabled={isSubmitting}
                    onMouseEnter={handleMouseEnter}
                    onMouseLeave={handleMouseLeave}
                  >
                    <FaPlus size={16} />
                    {isSubmitting ? "Creating..." : "Create Event"}
                  </button>
                </Form>
              )}
            </Formik>
          </div>
        </div>
      </div>

      {/* Footer with accessibility-compliant links */}
      <footer style={footerStyle}>
        <div style={footerContentStyle}>
          <p style={{ ...footerTextStyle, fontWeight: "600", fontSize: "1rem" }}>
            <FaHeart style={footerIconStyle} /> EventHub Community
          </p>
          <p style={footerTextStyle}>
            Connect with event organizers and attendees from around the world
          </p>
          <p style={footerTextStyle}>
            <button 
              onClick={() => navigate("/terms")} 
              style={{...footerLinkStyle, background: "none", border: "none", cursor: "pointer", padding: 0}}
            >
              Terms
            </button> •
            <button 
              onClick={() => navigate("/privacy")} 
              style={{...footerLinkStyle, background: "none", border: "none", cursor: "pointer", margin: "0 0.5rem", padding: 0}}
            >
              Privacy
            </button> •
            <button 
              onClick={() => navigate("/support")} 
              style={{...footerLinkStyle, background: "none", border: "none", cursor: "pointer", padding: 0}}
            >
              Support
            </button>
          </p>
          <p style={{ ...footerTextStyle, marginTop: "0.5rem", fontSize: "0.8rem" }}>
            © {new Date().getFullYear()} EventHub. All rights reserved.
          </p>
        </div>
      </footer>
    </div>
  )
}

export default CreateEvent;
</file>

<file path="railway.json">
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "NIXPACKS",
    "buildCommand": "curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && apt-get update && apt-get install -y nodejs && cd server && rm -rf node_modules && npm install"
  },
  "deploy": {
    "startCommand": "cd server && node index.js",
    "healthcheckPath": "/api/health",
    "healthcheckTimeout": 300,
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  },
  "variables": {
    "NODE_ENV": "production",
    "PORT": "8080",
    "DB_HOST": "${{RAILWAY_TCP_PROXY_HOST}}",
    "DB_PORT": "${{RAILWAY_TCP_PROXY_PORT}}",
    "DB_USER": "${{MYSQL_USER}}",
    "DB_PASSWORD": "${{MYSQL_PASSWORD}}",
    "DB_DATABASE": "${{MYSQL_DATABASE}}",
    "JWT_SECRET": "${{JWT_SECRET}}"
  }
}
</file>

<file path="client/src/pages/Event.js">
import { useContext, useEffect, useState, useCallback, useRef } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
import "bootstrap/dist/css/bootstrap.min.css";
import "@fortawesome/fontawesome-free/css/all.min.css";
import { AuthContext } from "../helpers/AuthContext";
import { format } from "date-fns";

export default function Event() {
  // Custom colors
  const primaryColor = "#1A2A56"; // Navy blue (updated to match Home page)
  const accentColor = "#FF6B6B";  // Coral red (matches Home page)

  // Color palette - adding full palette to match Home and CreateEvent pages
  const colors = {
    navy: "#1A2A56",
    navyLight: "#2A3A66",
    pink: "#FF6B6B",
    pinkLight: "#FF6B6B",
    white: "#FFFFFF",
    lightGray: "#F5F7FA",
    gray: "#E2E8F0",
    darkGray: "#718096",
    errorRed: "#FF4D6A",
    successGreen: "#2DD4BF",
  };

  // Footer styles definitions (moved to the top to avoid ESLint warnings)
  const footerStyle = {
    backgroundColor: colors.navy,
    color: colors.white,
    padding: "1.5rem",
    textAlign: "center",
    width: "100%",
    boxShadow: "0 -5px 10px rgba(0,0,0,0.05)",
  };

  const footerContentStyle = {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    maxWidth: "800px",
    margin: "0 auto",
  };

  const footerTextStyle = {
    margin: "0.5rem 0",
    fontSize: "0.9rem",
    color: colors.lightGray,
  };

  const footerLinkStyle = {
    color: colors.pinkLight,
    textDecoration: "none",
    fontWeight: "500",
    transition: "color 0.3s ease",
  };

  const footerIconStyle = {
    color: colors.pink,
    marginRight: "0.5rem",
    verticalAlign: "middle",
  };

  const { id } = useParams();
  const navigate = useNavigate();
  const [eventData, setEventData] = useState(null);
  const [reviews, setReviews] = useState([]);
  const [newReview, setNewReview] = useState("");
  const [rating, setRating] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { authState } = useContext(AuthContext);
  const [isEventPast, setIsEventPast] = useState(false);

  // Social sharing states
  const [showShareModal, setShowShareModal] = useState(false);
  const [sharingProvider, setSharingProvider] = useState(null);
  const [isAuthenticating, setIsAuthenticating] = useState(false);
  const [shareMessage, setShareMessage] = useState("");
  const [oauthPopup, setOauthPopup] = useState(null);
  const [shareSuccess, setShareSuccess] = useState(null);
  const oauthCallbackRef = useRef();
  const socialShareTimeoutRef = useRef();

  // Function to correct the image path (same as Home page)
  const getImageUrl = (imagePath) => {
    if (!imagePath) return null;

    // If the path already starts with http, return as is
    if (imagePath.startsWith('http')) return imagePath;

    // If the path begins with "/uploads/events/", ensure it's properly formed
    if (imagePath.startsWith('/uploads/events/')) {
      return `http://localhost:3001${imagePath}`;
    }

    // For any other case, just append the path to the base URL
    return `http://localhost:3001/${imagePath}`;
  };

  useEffect(() => {
    const fetchEventDetails = async () => {
      try {
        const response = await axios.get(`http://localhost:3001/events/${id}`);
        if (response.data.event) {
          setEventData(response.data.event);

          // Check if the event is in the past
          const eventDate = new Date(response.data.event.date);
          const now = new Date();
          setIsEventPast(eventDate < now);
        } else {
          setEventData(null);
          setError("Event not found.");
        }
        if (response.data.reviews) {
          setReviews(response.data.reviews);
        }
        setLoading(false);
      } catch (err) {
        setError("Failed to load event details.");
        setLoading(false);
        console.error("Error fetching event details:", err);
      }
    };
    fetchEventDetails();
  }, [id]);

  // Wrap shareToSocialMedia in useCallback to prevent re-creation on each render
  const shareToSocialMedia = useCallback(async (provider, token) => {
    try {
      setIsAuthenticating(true);

      // Create an image card for the event (if available)
      const eventImage = eventData?.image ? getImageUrl(eventData.image) : null;

      // Create the share content
      const shareContent = {
        provider,
        message: shareMessage,
        url: window.location.href,
        eventId: id,
        eventTitle: eventData?.title,
        eventDescription: eventData?.description,
        eventDate: eventData?.date,
        eventImage: eventImage,
        rating: rating
      };

      // Send share request to backend
      const response = await axios.post(
        `http://localhost:3001/social/share`,
        shareContent,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      setIsAuthenticating(false);

      // Show success message
      if (response.data.success) {
        setShareSuccess({
          success: true,
          provider,
          message: `Successfully shared to ${provider}!`,
          shareId: response.data.shareId || null
        });

        // Clear success message after some time
        socialShareTimeoutRef.current = setTimeout(() => {
          setShareSuccess(null);
        }, 5000);
      } else {
        setShareSuccess({
          success: false,
          provider,
          message: `Failed to share to ${provider}: ${response.data.error || 'Unknown error'}`
        });
      }
    } catch (error) {
      console.error(`Error sharing to ${provider}:`, error);
      setIsAuthenticating(false);
      setShareSuccess({
        success: false,
        provider,
        message: `Error sharing to ${provider}: ${error.response?.data?.message || error.message}`
      });
    }
  }, [eventData, shareMessage, id, rating]); // Dependencies inside useCallback

  // Now, the useEffect hook
  useEffect(() => {
    const handleOAuthCallback = (event) => {
      if (event.origin !== window.location.origin) return;

      if (event.data?.type === 'oauth-callback') {
        const { provider, success, token } = event.data;

        if (success && token) {
          sessionStorage.setItem(`${provider}Token`, token);

          if (oauthPopup && !oauthPopup.closed) {
            oauthPopup.close();
          }

          shareToSocialMedia(provider, token);
        } else {
          setIsAuthenticating(false);
          setShareSuccess({ success: false, provider, message: `Authentication with ${provider} failed.` });
        }
      }
    };

    window.addEventListener('message', handleOAuthCallback);
    oauthCallbackRef.current = handleOAuthCallback;

    return () => {
      window.removeEventListener('message', oauthCallbackRef.current);

      if (socialShareTimeoutRef.current) {
        clearTimeout(socialShareTimeoutRef.current);
      }
    };
  }, [oauthPopup, shareToSocialMedia]); // Now shareToSocialMedia is defined before it is used

  const addReview = useCallback(async () => {
    if (!newReview.trim() || rating === 0) {
      alert("Please provide both a review and a rating.");
      return;
    }

    const accessToken = localStorage.getItem("accessToken");
    if (!accessToken) {
      alert("You must be logged in to add a review.");
      return;
    }

    try {
      let sentiment = "neutral";
      try {
        const { data: sentimentData } = await axios.post("http://localhost:3001/sentiment", { text: newReview });
        sentiment = sentimentData.sentiment;
      } catch (err) {
        console.warn("Sentiment API not found, skipping sentiment analysis.");
      }

      const { data: reviewResponse } = await axios.post(
        "http://localhost:3001/reviews",
        { review_text: newReview, rating, eventId: id, sentiment },
        { headers: { Authorization: `Bearer ${accessToken}` } },
      );

      if (reviewResponse.error) {
        alert(reviewResponse.error);
      } else {
        setReviews((prevReviews) => [...prevReviews, reviewResponse.review]);
        setNewReview("");
        setRating(0);

        // Create notification for admins about the new review
        try {
          await axios.post(
            "http://localhost:3001/notifications",
            {
              message: `New review for event "${eventData?.title}"`,
              type: "review",
              relatedId: id,
              forAdmins: true, // Send to all admins
            },
            { headers: { Authorization: `Bearer ${accessToken}` } },
          );
        } catch (notifError) {
          console.error("Error creating notification:", notifError);
        }

        // Reset share success state
        setShareSuccess(null);

        // Open sharing modal
        setShowShareModal(true);

        // Set default share message
        const defaultShareMessage = `I just reviewed "${eventData?.title}" with ${rating} stars! Check out this event at: ${window.location.href}`;
        setShareMessage(defaultShareMessage);
      }
    } catch (err) {
      console.error("Error adding review:", err);
      alert("There was an error adding your review. Please try again.");
    }
  }, [newReview, rating, id, eventData?.title]);

  const initiateOAuth = (provider) => {
    setSharingProvider(provider);
    setIsAuthenticating(true);
    setShareSuccess(null);

    // Set OAuth endpoints
    const oauthEndpoints = {
      facebook: 'http://localhost:3001/auth/facebook',
      linkedin: 'http://localhost:3001/auth/linkedin',
      twitter: 'http://localhost:3001/auth/twitter'
    };

    // Calculate popup position to be centered
    const width = 600;
    const height = 600;
    const left = window.innerWidth / 2 - width / 2;
    const top = window.innerHeight / 2 - height / 2;

    // Open the popup
    const popup = window.open(
      oauthEndpoints[provider],
      `${provider}OAuth`,
      `width=${width},height=${height},top=${top},left=${left}`
    );

    setOauthPopup(popup);

    // Check if popup was blocked
    if (!popup || popup.closed || typeof popup.closed === 'undefined') {
      setIsAuthenticating(false);
      setShareSuccess({
        success: false,
        provider,
        message: "Popup blocked! Please allow popups for this site to use social sharing."
      });
    }
  };

  const handleShareSubmit = (provider) => {
    // Check if we already have a token for this provider
    const existingToken = sessionStorage.getItem(`${provider}Token`);

    if (existingToken) {
      // If we have a token, use it directly
      shareToSocialMedia(provider, existingToken);
    } else {
      // Otherwise, initiate OAuth flow
      initiateOAuth(provider);
    }
  };

  const closeShareModal = () => {
    setShowShareModal(false);
    setSharingProvider(null);
    setIsAuthenticating(false);
    setShareSuccess(null);
  };

  const deleteReview = useCallback(async (reviewId) => {
    const accessToken = localStorage.getItem("accessToken");
    if (!accessToken) {
      alert("You must be logged in to delete a review.");
      return;
    }

    try {
      await axios.delete(`http://localhost:3001/reviews/${reviewId}`, {
        headers: { Authorization: `Bearer ${accessToken}` },
      });

      alert("Review deleted successfully!");
      setReviews((prevReviews) => prevReviews.filter((review) => review.id !== reviewId));
    } catch (err) {
      alert("There was an error deleting your review. Please try again.");
    }
  }, []);

  const deleteEvent = async (eventId) => {
    if (!window.confirm("Are you sure you want to delete this event? This action cannot be undone.")) return;

    const accessToken = localStorage.getItem("accessToken");
    if (!accessToken) {
      alert("You must be logged in to delete an event.");
      return;
    }

    try {
      await axios.delete(`http://localhost:3001/events/${eventId}`, {
        headers: { Authorization: `Bearer ${accessToken}` },
      });

      // Store the success message in sessionStorage
      sessionStorage.setItem("eventDeleteSuccess", "Event deleted successfully");

      // Redirect to the home page
      window.location.href = "/";
    } catch (error) {
      if (error.response) {
        console.error("Error details:", error.response.data);

        if (error.response.status === 401) {
          alert("Session expired. Please log in again.");
          localStorage.removeItem("accessToken");
          sessionStorage.clear();
          document.cookie = "accessToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
          window.location.replace("/login");
        } else if (error.response.status === 403) {
          alert("You are not authorized to delete this event.");
        } else {
          alert("Failed to delete the event. Please try again.");
        }
      } else {
        alert("Network error. Please try again.");
      }
    }
  };

  // Handle event registration
  const handleRegistration = () => {
    // Navigate to the registration page
    navigate(`/register/${id}`);
  };

  // Render loading state
  if (loading) return (
    <>
      <div className="container d-flex justify-content-center align-items-center" style={{ minHeight: "60vh", paddingTop: "70px", paddingBottom: "200px" }}>
        <div className="spinner-border" role="status" style={{ color: accentColor }}>
          <span className="visually-hidden">Loading event details...</span>
        </div>
      </div>

      {/* Footer with accessibility-compliant links */}
      <footer style={footerStyle}>
        <div style={footerContentStyle}>
          <p style={{ ...footerTextStyle, fontWeight: "600", fontSize: "1rem" }}>
            <i className="fas fa-heart" style={footerIconStyle}></i> EventHub Community
          </p>
          <p style={footerTextStyle}>
            Connect with event organizers and attendees from around the world
          </p>
          <p style={footerTextStyle}>
            <button
              onClick={() => navigate("/terms")}
              style={{ ...footerLinkStyle, background: "none", border: "none", cursor: "pointer", padding: 0 }}
            >
              Terms
            </button> •
            <button
              onClick={() => navigate("/privacy")}
              style={{ ...footerLinkStyle, background: "none", border: "none", cursor: "pointer", margin: "0 0.5rem", padding: 0 }}
            >
              Privacy
            </button> •
            <button
              onClick={() => navigate("/support")}
              style={{ ...footerLinkStyle, background: "none", border: "none", cursor: "pointer", padding: 0 }}
            >
              Support
            </button>
          </p>
          <p style={{ ...footerTextStyle, marginTop: "0.5rem", fontSize: "0.8rem" }}>
            © {new Date().getFullYear()} EventHub. All rights reserved.
          </p>
        </div>
      </footer>
    </>
  );

  // Render error state
  if (error) return (
    <>
      <div className="container text-center mt-5" style={{ paddingTop: "70px", paddingBottom: "200px" }}>
        <div className="alert" style={{ backgroundColor: accentColor, color: "white" }}>
          <i className="fas fa-exclamation-circle me-2"></i>{error}
        </div>
        <button
          className="btn mt-3"
          onClick={() => navigate("/")}
          style={{ backgroundColor: primaryColor, color: "white" }}
        >
          <i className="fas fa-home me-2"></i>Back to Home
        </button>
      </div>

      {/* Footer with accessibility-compliant links */}
      <footer style={footerStyle}>
        <div style={footerContentStyle}>
          <p style={{ ...footerTextStyle, fontWeight: "600", fontSize: "1rem" }}>
            <i className="fas fa-heart" style={footerIconStyle}></i> EventHub Community
          </p>
          <p style={footerTextStyle}>
            Connect with event organizers and attendees from around the world
          </p>
          <p style={footerTextStyle}>
            <button
              onClick={() => navigate("/terms")}
              style={{ ...footerLinkStyle, background: "none", border: "none", cursor: "pointer", padding: 0 }}
            >
              Terms
            </button> •
            <button
              onClick={() => navigate("/privacy")}
              style={{ ...footerLinkStyle, background: "none", border: "none", cursor: "pointer", margin: "0 0.5rem", padding: 0 }}
            >
              Privacy
            </button> •
            <button
              onClick={() => navigate("/support")}
              style={{ ...footerLinkStyle, background: "none", border: "none", cursor: "pointer", padding: 0 }}
            >
              Support
            </button>
          </p>
          <p style={{ ...footerTextStyle, marginTop: "0.5rem", fontSize: "0.8rem" }}>
            © {new Date().getFullYear()} EventHub. All rights reserved.
          </p>
        </div>
      </footer>
    </>
  );

  // Footer styles moved to the top of the component

  return (
    <>
      <div className="container mt-5" style={{ display: "flex", flexDirection: "column", minHeight: "100vh" }}>
        {/* Event Header Section */}
        <div className="card mb-4 shadow-sm">
          <div className="card-header d-flex justify-content-between align-items-center"
            style={{ backgroundColor: primaryColor, color: "white" }}>
            <h2 className="mb-0 fs-4">
              <i className="fas fa-calendar-event me-2"></i>
              {eventData?.title || "Event Title"}
            </h2>
            <div>
              <span className="badge me-2" style={{ backgroundColor: accentColor, fontSize: "0.9rem" }}>
                {eventData?.category || "Uncategorized"}
              </span>
              <span className="badge" style={{ backgroundColor: accentColor, fontSize: "0.9rem" }}>
                <i className="far fa-clock me-1"></i>
                {eventData?.date ? format(new Date(eventData.date), "MMM dd, yyyy") : "Date not provided"}
              </span>
            </div>
          </div>
        </div>

        <div className="row">
          {/* Event Image and Details Section */}
          <div className="col-lg-5 mb-4">
            {/* Event Image - NEW */}
            {eventData?.image && (
              <div className="card mb-4 shadow-sm">
                <div className="card-body p-0">
                  <img
                    src={getImageUrl(eventData.image)}
                    alt={eventData.title}
                    className="img-fluid rounded"
                    style={{ width: "100%", height: "300px", objectFit: "cover" }}
                  />
                </div>
              </div>
            )}

            {/* Event Details Card */}
            <div className="card h-100 shadow-sm">
              <div className="card-header" style={{ backgroundColor: "#F8F9FA" }}>
                <h3 className="mb-0 fs-5" style={{ color: primaryColor }}>
                  <i className="fas fa-info-circle me-2" style={{ color: accentColor }}></i>
                  Event Details
                </h3>
              </div>
              <div className="card-body">
                <div className="mb-3 pb-3 border-bottom">
                  <h4 className="fs-6" style={{ color: accentColor }}>Description</h4>
                  <p>{eventData?.description || "No description available"}</p>
                </div>

                <div className="mb-3 pb-3 border-bottom">
                  <h4 className="fs-6" style={{ color: accentColor }}>Date & Time</h4>
                  <p>
                    <i className="fas fa-calendar-day me-2"></i>
                    {eventData?.date ? format(new Date(eventData.date), "MMMM dd, yyyy") : "Date not provided"}
                  </p>
                  <p>
                    <i className="fas fa-clock me-2"></i>
                    {eventData?.time ? format(new Date(`2000-01-01T${eventData.time}`), "h:mm a") : "Time not specified"}
                  </p>

                  {/* Event Status Badge */}
                  <div className="mt-2">
                    <span className="badge" style={{
                      backgroundColor: isEventPast ? "#6c757d" : "#28a745",
                      color: "white",
                      padding: "0.5rem",
                      fontSize: "0.9rem"
                    }}>
                      <i className={`fas ${isEventPast ? "fa-history" : "fa-calendar-check"} me-2`}></i>
                      {isEventPast ? "Past Event" : "Upcoming Event"}
                    </span>
                  </div>

                  {/* Ticket price section - only shown for paid events */}
                  {eventData?.isPaid && (
                    <div className="mt-3">
                      <h4 className="fs-6" style={{ color: accentColor }}>Price</h4>
                      <p>
                        <i className="fas fa-dollar-sign me-2"></i>
                        ${parseFloat(eventData.price).toFixed(2)} per ticket
                      </p>
                      {eventData?.ticketsAvailable > 0 && (
                        <p>
                          <i className="fas fa-ticket-alt me-2"></i>
                          {eventData.ticketsAvailable} tickets available
                        </p>
                      )}
                      {eventData?.registrationDeadline && (
                        <p>
                          <i className="fas fa-calendar-times me-2"></i>
                          Registration deadline: {format(new Date(eventData.registrationDeadline), "MMMM dd, yyyy")}
                        </p>
                      )}
                    </div>
                  )}

                  {/* Registration limits - show regardless of paid/free status */}
                  {(eventData?.minRegistrations > 1 || eventData?.maxRegistrations) && (
                    <div className="mt-3">
                      <h4 className="fs-6" style={{ color: accentColor }}>Registration Limits</h4>
                      {eventData?.minRegistrations > 1 && (
                        <p>
                          <i className="fas fa-user-plus me-2"></i>
                          Minimum Registrations: {eventData.minRegistrations}
                        </p>
                      )}
                      {eventData?.maxRegistrations && (
                        <p>
                          <i className="fas fa-users me-2"></i>
                          Maximum Registrations: {eventData.maxRegistrations}
                        </p>
                      )}
                    </div>
                  )}
                </div>

                <div className="mb-3 pb-3 border-bottom">
                  <h4 className="fs-6" style={{ color: accentColor }}>Location</h4>
                  <p><i className="fas fa-map-marker-alt me-2"></i>{eventData?.location || "Location not specified"}</p>
                </div>

                <div>
                  <h4 className="fs-6" style={{ color: accentColor }}>Organizer</h4>
                  <p><i className="fas fa-user me-2"></i>{eventData?.username || "Anonymous"}</p>
                </div>

                {/* Registration Button for upcoming events */}
                {!isEventPast && (
                  <div className="mt-4 text-center">
                    <button
                      className="btn btn-lg"
                      onClick={handleRegistration}
                      style={{
                        backgroundColor: accentColor,
                        color: "white",
                        padding: "0.75rem 1.5rem",
                        borderRadius: "8px",
                        boxShadow: "0 4px 6px rgba(0,0,0,0.1)",
                        transition: "all 0.3s ease"
                      }}
                    >
                      <i className="fas fa-ticket-alt me-2"></i>
                      Register Now
                    </button>
                  </div>
                )}
              </div>

              {eventData?.username && authState.username === eventData.username && (
                <div className="card-footer bg-white text-end border-top-0">
                  <button
                    className="btn"
                    onClick={() => deleteEvent(eventData.id)}
                    style={{ backgroundColor: accentColor, color: "white" }}
                  >
                    <i className="fas fa-trash me-2"></i>Delete Event
                  </button>
                </div>
              )}
            </div>
          </div>

          {/* Reviews Section - Only show for past events */}
          <div className="col-lg-7">
            {isEventPast ? (
              <>
                {/* Add Review Form */}
                <div className="card mb-4 shadow-sm">
                  <div className="card-header" style={{ backgroundColor: "#F8F9FA" }}>
                    <h3 className="mb-0 fs-5" style={{ color: primaryColor }}>
                      <i className="fas fa-star me-2" style={{ color: accentColor }}></i>
                      Write a Review
                    </h3>
                  </div>
                  <div className="card-body">
                    <textarea
                      className="form-control"
                      placeholder="Share your experience with this event..."
                      value={newReview}
                      onChange={(event) => setNewReview(event.target.value)}
                      rows="3"
                      style={{ borderColor: primaryColor, borderRadius: "8px" }}
                    />

                    <div className="d-flex justify-content-between align-items-center mt-3">
                      <div>
                        <label className="me-2">Your Rating:</label>
                        {[1, 2, 3, 4, 5].map((index) => (
                          <i
                            key={index}
                            onClick={() => setRating(index)}
                            className={`fa-star fa-lg me-1 ${index <= rating ? "fas" : "far"}`}
                            style={{
                              cursor: "pointer",
                              color: index <= rating ? "#FFD700" : "#aaa"
                            }}
                            aria-label={`Rate ${index} stars`}
                          />
                        ))}
                      </div>

                      <button
                        onClick={addReview}
                        className="btn"
                        disabled={!newReview.trim() || rating === 0}
                        style={{
                          backgroundColor: primaryColor,
                          color: "white",
                          opacity: (!newReview.trim() || rating === 0) ? 0.65 : 1
                        }}
                      >
                        <i className="fas fa-paper-plane me-2"></i>
                        Submit Review
                      </button>
                    </div>
                  </div>
                </div>

                {/* Reviews List */}
                <div className="card shadow-sm">
                  <div className="card-header d-flex justify-content-between align-items-center" style={{ backgroundColor: "#F8F9FA" }}>
                    <h3 className="mb-0 fs-5" style={{ color: primaryColor }}>
                      <i className="fas fa-comments me-2" style={{ color: accentColor }}></i>
                      Event Reviews
                    </h3>
                    <span className="badge" style={{ backgroundColor: primaryColor, color: "white" }}>
                      {reviews.length} {reviews.length === 1 ? 'Review' : 'Reviews'}
                    </span>
                  </div>

                  <div className="card-body">
                    {reviews.length > 0 ? (
                      <div className="review-list">
                        {reviews.map((review) => (
                          <div key={review.id} className="card mb-3 border-0 shadow-sm">
                            <div className="card-header bg-white d-flex justify-content-between align-items-center">
                              <div>
                                <strong><i className="fas fa-user-circle me-2" style={{ color: accentColor }}></i>{review.username || "Anonymous"}</strong>
                                <span className="ms-3">
                                  {Array.from({ length: 5 }, (_, i) => (
                                    <i
                                      key={i}
                                      className="fas fa-star"
                                      style={{
                                        color: i < review.rating ? '#FFD700' : '#E0E0E0',
                                        fontSize: "0.9rem"
                                      }}
                                    />
                                  ))}
                                </span>
                                {review.sentiment && (
                                  <span className="ms-2 badge" style={{
                                    backgroundColor:
                                      review.sentiment === "positive" ? "#4CAF50" :
                                        review.sentiment === "negative" ? "#F44336" :
                                          "#9E9E9E",
                                    fontSize: "0.75rem"
                                  }}>
                                    {review.sentiment.charAt(0).toUpperCase() + review.sentiment.slice(1)}
                                  </span>
                                )}
                                <small className="text-muted ms-3">
                                  {review.createdAt ? format(new Date(review.createdAt), "MMM dd, yyyy") : ""}
                                </small>
                              </div>

                              {authState.username === review.username && (
                                <button
                                  className="btn btn-sm"
                                  onClick={() => deleteReview(review.id)}
                                  style={{
                                    backgroundColor: accentColor,
                                    color: "white",
                                    padding: "2px 8px"
                                  }}
                                >
                                  <i className="fas fa-trash-alt"></i>
                                </button>
                              )}
                            </div>

                            <div className="card-body">
                              <p className="card-text">{review.review_text || "No review text available"}</p>

                              {review.admin_response && (
                                <div className="mt-3 p-3 rounded" style={{ backgroundColor: "#F8F9FA" }}>
                                  <p className="mb-1">
                                    <strong>
                                      <i className="fas fa-reply me-2" style={{ color: primaryColor }}></i>
                                      Admin Response:
                                    </strong>
                                  </p>
                                  <p className="mb-0 ms-4">{review.admin_response}</p>
                                </div>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-4">
                        <i className="fas fa-comment-slash fa-3x mb-3" style={{ color: accentColor }}></i>
                        <p style={{ color: primaryColor }}>No reviews for this event yet. Be the first to share your experience!</p>
                      </div>
                    )}
                  </div>
                </div>
              </>
            ) : (
              // For upcoming events, show an alternate component in place of reviews
              <div className="card shadow-sm">
                <div className="card-header" style={{ backgroundColor: "#F8F9FA" }}>
                  <h3 className="mb-0 fs-5" style={{ color: primaryColor }}>
                    <i className="fas fa-info-circle me-2" style={{ color: accentColor }}></i>
                    Event Information
                  </h3>
                </div>
                <div className="card-body">
                  <div className="text-center py-4">
                    <i className="fas fa-calendar-day fa-3x mb-3" style={{ color: accentColor }}></i>
                    <h4 style={{ color: primaryColor }}>This is an upcoming event</h4>
                    <p className="text-muted">Reviews can only be submitted after the event has taken place.</p>

                    <div className="mt-4 mb-3">
                      <p className="fw-bold">What to expect:</p>
                      <ul className="list-group list-group-flush text-start">
                        <li className="list-group-item"><i className="fas fa-check-circle me-2" style={{ color: accentColor }}></i>Connect with other attendees</li>
                        <li className="list-group-item"><i className="fas fa-check-circle me-2" style={{ color: accentColor }}></i>Learn from industry experts</li>
                        <li className="list-group-item"><i className="fas fa-check-circle me-2" style={{ color: accentColor }}></i>Expand your professional network</li>
                        <li className="list-group-item"><i className="fas fa-check-circle me-2" style={{ color: accentColor }}></i>Share your insights and experiences</li>
                      </ul>
                    </div>

                    <button
                      className="btn mt-4"
                      onClick={handleRegistration}
                      style={{
                        backgroundColor: accentColor,
                        color: "white",
                        padding: "0.75rem 2rem",
                        borderRadius: "8px",
                        fontSize: "1.1rem",
                        fontWeight: "500"
                      }}
                    >
                      <i className="fas fa-ticket-alt me-2"></i>
                      Register for This Event
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Social Share Modal */}
        {showShareModal && (
          <div className="modal fade show" style={{ display: 'block', backgroundColor: 'rgba(0,0,0,0.5)', zIndex: 1050 }}>
            <div className="modal-dialog modal-dialog-centered">
              <div className="modal-content">
                <div className="modal-header" style={{ backgroundColor: primaryColor, color: 'white' }}>
                  <h5 className="modal-title">
                    <i className="fas fa-share-alt me-2"></i>
                    Share Your Review
                  </h5>
                  <button
                    type="button"
                    className="btn-close btn-close-white"
                    onClick={closeShareModal}
                    disabled={isAuthenticating}
                  ></button>
                </div>
                <div className="modal-body">
                  <p>Your review has been submitted successfully! Would you like to share this event on social media?</p>

                  <div className="form-group mb-3">
                    <label htmlFor="shareMessage" className="form-label">
                      Share Message:
                      <small className="text-muted ms-2">
                        Customize your message for social media
                      </small>
                    </label>
                    <textarea
                      id="shareMessage"
                      className="form-control"
                      value={shareMessage}
                      onChange={(e) => setShareMessage(e.target.value)}
                      rows="3"
                      style={{ borderColor: primaryColor }}
                    />
                  </div>

                  {/* Share Success/Error Message */}
                  {shareSuccess && (
                    <div className={`alert ${shareSuccess.success ? 'alert-success' : 'alert-danger'} mb-3`}>
                      {shareSuccess.success ? (
                        <i className="fas fa-check-circle me-2"></i>
                      ) : (
                        <i className="fas fa-exclamation-circle me-2"></i>
                      )}
                      {shareSuccess.message}
                    </div>
                  )}

                  <div className="d-flex justify-content-center flex-wrap gap-2 mb-3">
                    <button
                      className="btn"
                      onClick={() => handleShareSubmit('facebook')}
                      disabled={isAuthenticating}
                      style={{
                        backgroundColor: '#4267B2',
                        color: 'white',
                        width: '140px'
                      }}
                    >
                      <i className="fab fa-facebook me-2"></i>
                      Facebook
                    </button>

                    <button
                      className="btn"
                      onClick={() => handleShareSubmit('linkedin')}
                      disabled={isAuthenticating}
                      style={{
                        backgroundColor: '#0077B5',
                        color: 'white',
                        width: '140px'
                      }}
                    >
                      <i className="fab fa-linkedin me-2"></i>
                      LinkedIn
                    </button>

                    <button
                      className="btn"
                      onClick={() => handleShareSubmit('twitter')}
                      disabled={isAuthenticating}
                      style={{
                        backgroundColor: '#1DA1F2',
                        color: 'white',
                        width: '140px'
                      }}
                    >
                      <i className="fab fa-twitter me-2"></i>
                      Twitter
                    </button>
                  </div>

                  {isAuthenticating && (
                    <div className="text-center py-2">
                      <div className="spinner-border" role="status" style={{ color: primaryColor }}>
                        <span className="visually-hidden">Authenticating...</span>
                      </div>
                      <p className="mt-2">Connecting to {sharingProvider}...</p>
                    </div>
                  )}
                </div>
                <div className="modal-footer">
                  <button
                    type="button"
                    className="btn btn-secondary"
                    onClick={closeShareModal}
                    disabled={isAuthenticating}
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Footer with accessibility-compliant links */}
      <footer style={{
        ...footerStyle,
        position: "relative",
        marginTop: "50px",
        bottom: 0,
        left: 0,
        right: 0
      }}>
        <div style={footerContentStyle}>
          <p style={{ ...footerTextStyle, fontWeight: "600", fontSize: "1rem" }}>
            <i className="fas fa-heart" style={footerIconStyle}></i> EventHub Community
          </p>
          <p style={footerTextStyle}>
            Connect with event organizers and attendees from around the world
          </p>
          <p style={footerTextStyle}>
            <button
              onClick={() => navigate("/terms")}
              style={{ ...footerLinkStyle, background: "none", border: "none", cursor: "pointer", padding: 0 }}
            >
              Terms
            </button> •
            <button
              onClick={() => navigate("/privacy")}
              style={{ ...footerLinkStyle, background: "none", border: "none", cursor: "pointer", margin: "0 0.5rem", padding: 0 }}
            >
              Privacy
            </button> •
            <button
              onClick={() => navigate("/support")}
              style={{ ...footerLinkStyle, background: "none", border: "none", cursor: "pointer", padding: 0 }}
            >
              Support
            </button>
          </p>
          <p style={{ ...footerTextStyle, marginTop: "0.5rem", fontSize: "0.8rem" }}>
            © {new Date().getFullYear()} EventHub. All rights reserved.
          </p>
        </div>
      </footer>
    </>
  );
}
</file>

<file path="server/index.js">
const express = require("express");
const cors = require("cors");
const http = require("http");
const socketIo = require("socket.io");
const jwt = require("jsonwebtoken");
require("dotenv").config();

// Middleware
const app = express();
app.use(express.json());
app.use(cors());
app.use((err, req, res, next) => {
  console.error('Server error:', err);
  res.status(500).json({ error: 'Internal server error' });
});

// Import the database models
const db = require("./models");

// Import routers
const chatRouter = require("./routes/Chatbot");
const insightRouter = require("./routes/AIInsightsRoutes");
const eventRouter = require("./routes/Events");
const userRoutes = require("./routes/userRoutes");
const reviewRouter = require("./routes/Reviews");
const usersRouter = require("./routes/Users");
const responseRouter = require("./routes/Response");
const recommendationsRouter = require('./routes/Recommendations');
const notificationRouter = require("./routes/Notifications");
// Add the new admin analytics router
const adminAnalyticsRouter = require("./routes/AdminAnalytics");
// Add the new registrations router
const registrationRouter = require("./routes/Registrations");
const paymentsRouter = require('./routes/Payments');

// Create HTTP server and initialize socket.io
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: process.env.FRONTEND_URL || "http://localhost:3000",
    methods: ["GET", "POST"],
    credentials: true
  }
});

// Make io accessible to routes
app.io = io;

// Setup socket.io with authentication
io.on("connection", (socket) => {
  console.log("New client connected:", socket.id);

  socket.on('authenticate', (token) => {
    console.log("Authenticating socket with token:", token);
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      socket.userId = decoded.id;
      socket.join(`user-${decoded.id}`);

      if (decoded.isAdmin) {
        socket.join('admin-channel');
        console.log(`Admin user ${decoded.id} joined admin-channel`);
      }
    } catch (error) {
      console.error('Socket authentication error:', error);
    }
  });

  socket.on("disconnect", () => {
    console.log("Client disconnected:", socket.id);
  });
});

// Sentiment Analysis Route
app.post("/sentiment", (req, res) => {
  const { review } = req.body;

  if (!review) {
    return res.status(400).json({ error: "Review text is required." });
  }

  // Analyze sentiment (replace with a proper library)
  const sentimentResult = analyzeSentiment(review);

  res.json({ sentiment: sentimentResult });
});

// Simple sentiment analysis function
function analyzeSentiment(review) {
  if (review.includes("good") || review.includes("amazing")) {
    return "positive";
  }
  return "negative";
}

// Use routers
app.use("/events", eventRouter);
app.use("/reviews", reviewRouter);
app.use("/auth", usersRouter);
app.use("/api/chat", chatRouter);
app.use("/respond", responseRouter);
app.use("/api/user", userRoutes);
app.use("/notifications", notificationRouter);
app.use('/uploads', express.static('uploads'));
// Add the new admin analytics routes
app.use("/analytics", adminAnalyticsRouter);
// Add the new registrations routes
app.use("/registrations", registrationRouter);
app.use("/AIInsightsRoutes", insightRouter);
app.use('/api/recommendations', recommendationsRouter);
app.use("/payments", paymentsRouter);
app.get('/api/health', (req, res) => {
  res.status(200).json({ status: 'OK' });
});


// Modified sync method to prevent duplicate column issues
if (process.env.NODE_ENV === 'development') {
  // In development, only sync if needed, but don't alter existing tables
  db.sequelize.sync({ alter: false }).then(() => {
    // Add EventAnalytics model to database if not already exist
    if (!db.EventAnalytics) {
      console.warn("EventAnalytics model not found. Make sure to add it to your models.");
    }

    const port = process.env.PORT || 3000;
    app.listen(port, () => {
      console.log(`Server running on port ${port}`);
    });
  });
} else {
  // In production, don't sync at all - rely on migrations
  const PORT = process.env.PORT || 3001;
  server.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
  });
}
</file>

<file path="client/src/App.js">
"use client"

import { useState, useEffect } from "react";
import { useLocation, Routes, Route, Link, useNavigate, Navigate } from "react-router-dom";
import axios from "axios";
import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap/dist/js/bootstrap.bundle.min.js";
import FloatingChatbot from "./components/FloatingChatbot";
// import logo from "./images/logo.png";

import Home from "./pages/Home";
import CreateEvent from "./pages/CreateEvent";
import Event from "./pages/Event";
import LandingPage from "./pages/LandingPage";
import EventRegistration from "./pages/EventRegistration";
import AIReviewsPage from "./pages/AIReviewsPage";
import AIInsights from "./pages/AIInsights";
import AdminAIReviewsDashboard from "./pages/AdminAIReviewsDashboard";
import EventPersonalization from "./pages/EventPersonalization";
import PersonalizedRecommendations from "./pages/PersonalizedRecommendations";
import Profile from "./pages/Profile";
import Calendar from "./pages/Calendar";
import AdminCalendar from "./pages/AdminCalendar";
import Response from "./pages/Response";
import Login from "./pages/Login";
import PageNotFound from "./pages/PageNotFound";
import Registration from "./pages/Registration";
import Chatbot from "./pages/Chatbot";
import EditEvent from "./pages/EditEvent";
import AdminDashboard from "./pages/AdminDashboard";
import ResetPassword from "./pages/ResetPassword"; // Add this
import ForgotPassword from "./pages/ForgotPassword"; // Add this
import AdminRegistrations from "./pages/AdminRegistrations";
import MyRegistrations from "./pages/MyRegistrations";

import { AuthContext } from "./helpers/AuthContext";
import { NotificationProvider, useNotifications } from "./helpers/NotificationContext";
import NotificationIcon from "./pages/NotificationIcon";
import UserNotificationIcon from "./pages/UserNotificationIcon"; // Adjust path as needed
// Add this import at the top of App.js with other imports
import AdminNotificationIcon from "./pages/AdminNotificationIcon";

function App() {
  const location = useLocation();
  const navigate = useNavigate();
  const { notifications, markAsRead, markAllAsRead } = useNotifications(); // Use the hook here
  const [authState, setAuthState] = useState({
    username: "",
    id: 0,
    status: false,
    isAdmin: false,
  });

  const useSocketNotifications = true;

  useEffect(() => {
    const token = localStorage.getItem("accessToken");

    if (!token) {
      setAuthState({ username: "", id: 0, status: false, isAdmin: false });
      return;
    }

    axios
      .get("http://localhost:3001/auth/auth", {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((response) => {
        if (response.data.error) {
          setAuthState({ username: "", id: 0, status: false, isAdmin: false });
          localStorage.removeItem("accessToken");
        } else {
          setAuthState({
            username: response.data.username || "User",
            id: response.data.id,
            status: true,
            isAdmin: response.data.isAdmin || false,
          });

          if (response.data.isAdmin && window.location.pathname === "/login") {
            navigate("/admin");
          }
        }
      })
      .catch(() => {
        setAuthState({ username: "", id: 0, status: false, isAdmin: false });
        localStorage.removeItem("accessToken");
      });
  }, [navigate]);

  const logout = () => {
    localStorage.removeItem("accessToken");
    setAuthState({ username: "", id: 0, status: false, isAdmin: false });
    navigate("/login");
  };

  const deleteEvent = async (eventId) => {
    try {
      const token = localStorage.getItem("accessToken");

      if (!token) {
        navigate("/login");
        return;
      }

      const response = await axios.delete(`http://localhost:3001/events/${eventId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (response.status === 200) {
        navigate("/home");
      }
    } catch (error) {
      if (error.response?.status === 401) {
        localStorage.removeItem("accessToken");
        setAuthState({ username: "", id: 0, status: false, isAdmin: false });
        navigate("/login");
      }
    }
  };
  const hideNavbarRoutes = ["/", "/landingPage", "/login", "/registration"];
{!hideNavbarRoutes.includes(location.pathname) && (
  <div style={{ paddingTop: "80px" }}></div>
)}

  return (
    <AuthContext.Provider value={{ authState, setAuthState, deleteEvent }}>
      <NotificationProvider>
        <div className="App">
        {!hideNavbarRoutes.includes(location.pathname) && (
  <nav className="navbar navbar-expand-lg navbar-dark fixed-top shadow-sm" style={{ backgroundColor: '#001F3F' }}>
    <div className="container">
      {/* Brand/Logo */}
      <Link className="navbar-brand d-flex align-items-center" to="/">
        <i className="bi bi-calendar-event fs-4 me-2"></i>
        <span className="fw-bold">VibeCatcher</span>
      </Link>

      {/* Navbar Toggler */}
      <button
        className="navbar-toggler border-0"
        type="button"
        data-bs-toggle="collapse"
        data-bs-target="#navbarNav"
        aria-controls="navbarNav"
        aria-expanded="false"
        aria-label="Toggle navigation"
      >
        <span className="navbar-toggler-icon"></span>
      </button>

      {/* Navbar Links */}
      <div className="collapse navbar-collapse" id="navbarNav">
        <ul className="navbar-nav mx-auto">
          {!authState.status ? (
            <>
              <li className="nav-item px-2">
                <Link className="nav-link" to="/login">
                  Login
                </Link>
              </li>
              <li className="nav-item px-2">
                <Link className="nav-link" to="/registration">
                  Register
                </Link>
              </li>
            </>
          ) : (
            <>
              {!authState.isAdmin && (
                <>
                  <li className="nav-item px-2">
                    <Link className="nav-link" to="/home">
                      <i className="bi bi-house-door me-1"></i> Home
                    </Link>
                  </li>
                  <li className="nav-item px-2">
    <Link className="nav-link" to="/my-registrations">
      <i className="bi bi-ticket-perforated me-1"></i> My Tickets
    </Link>
  </li>
                  <li className="nav-item px-2">
                    <Link className="nav-link" to="/calendar">
                      <i className="bi bi-calendar3 me-1"></i> Calendar
                    </Link>
                  </li>
                  <li className="nav-item px-2">
                    <Link className="nav-link" to="/AIReviewsPage">
                    <i className="bi bi-bar-chart-line me-1"></i> AI Reviews
                    </Link>
                  </li>
                  <li className="nav-item px-2">
                  <Link className="nav-link" to="/AIInsights">
  <i className="bi bi-lightbulb me-1"></i> AI Insights
</Link>
                  </li>
                  <li className="nav-item px-2">
                  <Link className="nav-link" to="/PersonalizedRecommendations">
  <i className="bi bi-bullseye me-1"></i> Recommendations
</Link>
</li>
                </>
              )}
              {authState.isAdmin && (
                <>
                  <li className="nav-item px-2">
                    <Link className="nav-link" to="/admin">
                      <i className="bi bi-speedometer2 me-1"></i> Dashboard
                    </Link>
                  </li>
                  <li className="nav-item px-2">
                    <Link className="nav-link" to="/create_event">
                      <i className="bi bi-plus-circle me-1"></i> Create Event
                    </Link>
                  </li>
                  <li className="nav-item px-2">
    <Link className="nav-link" to="/admin/registrations">
      <i className="bi bi-person-badge me-1"></i> Registrations
    </Link>
  </li>
                  <li className="nav-item px-2">
                    <Link className="nav-link" to="/admincalendar">
                      <i className="bi bi-calendar3 me-1"></i> Calendar
                    </Link>
                  </li>
                  <li className="nav-item px-2">
                    <Link className="nav-link" to="/AdminAIReviewsDashboard">
                    <i className="bi bi-bar-chart-line me-1"></i> AI Analytics
                    </Link>
                  </li>
                  <li className="nav-item px-2">
                  <Link className="nav-link" to="/AIInsights">
  <i className="bi bi-lightbulb me-1"></i> AI Insights
</Link>
                  </li>
                </>
              )}
            </>
          )}
        </ul>

        {/* Right side items: Username, Notification, and Logout */}
        {authState.status && (
          <div className="d-flex align-items-center ms-lg-auto mt-3 mt-lg-0">
            {/* Username with Profile tooltip */}
            <Link className="text-decoration-none me-3" to="/profile" title="Profile">
              <span className="text-white d-flex align-items-center">
                <i className="bi bi-person-circle me-1"></i>
                <span className="d-none d-sm-inline">{authState.username}</span>
              </span>
            </Link>

            {/* Notification Icon */}
            <div className="me-3">
              {useSocketNotifications ? (
                authState.isAdmin ? (
                  <AdminNotificationIcon />
                ) : (
                  <UserNotificationIcon />
                )
              ) : (
                <NotificationIcon
                  notifications={notifications}
                  markAsRead={markAsRead}
                  markAllAsRead={markAllAsRead}
                />
              )}
            </div>

            {/* Logout Button */}
            <button
              className="btn btn-sm rounded-pill px-3"
              style={{ backgroundColor: '#FF6B6B', borderColor: '#FF6B6B' }}
              onClick={logout}
            >
              <i className="bi bi-box-arrow-right me-1"></i>
              <span className="d-none d-sm-inline">Logout</span>
            </button>
          </div>
        )}
      </div>
    </div>
  </nav>
)}

{!hideNavbarRoutes.includes(location.pathname) && (
  <div style={{ paddingTop: "80px" }}></div>
)}
          <Routes>
            <Route path="/" element={<LandingPage />} />
            <Route path="/landingPage" element={<LandingPage />} />
            <Route path="/EventPersonalization" element={<EventPersonalization />} />
            <Route 
  path="/AdminAIReviewsDashboard" 
  element={authState.status && authState.isAdmin ? <AdminAIReviewsDashboard /> : <Navigate to="/login" />} 
/>
            <Route path="/AIReviewsPage" element={<AIReviewsPage />} />
            <Route path="/AIInsights" element={<AIInsights />} />
            <Route path="/PersonalizedRecommendations" element={<PersonalizedRecommendations />} />
            <Route path="/home" element={<Home />} />
            <Route path="/admin" element={authState.isAdmin ? <AdminDashboard /> : <Navigate to="/home" />} />
            <Route path="/create_event" element={authState.isAdmin ? <CreateEvent /> : <Navigate to="/home" />} />
            <Route path="/login" element={<Login />} />
            <Route path="/profile" element={<Profile />} />
            <Route path="/admincalendar" element={<AdminCalendar />} />
            <Route path="/calendar" element={<Calendar />} />
            <Route path="/registration" element={<Registration />} />
            <Route path="/event/:id" element={<Event />} />
            <Route path="/response/:id" element={<Response />} />
            <Route path="/chatbot" element={<Chatbot />} />
            <Route path="/register/:id" element={<EventRegistration />} />
            <Route path="/forgot-password" element={<ForgotPassword />} />
            <Route path="/reset-password/:token" element={<ResetPassword />} />
            <Route path="/admin/edit-event/:id" element={authState.isAdmin ? <EditEvent /> : <Navigate to="/" />} />
            <Route 
    path="/admin/registrations" 
    element={authState.isAdmin ? <AdminRegistrations /> : <Navigate to="/home" />} 
  />
  <Route 
    path="/my-registrations" 
    element={authState.status ? <MyRegistrations /> : <Navigate to="/login" />} 
  />
            <Route path="*" element={<PageNotFound />} />
          </Routes>
          {authState.status && !hideNavbarRoutes.includes(location.pathname) && <FloatingChatbot />}
        </div>
      </NotificationProvider>
    </AuthContext.Provider>
  );
}

export default App;
</file>

</files>
